
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001054c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  080106e0  080106e0  000206e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011190  08011190  0003024c  2**0
                  CONTENTS
  4 .ARM          00000008  08011190  08011190  00021190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011198  08011198  0003024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011198  08011198  00021198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801119c  0801119c  0002119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  080111a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003024c  2**0
                  CONTENTS
 10 .bss          000052a8  2000024c  2000024c  0003024c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200054f4  200054f4  0003024c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002247d  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d9a  00000000  00000000  000526f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00057498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001848  00000000  00000000  00058ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007260  00000000  00000000  0005a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f02b  00000000  00000000  00061980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20d6  00000000  00000000  000809ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152a81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ff8  00000000  00000000  00152ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080106c4 	.word	0x080106c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	080106c4 	.word	0x080106c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 8000eb4:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <ws2812NumOn+0x20>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <ws2812NumOn+0x24>)
 8000ebe:	f005 fa8b 	bl	80063d8 <HAL_TIM_PWM_Start_DMA>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000268 	.word	0x20000268
 8000ed0:	20000940 	.word	0x20000940

08000ed4 <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b09d      	sub	sp, #116	; 0x74
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	70fb      	strb	r3, [r7, #3]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70bb      	strb	r3, [r7, #2]
 8000eea:	4613      	mov	r3, r2
 8000eec:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	021a      	lsls	r2, r3, #8
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	021a      	lsls	r2, r3, #8
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	4413      	add	r3, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	3370      	adds	r3, #112	; 0x70
 8000f04:	443b      	add	r3, r7
 8000f06:	f843 2c64 	str.w	r2, [r3, #-100]

	for(int i=0;i<24;i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	e02c      	b.n	8000f6a <ws2812SetColor+0x96>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3370      	adds	r3, #112	; 0x70
 8000f16:	443b      	add	r3, r7
 8000f18:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00e      	beq.n	8000f48 <ws2812SetColor+0x74>
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	461a      	mov	r2, r3
 8000f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <ws2812SetColor+0xac>)
 8000f40:	2143      	movs	r1, #67	; 0x43
 8000f42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f46:	e00d      	b.n	8000f64 <ws2812SetColor+0x90>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	461a      	mov	r2, r3
 8000f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <ws2812SetColor+0xac>)
 8000f5e:	2121      	movs	r1, #33	; 0x21
 8000f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 8000f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f66:	3301      	adds	r3, #1
 8000f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f6c:	2b17      	cmp	r3, #23
 8000f6e:	ddcf      	ble.n	8000f10 <ws2812SetColor+0x3c>
	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3774      	adds	r7, #116	; 0x74
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000268 	.word	0x20000268

08000f84 <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	4613      	mov	r3, r2
 8000f94:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	021a      	lsls	r2, r3, #8
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	021a      	lsls	r2, r3, #8
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e02d      	b.n	8001008 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e024      	b.n	8000ffc <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00c      	beq.n	8000fde <ws2812AllColor+0x5a>
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a11      	ldr	r2, [pc, #68]	; (800101c <ws2812AllColor+0x98>)
 8000fd6:	2143      	movs	r1, #67	; 0x43
 8000fd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fdc:	e00b      	b.n	8000ff6 <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <ws2812AllColor+0x98>)
 8000ff0:	2121      	movs	r1, #33	; 0x21
 8000ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b17      	cmp	r3, #23
 8001000:	ddd7      	ble.n	8000fb2 <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3b01      	subs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dcce      	bgt.n	8000fac <ws2812AllColor+0x28>
		}
	}
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20000268 	.word	0x20000268

08001020 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_CAN1_Init+0x64>)
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <MX_CAN1_Init+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_CAN1_Init+0x64>)
 800102c:	2206      	movs	r2, #6
 800102e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_CAN1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_CAN1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_CAN1_Init+0x64>)
 800103e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001042:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_CAN1_Init+0x64>)
 8001046:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800104a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_CAN1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_CAN1_Init+0x64>)
 8001054:	2201      	movs	r2, #1
 8001056:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_CAN1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_CAN1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_CAN1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_CAN1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_CAN1_Init+0x64>)
 8001072:	f002 fccb 	bl	8003a0c <HAL_CAN_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800107c:	f001 fd8a 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200007b0 	.word	0x200007b0
 8001088:	40006400 	.word	0x40006400

0800108c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_CAN_MspInit+0x94>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d134      	bne.n	8001118 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010f8:	2309      	movs	r3, #9
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <HAL_CAN_MspInit+0x9c>)
 8001104:	f004 f830 	bl	8005168 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2105      	movs	r1, #5
 800110c:	2014      	movs	r0, #20
 800110e:	f003 fbf1 	bl	80048f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001112:	2014      	movs	r0, #20
 8001114:	f003 fc0a 	bl	800492c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40006400 	.word	0x40006400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400

0800112c <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <CanInit+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <CanInit+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <CanInit+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <CanInit+0x98>)
 8001150:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	b29b      	uxth	r3, r3
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <CanInit+0x98>)
 800115e:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <CanInit+0x98>)
 8001168:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	b29b      	uxth	r3, r3
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <CanInit+0x98>)
 8001176:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <CanInit+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <CanInit+0x98>)
 8001180:	2201      	movs	r2, #1
 8001182:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <CanInit+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <CanInit+0x9c>)
 800118c:	f002 fe1a 	bl	8003dc4 <HAL_CAN_Start>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <CanInit+0x6e>
 8001196:	f001 fcfd 	bl	8002b94 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800119a:	2102      	movs	r1, #2
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <CanInit+0x9c>)
 800119e:	f003 f877 	bl	8004290 <HAL_CAN_ActivateNotification>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d000      	beq.n	80011aa <CanInit+0x7e>
 80011a8:	e7fe      	b.n	80011a8 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011aa:	4906      	ldr	r1, [pc, #24]	; (80011c4 <CanInit+0x98>)
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <CanInit+0x9c>)
 80011ae:	f002 fd29 	bl	8003c04 <HAL_CAN_ConfigFilter>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 80011b8:	f001 fcec 	bl	8002b94 <Error_Handler>
    }
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000788 	.word	0x20000788
 80011c8:	200007b0 	.word	0x200007b0

080011cc <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	460b      	mov	r3, r1
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	4613      	mov	r3, r2
 80011e0:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <sendCan+0x2c>
 80011f4:	2304      	movs	r3, #4
 80011f6:	e000      	b.n	80011fa <sendCan+0x2e>
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <sendCan+0x74>)
 8001208:	f002 fefb 	bl	8004002 <HAL_CAN_GetTxMailboxesFreeLevel>
 800120c:	4603      	mov	r3, r0
 800120e:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00d      	beq.n	8001232 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	f107 0114 	add.w	r1, r7, #20
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <sendCan+0x74>)
 8001222:	f002 fe13 	bl	8003e4c <HAL_CAN_AddTxMessage>
 8001226:	4603      	mov	r3, r0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d000      	beq.n	8001232 <sendCan+0x66>
 8001230:	e7fe      	b.n	8001230 <sendCan+0x64>
    }
    osDelay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f008 f81b 	bl	800926e <osDelay>
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200007b0 	.word	0x200007b0

08001244 <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	460b      	mov	r3, r1
 8001252:	80bb      	strh	r3, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

	switch (len) {
 8001260:	7e3b      	ldrb	r3, [r7, #24]
 8001262:	3b01      	subs	r3, #1
 8001264:	2b03      	cmp	r3, #3
 8001266:	d817      	bhi.n	8001298 <SDOMsg+0x54>
 8001268:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <SDOMsg+0x2c>)
 800126a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126e:	bf00      	nop
 8001270:	08001281 	.word	0x08001281
 8001274:	08001287 	.word	0x08001287
 8001278:	0800128d 	.word	0x0800128d
 800127c:	08001293 	.word	0x08001293
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8001280:	232f      	movs	r3, #47	; 0x2f
 8001282:	723b      	strb	r3, [r7, #8]
 8001284:	e008      	b.n	8001298 <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 8001286:	232b      	movs	r3, #43	; 0x2b
 8001288:	723b      	strb	r3, [r7, #8]
 800128a:	e005      	b.n	8001298 <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 800128c:	2327      	movs	r3, #39	; 0x27
 800128e:	723b      	strb	r3, [r7, #8]
 8001290:	e002      	b.n	8001298 <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 8001292:	2323      	movs	r3, #35	; 0x23
 8001294:	723b      	strb	r3, [r7, #8]
 8001296:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	3301      	adds	r3, #1
 800129e:	88ba      	ldrh	r2, [r7, #4]
 80012a0:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	3304      	adds	r3, #4
 80012ac:	7e3a      	ldrb	r2, [r7, #24]
 80012ae:	4639      	mov	r1, r7
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00b f9d6 	bl	800c662 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80012bc:	4618      	mov	r0, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	2300      	movs	r3, #0
 80012c4:	2208      	movs	r2, #8
 80012c6:	f7ff ff81 	bl	80011cc <sendCan>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop

080012d4 <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4613      	mov	r3, r2
 80012e2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d102      	bne.n	80012f8 <NMT_Mode+0x24>
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	723b      	strb	r3, [r7, #8]
 80012f6:	e001      	b.n	80012fc <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 80012f8:	2301      	movs	r3, #1
 80012fa:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 8001300:	f107 0108 	add.w	r1, r7, #8
 8001304:	2300      	movs	r3, #0
 8001306:	2208      	movs	r2, #8
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff ff5f 	bl	80011cc <sendCan>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <PDOMapping>:


int PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{
 8001318:	b082      	sub	sp, #8
 800131a:	b590      	push	{r4, r7, lr}
 800131c:	b089      	sub	sp, #36	; 0x24
 800131e:	af02      	add	r7, sp, #8
 8001320:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001324:	e884 000c 	stmia.w	r4, {r2, r3}
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	460b      	mov	r3, r1
 800132e:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
	uint16_t tmp_TxRx = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	82fb      	strh	r3, [r7, #22]
	uint8_t type = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	757b      	strb	r3, [r7, #21]

	if(Num_entry>=5){printf("Num_entry error: %d\n", Num_entry); return 0;}
 800133c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001340:	2b04      	cmp	r3, #4
 8001342:	d907      	bls.n	8001354 <PDOMapping+0x3c>
 8001344:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001348:	4619      	mov	r1, r3
 800134a:	4858      	ldr	r0, [pc, #352]	; (80014ac <PDOMapping+0x194>)
 800134c:	f00b fe9e 	bl	800d08c <iprintf>
 8001350:	2300      	movs	r3, #0
 8001352:	e0a4      	b.n	800149e <PDOMapping+0x186>

	if(PDO_index>=0x1600&&PDO_index<=0x17ff){tmp_TxRx=0x200+0x100*(PDO_index-0x1600); type=0xff;}
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800135a:	d30d      	bcc.n	8001378 <PDOMapping+0x60>
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001362:	d209      	bcs.n	8001378 <PDOMapping+0x60>
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	f5a3 53af 	sub.w	r3, r3, #5600	; 0x15e0
 800136a:	3b1e      	subs	r3, #30
 800136c:	b29b      	uxth	r3, r3
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	82fb      	strh	r3, [r7, #22]
 8001372:	23ff      	movs	r3, #255	; 0xff
 8001374:	757b      	strb	r3, [r7, #21]
 8001376:	e021      	b.n	80013bc <PDOMapping+0xa4>
	else if(PDO_index>=0x1a00&&PDO_index<=0x1bff) {
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800137e:	d316      	bcc.n	80013ae <PDOMapping+0x96>
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001386:	d212      	bcs.n	80013ae <PDOMapping+0x96>
		tmp_TxRx=0x180+0x100*(PDO_index-0x1a00);
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	f5a3 53d0 	sub.w	r3, r3, #6656	; 0x1a00
 800138e:	b29b      	uxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001398:	82fb      	strh	r3, [r7, #22]
		if(Param.option==0){type=0xfe;}
 800139a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <PDOMapping+0x90>
 80013a2:	23fe      	movs	r3, #254	; 0xfe
 80013a4:	757b      	strb	r3, [r7, #21]
 80013a6:	e009      	b.n	80013bc <PDOMapping+0xa4>
		else {type=0xff;}
 80013a8:	23ff      	movs	r3, #255	; 0xff
 80013aa:	757b      	strb	r3, [r7, #21]
		if(Param.option==0){type=0xfe;}
 80013ac:	e006      	b.n	80013bc <PDOMapping+0xa4>
		}
	else {printf("PDO_index error: %d\n", PDO_index); return 0;}
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	4619      	mov	r1, r3
 80013b2:	483f      	ldr	r0, [pc, #252]	; (80014b0 <PDOMapping+0x198>)
 80013b4:	f00b fe6a 	bl	800d08c <iprintf>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e070      	b.n	800149e <PDOMapping+0x186>

	NMT_Mode(PRE_OPERATION, Node_id);//pre-operation mode
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4619      	mov	r1, r3
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff ff87 	bl	80012d4 <NMT_Mode>

	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	e05d      	b.n	8001488 <PDOMapping+0x170>
		SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 80013cc:	88b9      	ldrh	r1, [r7, #4]
 80013ce:	79f8      	ldrb	r0, [r7, #7]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	2200      	movs	r2, #0
 80013d8:	f7ff ff34 	bl	8001244 <SDOMsg>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	440a      	add	r2, r1
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	440a      	add	r2, r1
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	4413      	add	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	3301      	adds	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	88b9      	ldrh	r1, [r7, #4]
 800140e:	79f8      	ldrb	r0, [r7, #7]
 8001410:	2304      	movs	r3, #4
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f7ff ff15 	bl	8001244 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 1, tmp_TxRx+Node_id, 4);//cob-id??
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001420:	b299      	uxth	r1, r3
 8001422:	8afa      	ldrh	r2, [r7, #22]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4413      	add	r3, r2
 8001428:	461a      	mov	r2, r3
 800142a:	79f8      	ldrb	r0, [r7, #7]
 800142c:	2304      	movs	r3, #4
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	2201      	movs	r2, #1
 8001434:	f7ff ff06 	bl	8001244 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 2, type, 1);//transmission type, fix asynchronous with 0xff
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800143e:	b299      	uxth	r1, r3
 8001440:	7d7b      	ldrb	r3, [r7, #21]
 8001442:	79f8      	ldrb	r0, [r7, #7]
 8001444:	2201      	movs	r2, #1
 8001446:	9200      	str	r2, [sp, #0]
 8001448:	2202      	movs	r2, #2
 800144a:	f7ff fefb 	bl	8001244 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 2);//not necessary 3= inhibit mode, 5=event timer mode
 800144e:	88bb      	ldrh	r3, [r7, #4]
 8001450:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001454:	b299      	uxth	r1, r3
 8001456:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3303      	adds	r3, #3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001464:	461c      	mov	r4, r3
 8001466:	79f8      	ldrb	r0, [r7, #7]
 8001468:	2302      	movs	r3, #2
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	4623      	mov	r3, r4
 800146e:	f7ff fee9 	bl	8001244 <SDOMsg>
		SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//set rpdo0 mapping
 8001472:	88b9      	ldrh	r1, [r7, #4]
 8001474:	79f8      	ldrb	r0, [r7, #7]
 8001476:	2301      	movs	r3, #1
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2200      	movs	r2, #0
 800147e:	f7ff fee1 	bl	8001244 <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3301      	adds	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	429a      	cmp	r2, r3
 8001490:	db9c      	blt.n	80013cc <PDOMapping+0xb4>
	}

	NMT_Mode(OPERATION, Node_id);//operation mode
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4619      	mov	r1, r3
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff ff1c 	bl	80012d4 <NMT_Mode>

	return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014a8:	b002      	add	sp, #8
 80014aa:	4770      	bx	lr
 80014ac:	080106e0 	.word	0x080106e0
 80014b0:	080106f8 	.word	0x080106f8

080014b4 <PDOMsg>:

void PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint8_t *buf)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	603a      	str	r2, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	460b      	mov	r3, r1
 80014c2:	80bb      	strh	r3, [r7, #4]
	sendCan((PDO_index-0x1800)+Node_id,buf,8,0);
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	f5a3 52c0 	sub.w	r2, r3, #6144	; 0x1800
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4413      	add	r3, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	2300      	movs	r3, #0
 80014d2:	2208      	movs	r2, #8
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	f7ff fe79 	bl	80011cc <sendCan>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <Vel_PDOMsg>:

void Vel_PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint16_t vel_left, uint16_t vel_right)
{
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4604      	mov	r4, r0
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4623      	mov	r3, r4
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4603      	mov	r3, r0
 80014f6:	80bb      	strh	r3, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0]=(uint8_t)vel_left;
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	723b      	strb	r3, [r7, #8]
	buf[1]=(uint8_t)(vel_left>>8);
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	b29b      	uxth	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	727b      	strb	r3, [r7, #9]
	buf[2]=(uint8_t)vel_right;
 8001510:	883b      	ldrh	r3, [r7, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	72bb      	strb	r3, [r7, #10]
	buf[3]=(uint8_t)(vel_right>>8);
 8001516:	883b      	ldrh	r3, [r7, #0]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	72fb      	strb	r3, [r7, #11]

	PDOMsg(Node_id, PDO_index, buf);
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	88b9      	ldrh	r1, [r7, #4]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ffc3 	bl	80014b4 <PDOMsg>
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <Tor_OnOff>:


void Tor_OnOff(uint8_t OnOff)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af02      	add	r7, sp, #8
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
	if(OnOff==1){
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d139      	bne.n	80015ba <Tor_OnOff+0x84>
		for(int i=0;i<2;i++){
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e032      	b.n	80015b2 <Tor_OnOff+0x7c>
			SDOMsg(i+1,0x6040, 0x0, 0x00, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3301      	adds	r3, #1
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	2302      	movs	r3, #2
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2300      	movs	r3, #0
 800155a:	2200      	movs	r2, #0
 800155c:	f246 0140 	movw	r1, #24640	; 0x6040
 8001560:	f7ff fe70 	bl	8001244 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x06, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 1: At this time, the low 4-bit status of 6041 is 0001, motor is released;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3301      	adds	r3, #1
 800156a:	b2d8      	uxtb	r0, r3
 800156c:	2302      	movs	r3, #2
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2306      	movs	r3, #6
 8001572:	2200      	movs	r2, #0
 8001574:	f246 0140 	movw	r1, #24640	; 0x6040
 8001578:	f7ff fe64 	bl	8001244 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x07, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 2: At this time, the low 4-bit status of 6041 is 0011, motor is enabled;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3301      	adds	r3, #1
 8001582:	b2d8      	uxtb	r0, r3
 8001584:	2302      	movs	r3, #2
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2307      	movs	r3, #7
 800158a:	2200      	movs	r2, #0
 800158c:	f246 0140 	movw	r1, #24640	; 0x6040
 8001590:	f7ff fe58 	bl	8001244 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x0f, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 3: At this time, the low 4-bit status of 6041 is 0111, motor is enabled;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	b2d8      	uxtb	r0, r3
 800159c:	2302      	movs	r3, #2
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	230f      	movs	r3, #15
 80015a2:	2200      	movs	r2, #0
 80015a4:	f246 0140 	movw	r1, #24640	; 0x6040
 80015a8:	f7ff fe4c 	bl	8001244 <SDOMsg>
		for(int i=0;i<2;i++){
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	ddc9      	ble.n	800154c <Tor_OnOff+0x16>
		}
	}
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
}
 80015b8:	e014      	b.n	80015e4 <Tor_OnOff+0xae>
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	e00e      	b.n	80015de <Tor_OnOff+0xa8>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2d8      	uxtb	r0, r3
 80015c8:	2302      	movs	r3, #2
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2300      	movs	r3, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	f246 0140 	movw	r1, #24640	; 0x6040
 80015d4:	f7ff fe36 	bl	8001244 <SDOMsg>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	dded      	ble.n	80015c0 <Tor_OnOff+0x8a>
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80015f8:	2100      	movs	r1, #0
 80015fa:	480a      	ldr	r0, [pc, #40]	; (8001624 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80015fc:	f002 fd36 	bl	800406c <HAL_CAN_GetRxMessage>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d000      	beq.n	8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8001606:	e7fe      	b.n	8001606 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000764 	.word	0x20000764
 8001620:	2000076c 	.word	0x2000076c
 8001624:	200007b0 	.word	0x200007b0
 8001628:	20000760 	.word	0x20000760

0800162c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_DMA_Init+0x68>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <MX_DMA_Init+0x68>)
 800163c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_DMA_Init+0x68>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_DMA_Init+0x68>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <MX_DMA_Init+0x68>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_DMA_Init+0x68>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2105      	movs	r1, #5
 800166e:	200e      	movs	r0, #14
 8001670:	f003 f940 	bl	80048f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001674:	200e      	movs	r0, #14
 8001676:	f003 f959 	bl	800492c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2105      	movs	r1, #5
 800167e:	203a      	movs	r0, #58	; 0x3a
 8001680:	f003 f938 	bl	80048f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001684:	203a      	movs	r0, #58	; 0x3a
 8001686:	f003 f951 	bl	800492c <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800169c:	2100      	movs	r1, #0
 800169e:	4802      	ldr	r0, [pc, #8]	; (80016a8 <fanInit+0x10>)
 80016a0:	f004 fdd2 	bl	8006248 <HAL_TIM_PWM_Start>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200008b0 	.word	0x200008b0

080016ac <fanOn>:

void fanOn(uint8_t duty)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b63      	cmp	r3, #99	; 0x63
 80016ba:	d901      	bls.n	80016c0 <fanOn+0x14>
 80016bc:	2364      	movs	r3, #100	; 0x64
 80016be:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <fanOn+0x24>
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <fanOn+0x38>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 80016ce:	e003      	b.n	80016d8 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <fanOn+0x38>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	200008b0 	.word	0x200008b0

080016e8 <rad2deg>:
//{
//
//}

int16_t rad2deg(double radian)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)(radian*180/MATH_PI);
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <rad2deg+0x50>)
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7fe ff7c 	bl	80005f8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	a309      	add	r3, pc, #36	; (adr r3, 8001730 <rad2deg+0x48>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7ff f89d 	bl	800084c <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa1d 	bl	8000b58 <__aeabi_d2iz>
 800171e:	4603      	mov	r3, r0
 8001720:	b21b      	sxth	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	54442d18 	.word	0x54442d18
 8001734:	400921fb 	.word	0x400921fb
 8001738:	40668000 	.word	0x40668000

0800173c <HAL_GPIO_EXTI_Callback>:
	//ModeD//for stop
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	4618      	mov	r0, r3
 800174e:	f007 fcbf 	bl	80090d0 <osThreadFlagsSet>

    if(GPIO_Pin == PS_SIG1_Pin) {
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	2b10      	cmp	r3, #16
 8001756:	d109      	bne.n	800176c <HAL_GPIO_EXTI_Callback+0x30>
    	PS_SIGx_Pin |= 0b00000001;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001764:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 8001766:	4819      	ldr	r0, [pc, #100]	; (80017cc <HAL_GPIO_EXTI_Callback+0x90>)
 8001768:	f00b fd16 	bl	800d198 <puts>
	}

    if(GPIO_Pin == PS_SIG2_Pin) {
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	2b20      	cmp	r3, #32
 8001770:	d109      	bne.n	8001786 <HAL_GPIO_EXTI_Callback+0x4a>
    	PS_SIGx_Pin |= 0b00000010;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800177e:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG2_Pin.\n");
 8001780:	4813      	ldr	r0, [pc, #76]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001782:	f00b fd09 	bl	800d198 <puts>
    }

    if(GPIO_Pin == PS_SIG3_Pin) {
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2b40      	cmp	r3, #64	; 0x40
 800178a:	d109      	bne.n	80017a0 <HAL_GPIO_EXTI_Callback+0x64>
    	PS_SIGx_Pin |= 0b00000100;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001798:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG3_Pin.\n");
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x98>)
 800179c:	f00b fcfc 	bl	800d198 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	2b80      	cmp	r3, #128	; 0x80
 80017a4:	d109      	bne.n	80017ba <HAL_GPIO_EXTI_Callback+0x7e>
    	PS_SIGx_Pin |= 0b00001000;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017b2:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x9c>)
 80017b6:	f00b fcef 	bl	800d198 <puts>
    }
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200007f4 	.word	0x200007f4
 80017c8:	200007d8 	.word	0x200007d8
 80017cc:	08010758 	.word	0x08010758
 80017d0:	08010778 	.word	0x08010778
 80017d4:	08010798 	.word	0x08010798
 80017d8:	080107b8 	.word	0x080107b8

080017dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <MX_FREERTOS_Init+0x78>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2001      	movs	r0, #1
 80017e6:	f007 fd8a 	bl	80092fe <osSemaphoreNew>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <MX_FREERTOS_Init+0x7c>)
 80017ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <MX_FREERTOS_Init+0x80>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	481a      	ldr	r0, [pc, #104]	; (8001860 <MX_FREERTOS_Init+0x84>)
 80017f6:	f007 fbd8 	bl	8008faa <osThreadNew>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <MX_FREERTOS_Init+0x88>)
 80017fe:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <MX_FREERTOS_Init+0x8c>)
 8001802:	2100      	movs	r1, #0
 8001804:	4819      	ldr	r0, [pc, #100]	; (800186c <MX_FREERTOS_Init+0x90>)
 8001806:	f007 fbd0 	bl	8008faa <osThreadNew>
 800180a:	4603      	mov	r3, r0
 800180c:	4a18      	ldr	r2, [pc, #96]	; (8001870 <MX_FREERTOS_Init+0x94>)
 800180e:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <MX_FREERTOS_Init+0x98>)
 8001812:	2100      	movs	r1, #0
 8001814:	4818      	ldr	r0, [pc, #96]	; (8001878 <MX_FREERTOS_Init+0x9c>)
 8001816:	f007 fbc8 	bl	8008faa <osThreadNew>
 800181a:	4603      	mov	r3, r0
 800181c:	4a17      	ldr	r2, [pc, #92]	; (800187c <MX_FREERTOS_Init+0xa0>)
 800181e:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_FREERTOS_Init+0xa4>)
 8001822:	2100      	movs	r1, #0
 8001824:	4817      	ldr	r0, [pc, #92]	; (8001884 <MX_FREERTOS_Init+0xa8>)
 8001826:	f007 fbc0 	bl	8008faa <osThreadNew>
 800182a:	4603      	mov	r3, r0
 800182c:	4a16      	ldr	r2, [pc, #88]	; (8001888 <MX_FREERTOS_Init+0xac>)
 800182e:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <MX_FREERTOS_Init+0xb0>)
 8001832:	2100      	movs	r1, #0
 8001834:	4816      	ldr	r0, [pc, #88]	; (8001890 <MX_FREERTOS_Init+0xb4>)
 8001836:	f007 fbb8 	bl	8008faa <osThreadNew>
 800183a:	4603      	mov	r3, r0
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <MX_FREERTOS_Init+0xb8>)
 800183e:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8001840:	4a15      	ldr	r2, [pc, #84]	; (8001898 <MX_FREERTOS_Init+0xbc>)
 8001842:	2100      	movs	r1, #0
 8001844:	4815      	ldr	r0, [pc, #84]	; (800189c <MX_FREERTOS_Init+0xc0>)
 8001846:	f007 fbb0 	bl	8008faa <osThreadNew>
 800184a:	4603      	mov	r3, r0
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <MX_FREERTOS_Init+0xc4>)
 800184e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	08010b3c 	.word	0x08010b3c
 8001858:	200007f8 	.word	0x200007f8
 800185c:	08010a64 	.word	0x08010a64
 8001860:	080018a5 	.word	0x080018a5
 8001864:	200007e0 	.word	0x200007e0
 8001868:	08010a88 	.word	0x08010a88
 800186c:	080018d1 	.word	0x080018d1
 8001870:	200007e4 	.word	0x200007e4
 8001874:	08010aac 	.word	0x08010aac
 8001878:	08001e49 	.word	0x08001e49
 800187c:	200007e8 	.word	0x200007e8
 8001880:	08010ad0 	.word	0x08010ad0
 8001884:	08002255 	.word	0x08002255
 8001888:	200007ec 	.word	0x200007ec
 800188c:	08010af4 	.word	0x08010af4
 8001890:	08002675 	.word	0x08002675
 8001894:	200007f0 	.word	0x200007f0
 8001898:	08010b18 	.word	0x08010b18
 800189c:	0800269d 	.word	0x0800269d
 80018a0:	200007f4 	.word	0x200007f4

080018a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 80018ac:	f007 fb68 	bl	8008f80 <osKernelGetTickCount>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80018b8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f007 fcf2 	bl	80092a4 <osDelayUntil>

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 80018c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c4:	4801      	ldr	r0, [pc, #4]	; (80018cc <StartDefaultTask+0x28>)
 80018c6:	f003 fe1c 	bl	8005502 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 80018ca:	e7f2      	b.n	80018b2 <StartDefaultTask+0xe>
 80018cc:	40020800 	.word	0x40020800

080018d0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80018d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018d4:	b098      	sub	sp, #96	; 0x60
 80018d6:	af04      	add	r7, sp, #16
 80018d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//StartTask02 is related CAN communication. //
	uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 80018da:	4aae      	ldr	r2, [pc, #696]	; (8001b94 <StartTask02+0x2c4>)
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t CanId = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t Stop_flag = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	int16_t Tar_cmd_v_x = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t Tar_cmd_v_y = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	853b      	strh	r3, [r7, #40]	; 0x28
	int16_t Tar_cmd_w = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	84fb      	strh	r3, [r7, #38]	; 0x26

	int16_t Tar_cmd_FL = 0;//Front Left
 80018fe:	2300      	movs	r3, #0
 8001900:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t Tar_cmd_FR = 0;//Front Right
 8001904:	2300      	movs	r3, #0
 8001906:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t Tar_cmd_RL= 0;//Rear Left
 800190a:	2300      	movs	r3, #0
 800190c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t Tar_cmd_RR = 0;//Rear Right
 8001910:	2300      	movs	r3, #0
 8001912:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	int16_t Tmp_cmd_FL = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Tmp_cmd_FR = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t Tmp_cmd_RL= 0;
 800191e:	2300      	movs	r3, #0
 8001920:	843b      	strh	r3, [r7, #32]
	int16_t Tmp_cmd_RR = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	83fb      	strh	r3, [r7, #30]

	int16_t Real_cmd_v_x = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	83bb      	strh	r3, [r7, #28]
	int16_t Real_cmd_v_y = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	837b      	strh	r3, [r7, #26]
	int16_t Real_cmd_w = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	833b      	strh	r3, [r7, #24]

	uint8_t torqueSW = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]

	//////////////////////////////
	uint32_t lastTime;

	CanInit(0,0);
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fbf7 	bl	800112c <CanInit>

	osDelay(3000);//must delay for nmt from motor driver
 800193e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001942:	f007 fc94 	bl	800926e <osDelay>
	PDOMapping(1, RxPDO0, vel_RxPDO0, 1);
 8001946:	4b94      	ldr	r3, [pc, #592]	; (8001b98 <StartTask02+0x2c8>)
 8001948:	2201      	movs	r2, #1
 800194a:	9203      	str	r2, [sp, #12]
 800194c:	466c      	mov	r4, sp
 800194e:	f103 0208 	add.w	r2, r3, #8
 8001952:	ca07      	ldmia	r2, {r0, r1, r2}
 8001954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001958:	cb0c      	ldmia	r3, {r2, r3}
 800195a:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff fcda 	bl	8001318 <PDOMapping>
	PDOMapping(2, RxPDO0, vel_RxPDO0, 1);
 8001964:	4b8c      	ldr	r3, [pc, #560]	; (8001b98 <StartTask02+0x2c8>)
 8001966:	2201      	movs	r2, #1
 8001968:	9203      	str	r2, [sp, #12]
 800196a:	466c      	mov	r4, sp
 800196c:	f103 0208 	add.w	r2, r3, #8
 8001970:	ca07      	ldmia	r2, {r0, r1, r2}
 8001972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001976:	cb0c      	ldmia	r3, {r2, r3}
 8001978:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff fccb 	bl	8001318 <PDOMapping>

	PDOMapping(1, TxPDO0, vel_TxPDO0, 1);//event time mode 100ms
 8001982:	4b86      	ldr	r3, [pc, #536]	; (8001b9c <StartTask02+0x2cc>)
 8001984:	2201      	movs	r2, #1
 8001986:	9203      	str	r2, [sp, #12]
 8001988:	466c      	mov	r4, sp
 800198a:	f103 0208 	add.w	r2, r3, #8
 800198e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001994:	cb0c      	ldmia	r3, {r2, r3}
 8001996:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fcbc 	bl	8001318 <PDOMapping>
	PDOMapping(2, TxPDO0, vel_TxPDO0, 1);//event time mode
 80019a0:	4b7e      	ldr	r3, [pc, #504]	; (8001b9c <StartTask02+0x2cc>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	9203      	str	r2, [sp, #12]
 80019a6:	466c      	mov	r4, sp
 80019a8:	f103 0208 	add.w	r2, r3, #8
 80019ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019b2:	cb0c      	ldmia	r3, {r2, r3}
 80019b4:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff fcad 	bl	8001318 <PDOMapping>
	PDOMapping(1, TxPDO1, vel_TxPDO1, 1);//inhibit mode 100ms
 80019be:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <StartTask02+0x2d0>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	9203      	str	r2, [sp, #12]
 80019c4:	466c      	mov	r4, sp
 80019c6:	f103 0208 	add.w	r2, r3, #8
 80019ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80019cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019d0:	cb0c      	ldmia	r3, {r2, r3}
 80019d2:	f641 2101 	movw	r1, #6657	; 0x1a01
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fc9e 	bl	8001318 <PDOMapping>
	PDOMapping(2, TxPDO1, vel_TxPDO1, 1);//inhibit mode
 80019dc:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <StartTask02+0x2d0>)
 80019de:	2201      	movs	r2, #1
 80019e0:	9203      	str	r2, [sp, #12]
 80019e2:	466c      	mov	r4, sp
 80019e4:	f103 0208 	add.w	r2, r3, #8
 80019e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019ee:	cb0c      	ldmia	r3, {r2, r3}
 80019f0:	f641 2101 	movw	r1, #6657	; 0x1a01
 80019f4:	2002      	movs	r0, #2
 80019f6:	f7ff fc8f 	bl	8001318 <PDOMapping>


	for(int i=0;i<2;i++){
 80019fa:	2300      	movs	r3, #0
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80019fe:	e029      	b.n	8001a54 <StartTask02+0x184>
		SDOMsg(i+1,0x2010, 0x0, 0x01, 1);//Node_id, index,  subindex,  msg,  len//save eeprom
 8001a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	b2d8      	uxtb	r0, r3
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f242 0110 	movw	r1, #8208	; 0x2010
 8001a14:	f7ff fc16 	bl	8001244 <SDOMsg>
		SDOMsg(i+1,0x6060, 0x0, 0x03, 1);//Node_id, index,  subindex,  msg,  len//3: Profile velocity mode;
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2d8      	uxtb	r0, r3
 8001a20:	2301      	movs	r3, #1
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2303      	movs	r3, #3
 8001a26:	2200      	movs	r2, #0
 8001a28:	f246 0160 	movw	r1, #24672	; 0x6060
 8001a2c:	f7ff fc0a 	bl	8001244 <SDOMsg>
		Tor_OnOff(TORQUEON);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fd80 	bl	8001536 <Tor_OnOff>
		SDOMsg(i+1,0x200f, 0x0, 0x01, 2);//Node_id, index,  subindex,  msg,  len//1e: Synchronization control
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2d8      	uxtb	r0, r3
 8001a3e:	2302      	movs	r3, #2
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	2200      	movs	r2, #0
 8001a46:	f242 010f 	movw	r1, #8207	; 0x200f
 8001a4a:	f7ff fbfb 	bl	8001244 <SDOMsg>
	for(int i=0;i<2;i++){
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a50:	3301      	adds	r3, #1
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	ddd2      	ble.n	8001a00 <StartTask02+0x130>
	}

	//PDOMapping(Node_id, 0x1A01, vel_TxPDO2, 2);
	Vel_PDOMsg(1, TxPDO0, 0x2, 0x1);
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff fd3d 	bl	80014e2 <Vel_PDOMsg>
	Vel_PDOMsg(2, TxPDO0, 0x10, 0x20);
 8001a68:	2320      	movs	r3, #32
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7ff fd36 	bl	80014e2 <Vel_PDOMsg>
	//osDelay(3000);
	Vel_PDOMsg(1, TxPDO0, 0x0, 0x0);
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff fd2f 	bl	80014e2 <Vel_PDOMsg>
	Vel_PDOMsg(2, TxPDO0, 0x0, 0x0);
 8001a84:	2300      	movs	r3, #0
 8001a86:	2200      	movs	r2, #0
 8001a88:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f7ff fd28 	bl	80014e2 <Vel_PDOMsg>
  /* Infinite loop */

	lastTime = osKernelGetTickCount();
 8001a92:	f007 fa75 	bl	8008f80 <osKernelGetTickCount>
 8001a96:	63f8      	str	r0, [r7, #60]	; 0x3c
  for(;;)
  {

	lastTime += PERIOD_CANCOMM;;
 8001a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a9a:	3364      	adds	r3, #100	; 0x64
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(lastTime);
 8001a9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001aa0:	f007 fc00 	bl	80092a4 <osDelayUntil>


	//SDOMsg(1,0x1011, 0x3, 0xf1, 1);

	if(FLAG_RxCplt>0)	//real time, check stdid, extid
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <StartTask02+0x2d4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 808d 	beq.w	8001bc8 <StartTask02+0x2f8>
	{
		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab2:	e00c      	b.n	8001ace <StartTask02+0x1fe>
 8001ab4:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <StartTask02+0x2d8>)
 8001ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab8:	4413      	add	r3, r2
 8001aba:	7819      	ldrb	r1, [r3, #0]
 8001abc:	f107 020c 	add.w	r2, r7, #12
 8001ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac2:	4413      	add	r3, r2
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	3301      	adds	r3, #1
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad0:	2b07      	cmp	r3, #7
 8001ad2:	ddef      	ble.n	8001ab4 <StartTask02+0x1e4>
		FLAG_RxCplt--;
 8001ad4:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <StartTask02+0x2d4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	4a32      	ldr	r2, [pc, #200]	; (8001ba4 <StartTask02+0x2d4>)
 8001adc:	6013      	str	r3, [r2, #0]
		if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 8001ade:	4b33      	ldr	r3, [pc, #204]	; (8001bac <StartTask02+0x2dc>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <StartTask02+0x2dc>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d903      	bls.n	8001af2 <StartTask02+0x222>
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <StartTask02+0x2dc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af0:	e002      	b.n	8001af8 <StartTask02+0x228>
		else {CanId = g_tCan_Rx_Header.ExtId;}
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <StartTask02+0x2dc>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	64fb      	str	r3, [r7, #76]	; 0x4c

		//sendCan(1, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)

		switch(CanId)//parse
 8001af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001afa:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d03b      	beq.n	8001b7a <StartTask02+0x2aa>
 8001b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b04:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d837      	bhi.n	8001b7c <StartTask02+0x2ac>
 8001b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b0e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00e      	beq.n	8001b34 <StartTask02+0x264>
 8001b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b18:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d82d      	bhi.n	8001b7c <StartTask02+0x2ac>
 8001b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b22:	f240 1281 	movw	r2, #385	; 0x181
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00a      	beq.n	8001b40 <StartTask02+0x270>
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001b30:	d014      	beq.n	8001b5c <StartTask02+0x28c>
 8001b32:	e023      	b.n	8001b7c <StartTask02+0x2ac>
			case 0x3E9:
//				Tar_cmd_v_x = (int16_t)canbuf[1]<<8 | (int16_t)canbuf[0];
//				Tar_cmd_v_y = (int16_t)canbuf[3]<<8 | (int16_t)canbuf[2];
//				Tar_cmd_w = (int16_t)canbuf[5]<<8 | (int16_t)canbuf[4];
//				torqueSW = canbuf[6];
				Stop_flag++;
 8001b34:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				break;
 8001b3e:	e01d      	b.n	8001b7c <StartTask02+0x2ac>

			case 0x181:
				Tmp_cmd_FL =(int16_t)canbuf[1]<<8 | (int16_t)canbuf[0];
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	7b3b      	ldrb	r3, [r7, #12]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
				Tmp_cmd_FR =(int16_t)canbuf[3]<<8 | (int16_t)canbuf[2];
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	847b      	strh	r3, [r7, #34]	; 0x22

			case 0x182:
				Tmp_cmd_RL= (int16_t)canbuf[1]<<8 | (int16_t)canbuf[0];
 8001b5c:	7b7b      	ldrb	r3, [r7, #13]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	7b3b      	ldrb	r3, [r7, #12]
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	843b      	strh	r3, [r7, #32]
				Tmp_cmd_RR =(int16_t)canbuf[3]<<8 | (int16_t)canbuf[2];
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	83fb      	strh	r3, [r7, #30]
				break;
 8001b78:	e000      	b.n	8001b7c <StartTask02+0x2ac>

			case 2002:

				break;
 8001b7a:	bf00      	nop
		}

		g_tCan_Rx_Header.StdId=0;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <StartTask02+0x2dc>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
		g_tCan_Rx_Header.ExtId=0;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <StartTask02+0x2dc>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
		CanId = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c

		for(int i=0;i<8;i++){canbuf[i]=0;}
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b90:	e017      	b.n	8001bc2 <StartTask02+0x2f2>
 8001b92:	bf00      	nop
 8001b94:	080107e8 	.word	0x080107e8
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000014 	.word	0x20000014
 8001ba0:	20000028 	.word	0x20000028
 8001ba4:	20000760 	.word	0x20000760
 8001ba8:	20000764 	.word	0x20000764
 8001bac:	2000076c 	.word	0x2000076c
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	2b07      	cmp	r3, #7
 8001bc6:	ddf3      	ble.n	8001bb0 <StartTask02+0x2e0>

	}

	canbuf[7] = 8;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	74fb      	strb	r3, [r7, #19]
	canbuf[6] = 7;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	74bb      	strb	r3, [r7, #18]
	canbuf[5] = 6;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	747b      	strb	r3, [r7, #17]
	canbuf[4] = 5;
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	743b      	strb	r3, [r7, #16]
	canbuf[3] = 4;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	73fb      	strb	r3, [r7, #15]
	canbuf[2] = 3;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	73bb      	strb	r3, [r7, #14]
	canbuf[1] = 2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	737b      	strb	r3, [r7, #13]
	canbuf[0] = 1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	733b      	strb	r3, [r7, #12]
	osDelay(10);
 8001be8:	200a      	movs	r0, #10
 8001bea:	f007 fb40 	bl	800926e <osDelay>

	//sendCan(2, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)
	for(int i=0;i<8;i++){canbuf[i]=0;}
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf2:	e008      	b.n	8001c06 <StartTask02+0x336>
 8001bf4:	f107 020c 	add.w	r2, r7, #12
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	3301      	adds	r3, #1
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	ddf3      	ble.n	8001bf4 <StartTask02+0x324>
//for test
//	Tar_cmd_v_x=10;
//	Tar_cmd_v_y=0;
	Tar_cmd_w = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
///////////

	osDelay(10);
 8001c10:	200a      	movs	r0, #10
 8001c12:	f007 fb2c 	bl	800926e <osDelay>

	Tar_cmd_v_x=0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	857b      	strh	r3, [r7, #42]	; 0x2a
	Tar_cmd_v_y=0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	853b      	strh	r3, [r7, #40]	; 0x28
	Tar_cmd_w = 100;
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(Tar_cmd_w){
 8001c22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d037      	beq.n	8001c9a <StartTask02+0x3ca>
		Tar_cmd_v_x=0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	857b      	strh	r3, [r7, #42]	; 0x2a
		Tar_cmd_v_y=0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	853b      	strh	r3, [r7, #40]	; 0x28
		Tar_cmd_FL = Tar_cmd_w/CONSTANT_C_AxC_V;
 8001c32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc74 	bl	8000524 <__aeabi_i2d>
 8001c3c:	a380      	add	r3, pc, #512	; (adr r3, 8001e40 <StartTask02+0x570>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fe03 	bl	800084c <__aeabi_ddiv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7fe ff83 	bl	8000b58 <__aeabi_d2iz>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL;
 8001c58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001c60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001c64:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001c68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001c6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		osDelay(10);
 8001c70:	200a      	movs	r0, #10
 8001c72:	f007 fafc 	bl	800926e <osDelay>
		printf("Tar_cmd_FL: %d\n", Tar_cmd_FL);
 8001c76:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	486c      	ldr	r0, [pc, #432]	; (8001e30 <StartTask02+0x560>)
 8001c7e:	f00b fa05 	bl	800d08c <iprintf>
		SteDeg=rad2deg(ANGLE_VEL);
 8001c82:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001e20 <StartTask02+0x550>
 8001c86:	f7ff fd2f 	bl	80016e8 <rad2deg>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b69      	ldr	r3, [pc, #420]	; (8001e34 <StartTask02+0x564>)
 8001c90:	801a      	strh	r2, [r3, #0]
		ModeABCD = 2;
 8001c92:	4b69      	ldr	r3, [pc, #420]	; (8001e38 <StartTask02+0x568>)
 8001c94:	2202      	movs	r2, #2
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e0a6      	b.n	8001de8 <StartTask02+0x518>
	}

	else{

		Tar_cmd_FL = CONSTANT_VEL  *  (Tar_cmd_v_x*cos(ANGLE_RAD) + Tar_cmd_v_y*sin(ANGLE_RAD));
 8001c9a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc40 	bl	8000524 <__aeabi_i2d>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	460d      	mov	r5, r1
 8001ca8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc39 	bl	8000524 <__aeabi_i2d>
 8001cb2:	4680      	mov	r8, r0
 8001cb4:	4689      	mov	r9, r1
 8001cb6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc32 	bl	8000524 <__aeabi_i2d>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	ec43 2b11 	vmov	d1, r2, r3
 8001cc8:	ec49 8b10 	vmov	d0, r8, r9
 8001ccc:	f00d fa94 	bl	800f1f8 <atan2>
 8001cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd4:	eef0 7a60 	vmov.f32	s15, s1
 8001cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cdc:	eef0 0a67 	vmov.f32	s1, s15
 8001ce0:	f00d f9de 	bl	800f0a0 <cos>
 8001ce4:	ec53 2b10 	vmov	r2, r3, d0
 8001ce8:	4620      	mov	r0, r4
 8001cea:	4629      	mov	r1, r5
 8001cec:	f7fe fc84 	bl	80005f8 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4690      	mov	r8, r2
 8001cf6:	4699      	mov	r9, r3
 8001cf8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc11 	bl	8000524 <__aeabi_i2d>
 8001d02:	4604      	mov	r4, r0
 8001d04:	460d      	mov	r5, r1
 8001d06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc0a 	bl	8000524 <__aeabi_i2d>
 8001d10:	4682      	mov	sl, r0
 8001d12:	468b      	mov	fp, r1
 8001d14:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc03 	bl	8000524 <__aeabi_i2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	ec43 2b11 	vmov	d1, r2, r3
 8001d26:	ec4b ab10 	vmov	d0, sl, fp
 8001d2a:	f00d fa65 	bl	800f1f8 <atan2>
 8001d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d32:	eef0 7a60 	vmov.f32	s15, s1
 8001d36:	eeb0 0a47 	vmov.f32	s0, s14
 8001d3a:	eef0 0a67 	vmov.f32	s1, s15
 8001d3e:	f00d fa03 	bl	800f148 <sin>
 8001d42:	ec53 2b10 	vmov	r2, r3, d0
 8001d46:	4620      	mov	r0, r4
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f7fe fc55 	bl	80005f8 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	f7fe fa99 	bl	800028c <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	a331      	add	r3, pc, #196	; (adr r3, 8001e28 <StartTask02+0x558>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fc46 	bl	80005f8 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fef0 	bl	8000b58 <__aeabi_d2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		Tar_cmd_FR = -Tar_cmd_FL;
 8001d7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d82:	425b      	negs	r3, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		Tar_cmd_RL = Tar_cmd_FL;
 8001d8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		Tar_cmd_RR = -Tar_cmd_FL;
 8001d92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d96:	425b      	negs	r3, r3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		SteDeg=rad2deg(ANGLE_RAD);
 8001d9e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbbe 	bl	8000524 <__aeabi_i2d>
 8001da8:	4604      	mov	r4, r0
 8001daa:	460d      	mov	r5, r1
 8001dac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbb7 	bl	8000524 <__aeabi_i2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	ec43 2b11 	vmov	d1, r2, r3
 8001dbe:	ec45 4b10 	vmov	d0, r4, r5
 8001dc2:	f00d fa19 	bl	800f1f8 <atan2>
 8001dc6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dca:	eef0 7a60 	vmov.f32	s15, s1
 8001dce:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd2:	eef0 0a67 	vmov.f32	s1, s15
 8001dd6:	f7ff fc87 	bl	80016e8 <rad2deg>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <StartTask02+0x564>)
 8001de0:	801a      	strh	r2, [r3, #0]
		ModeABCD = 1;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <StartTask02+0x568>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
//		Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL = 0;
//		ModeABCD = 4;
//	}
	//printf("ANGLE_RAD: %f\n", ANGLE_RAD);

	osDelay(20);
 8001de8:	2014      	movs	r0, #20
 8001dea:	f007 fa40 	bl	800926e <osDelay>
	if(STinitdone){
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <StartTask02+0x56c>)
 8001df0:	f993 3000 	ldrsb.w	r3, [r3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f43f ae4f 	beq.w	8001a98 <StartTask02+0x1c8>
		Vel_PDOMsg(1, TxPDO0, Tar_cmd_FL, Tar_cmd_FR);
 8001dfa:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001dfe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001e02:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff fb6b 	bl	80014e2 <Vel_PDOMsg>
		Vel_PDOMsg(2, TxPDO0, Tar_cmd_RL, Tar_cmd_RR);
 8001e0c:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001e10:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001e14:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f7ff fb62 	bl	80014e2 <Vel_PDOMsg>
	lastTime += PERIOD_CANCOMM;;
 8001e1e:	e63b      	b.n	8001a98 <StartTask02+0x1c8>
 8001e20:	ccefcd31 	.word	0xccefcd31
 8001e24:	3fe7a426 	.word	0x3fe7a426
 8001e28:	cc196908 	.word	0xcc196908
 8001e2c:	3fbc42f1 	.word	0x3fbc42f1
 8001e30:	080107d8 	.word	0x080107d8
 8001e34:	200007da 	.word	0x200007da
 8001e38:	200007dc 	.word	0x200007dc
 8001e3c:	200007dd 	.word	0x200007dd
 8001e40:	8ccd1fe0 	.word	0x8ccd1fe0
 8001e44:	40412c3c 	.word	0x40412c3c

08001e48 <StartTask03>:
* @retval None
*/

/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime;
	uint8_t Dir_Rot=0; //direction of rotation
 8001e50:	2300      	movs	r3, #0
 8001e52:	74fb      	strb	r3, [r7, #19]
//	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
//					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
//					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
//					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	osDelay(1000);
 8001e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e58:	f007 fa09 	bl	800926e <osDelay>

	GPIO_enableirq();
 8001e5c:	f000 fd50 	bl	8002900 <GPIO_enableirq>
	osDelay(100);
 8001e60:	2064      	movs	r0, #100	; 0x64
 8001e62:	f007 fa04 	bl	800926e <osDelay>

	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG1_Pin)){
 8001e66:	2110      	movs	r1, #16
 8001e68:	485d      	ldr	r0, [pc, #372]	; (8001fe0 <StartTask03+0x198>)
 8001e6a:	f003 fb19 	bl	80054a0 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00b      	beq.n	8001e8c <StartTask03+0x44>
		DataSetSteering(buf, 0, SERVO_CCW, RPM_2, SERVO_INIT);
 8001e74:	2301      	movs	r3, #1
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2314      	movs	r3, #20
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4859      	ldr	r0, [pc, #356]	; (8001fe4 <StartTask03+0x19c>)
 8001e80:	f000 fee0 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG1_Pin CCW init.\n");
 8001e84:	4858      	ldr	r0, [pc, #352]	; (8001fe8 <StartTask03+0x1a0>)
 8001e86:	f00b f987 	bl	800d198 <puts>
 8001e8a:	e00a      	b.n	8001ea2 <StartTask03+0x5a>
	}
	else {
		DataSetSteering(buf, 0, SERVO_CW, RPM_2, SERVO_INIT);
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2314      	movs	r3, #20
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	4853      	ldr	r0, [pc, #332]	; (8001fe4 <StartTask03+0x19c>)
 8001e98:	f000 fed4 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG1_Pin CW init.\n");
 8001e9c:	4853      	ldr	r0, [pc, #332]	; (8001fec <StartTask03+0x1a4>)
 8001e9e:	f00b f97b 	bl	800d198 <puts>
	}

	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG2_Pin)){
 8001ea2:	2120      	movs	r1, #32
 8001ea4:	484e      	ldr	r0, [pc, #312]	; (8001fe0 <StartTask03+0x198>)
 8001ea6:	f003 fafb 	bl	80054a0 <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <StartTask03+0x80>
		DataSetSteering(buf, 1, SERVO_CW, RPM_2, SERVO_INIT);
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2314      	movs	r3, #20
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2101      	movs	r1, #1
 8001eba:	484a      	ldr	r0, [pc, #296]	; (8001fe4 <StartTask03+0x19c>)
 8001ebc:	f000 fec2 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG2_Pin CW init.\n");
 8001ec0:	484b      	ldr	r0, [pc, #300]	; (8001ff0 <StartTask03+0x1a8>)
 8001ec2:	f00b f969 	bl	800d198 <puts>
 8001ec6:	e00a      	b.n	8001ede <StartTask03+0x96>
	}
	else {
		DataSetSteering(buf, 1, SERVO_CCW, RPM_2, SERVO_INIT);
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2314      	movs	r3, #20
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4844      	ldr	r0, [pc, #272]	; (8001fe4 <StartTask03+0x19c>)
 8001ed4:	f000 feb6 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG2_Pin CCW init.\n");
 8001ed8:	4846      	ldr	r0, [pc, #280]	; (8001ff4 <StartTask03+0x1ac>)
 8001eda:	f00b f95d 	bl	800d198 <puts>
	}
	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG3_Pin)){
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	483f      	ldr	r0, [pc, #252]	; (8001fe0 <StartTask03+0x198>)
 8001ee2:	f003 fadd 	bl	80054a0 <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <StartTask03+0xbc>
		DataSetSteering(buf, 2, SERVO_CW, RPM_2, SERVO_INIT);
 8001eec:	2301      	movs	r3, #1
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2314      	movs	r3, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	483b      	ldr	r0, [pc, #236]	; (8001fe4 <StartTask03+0x19c>)
 8001ef8:	f000 fea4 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG3_Pin CW init.\n");
 8001efc:	483e      	ldr	r0, [pc, #248]	; (8001ff8 <StartTask03+0x1b0>)
 8001efe:	f00b f94b 	bl	800d198 <puts>
 8001f02:	e00a      	b.n	8001f1a <StartTask03+0xd2>
	}
	else {
		DataSetSteering(buf, 2, SERVO_CCW, RPM_2, SERVO_INIT);
 8001f04:	2301      	movs	r3, #1
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2314      	movs	r3, #20
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	4835      	ldr	r0, [pc, #212]	; (8001fe4 <StartTask03+0x19c>)
 8001f10:	f000 fe98 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG3_Pin CCW init.\n");
 8001f14:	4839      	ldr	r0, [pc, #228]	; (8001ffc <StartTask03+0x1b4>)
 8001f16:	f00b f93f 	bl	800d198 <puts>
	}
	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG4_Pin)){
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	4830      	ldr	r0, [pc, #192]	; (8001fe0 <StartTask03+0x198>)
 8001f1e:	f003 fabf 	bl	80054a0 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <StartTask03+0xf8>
		DataSetSteering(buf, 3, SERVO_CCW, RPM_2, SERVO_INIT);
 8001f28:	2301      	movs	r3, #1
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2314      	movs	r3, #20
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2103      	movs	r1, #3
 8001f32:	482c      	ldr	r0, [pc, #176]	; (8001fe4 <StartTask03+0x19c>)
 8001f34:	f000 fe86 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG4_Pin CCW init.\n");
 8001f38:	4831      	ldr	r0, [pc, #196]	; (8002000 <StartTask03+0x1b8>)
 8001f3a:	f00b f92d 	bl	800d198 <puts>
 8001f3e:	e00a      	b.n	8001f56 <StartTask03+0x10e>
	}
	else {
		DataSetSteering(buf, 3, SERVO_CW, RPM_2, SERVO_INIT);
 8001f40:	2301      	movs	r3, #1
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2314      	movs	r3, #20
 8001f46:	2200      	movs	r2, #0
 8001f48:	2103      	movs	r1, #3
 8001f4a:	4826      	ldr	r0, [pc, #152]	; (8001fe4 <StartTask03+0x19c>)
 8001f4c:	f000 fe7a 	bl	8002c44 <DataSetSteering>
		printf("PS_SIG4_Pin CW init.\n");
 8001f50:	482c      	ldr	r0, [pc, #176]	; (8002004 <StartTask03+0x1bc>)
 8001f52:	f00b f921 	bl	800d198 <puts>
	}
	osDelay(1000);
 8001f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f5a:	f007 f988 	bl	800926e <osDelay>


	for(int i=0;i<20;i++){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	e009      	b.n	8001f78 <StartTask03+0x130>
		osDelay(500);
 8001f64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f68:	f007 f981 	bl	800926e <osDelay>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 8001f6c:	481d      	ldr	r0, [pc, #116]	; (8001fe4 <StartTask03+0x19c>)
 8001f6e:	f000 fe41 	bl	8002bf4 <ServoMotor_writeDMA>
	for(int i=0;i<20;i++){
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b13      	cmp	r3, #19
 8001f7c:	ddf2      	ble.n	8001f64 <StartTask03+0x11c>
	}
	osDelay(500);
 8001f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f82:	f007 f974 	bl	800926e <osDelay>
	GPIO_disableirq();
 8001f86:	f000 fcb1 	bl	80028ec <GPIO_disableirq>

	STinitdone = 1;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <StartTask03+0x1c0>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
	lastTime = osKernelGetTickCount();
 8001f90:	f006 fff6 	bl	8008f80 <osKernelGetTickCount>
 8001f94:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f9c:	617b      	str	r3, [r7, #20]
	osDelayUntil(lastTime);
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f007 f980 	bl	80092a4 <osDelayUntil>

	printf("SteDeg: %d\n", SteDeg);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <StartTask03+0x1c4>)
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	4619      	mov	r1, r3
 8001fac:	4818      	ldr	r0, [pc, #96]	; (8002010 <StartTask03+0x1c8>)
 8001fae:	f00b f86d 	bl	800d08c <iprintf>
	if(ModeABCD == 1){
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <StartTask03+0x1cc>)
 8001fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	f040 808b 	bne.w	80020d4 <StartTask03+0x28c>
		if(SteDeg<0){
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <StartTask03+0x1c4>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da27      	bge.n	8002018 <StartTask03+0x1d0>
				SteDeg*=-1;
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <StartTask03+0x1c4>)
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <StartTask03+0x1c4>)
 8001fd8:	801a      	strh	r2, [r3, #0]
				Dir_Rot=SERVO_CW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	74fb      	strb	r3, [r7, #19]
 8001fde:	e01d      	b.n	800201c <StartTask03+0x1d4>
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	2000003c 	.word	0x2000003c
 8001fe8:	080107f0 	.word	0x080107f0
 8001fec:	08010808 	.word	0x08010808
 8001ff0:	08010820 	.word	0x08010820
 8001ff4:	08010838 	.word	0x08010838
 8001ff8:	08010850 	.word	0x08010850
 8001ffc:	08010868 	.word	0x08010868
 8002000:	08010880 	.word	0x08010880
 8002004:	08010898 	.word	0x08010898
 8002008:	200007dd 	.word	0x200007dd
 800200c:	200007da 	.word	0x200007da
 8002010:	080108b0 	.word	0x080108b0
 8002014:	200007dc 	.word	0x200007dc
			}
			else Dir_Rot=SERVO_CCW;
 8002018:	2301      	movs	r3, #1
 800201a:	74fb      	strb	r3, [r7, #19]
			if(SteDeg>90){SteDeg=90;}
 800201c:	4b8a      	ldr	r3, [pc, #552]	; (8002248 <StartTask03+0x400>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	2b5a      	cmp	r3, #90	; 0x5a
 8002024:	dd02      	ble.n	800202c <StartTask03+0x1e4>
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <StartTask03+0x400>)
 8002028:	225a      	movs	r2, #90	; 0x5a
 800202a:	801a      	strh	r2, [r3, #0]
			DataSetSteering(buf, 0, Dir_Rot, SteDeg*100, SERVO_POS);
 800202c:	4b86      	ldr	r3, [pc, #536]	; (8002248 <StartTask03+0x400>)
 800202e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4413      	add	r3, r2
 800203a:	461a      	mov	r2, r3
 800203c:	0091      	lsls	r1, r2, #2
 800203e:	461a      	mov	r2, r3
 8002040:	460b      	mov	r3, r1
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	b29b      	uxth	r3, r3
 8002048:	7cfa      	ldrb	r2, [r7, #19]
 800204a:	2100      	movs	r1, #0
 800204c:	9100      	str	r1, [sp, #0]
 800204e:	2100      	movs	r1, #0
 8002050:	487e      	ldr	r0, [pc, #504]	; (800224c <StartTask03+0x404>)
 8002052:	f000 fdf7 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 1, Dir_Rot, SteDeg*100, SERVO_POS);
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <StartTask03+0x400>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4413      	add	r3, r2
 8002064:	461a      	mov	r2, r3
 8002066:	0091      	lsls	r1, r2, #2
 8002068:	461a      	mov	r2, r3
 800206a:	460b      	mov	r3, r1
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	b29b      	uxth	r3, r3
 8002072:	7cfa      	ldrb	r2, [r7, #19]
 8002074:	2100      	movs	r1, #0
 8002076:	9100      	str	r1, [sp, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	4874      	ldr	r0, [pc, #464]	; (800224c <StartTask03+0x404>)
 800207c:	f000 fde2 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 2, Dir_Rot, SteDeg*100, SERVO_POS);
 8002080:	4b71      	ldr	r3, [pc, #452]	; (8002248 <StartTask03+0x400>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4413      	add	r3, r2
 800208e:	461a      	mov	r2, r3
 8002090:	0091      	lsls	r1, r2, #2
 8002092:	461a      	mov	r2, r3
 8002094:	460b      	mov	r3, r1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	b29b      	uxth	r3, r3
 800209c:	7cfa      	ldrb	r2, [r7, #19]
 800209e:	2100      	movs	r1, #0
 80020a0:	9100      	str	r1, [sp, #0]
 80020a2:	2102      	movs	r1, #2
 80020a4:	4869      	ldr	r0, [pc, #420]	; (800224c <StartTask03+0x404>)
 80020a6:	f000 fdcd 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 3, Dir_Rot, SteDeg*100, SERVO_POS);
 80020aa:	4b67      	ldr	r3, [pc, #412]	; (8002248 <StartTask03+0x400>)
 80020ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	0091      	lsls	r1, r2, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	460b      	mov	r3, r1
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	7cfa      	ldrb	r2, [r7, #19]
 80020c8:	2100      	movs	r1, #0
 80020ca:	9100      	str	r1, [sp, #0]
 80020cc:	2103      	movs	r1, #3
 80020ce:	485f      	ldr	r0, [pc, #380]	; (800224c <StartTask03+0x404>)
 80020d0:	f000 fdb8 	bl	8002c44 <DataSetSteering>
	}

	if(ModeABCD == 2){
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <StartTask03+0x408>)
 80020d6:	f993 3000 	ldrsb.w	r3, [r3]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d153      	bne.n	8002186 <StartTask03+0x33e>
			DataSetSteering(buf, 0, SERVO_CCW, SteDeg*100, SERVO_POS);
 80020de:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <StartTask03+0x400>)
 80020e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	0091      	lsls	r1, r2, #2
 80020f0:	461a      	mov	r2, r3
 80020f2:	460b      	mov	r3, r1
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2200      	movs	r2, #0
 80020fc:	9200      	str	r2, [sp, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	2100      	movs	r1, #0
 8002102:	4852      	ldr	r0, [pc, #328]	; (800224c <StartTask03+0x404>)
 8002104:	f000 fd9e 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 1, SERVO_CW, SteDeg*100, SERVO_POS);
 8002108:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <StartTask03+0x400>)
 800210a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4413      	add	r3, r2
 8002116:	461a      	mov	r2, r3
 8002118:	0091      	lsls	r1, r2, #2
 800211a:	461a      	mov	r2, r3
 800211c:	460b      	mov	r3, r1
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2200      	movs	r2, #0
 8002126:	9200      	str	r2, [sp, #0]
 8002128:	2200      	movs	r2, #0
 800212a:	2101      	movs	r1, #1
 800212c:	4847      	ldr	r0, [pc, #284]	; (800224c <StartTask03+0x404>)
 800212e:	f000 fd89 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 2, SERVO_CW, SteDeg*100, SERVO_POS);
 8002132:	4b45      	ldr	r3, [pc, #276]	; (8002248 <StartTask03+0x400>)
 8002134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002138:	b29b      	uxth	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4413      	add	r3, r2
 8002140:	461a      	mov	r2, r3
 8002142:	0091      	lsls	r1, r2, #2
 8002144:	461a      	mov	r2, r3
 8002146:	460b      	mov	r3, r1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	b29b      	uxth	r3, r3
 800214e:	2200      	movs	r2, #0
 8002150:	9200      	str	r2, [sp, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	2102      	movs	r1, #2
 8002156:	483d      	ldr	r0, [pc, #244]	; (800224c <StartTask03+0x404>)
 8002158:	f000 fd74 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 3, SERVO_CCW, SteDeg*100, SERVO_POS);
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <StartTask03+0x400>)
 800215e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	4413      	add	r3, r2
 800216a:	461a      	mov	r2, r3
 800216c:	0091      	lsls	r1, r2, #2
 800216e:	461a      	mov	r2, r3
 8002170:	460b      	mov	r3, r1
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2200      	movs	r2, #0
 800217a:	9200      	str	r2, [sp, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	2103      	movs	r1, #3
 8002180:	4832      	ldr	r0, [pc, #200]	; (800224c <StartTask03+0x404>)
 8002182:	f000 fd5f 	bl	8002c44 <DataSetSteering>
	}

	if(ModeABCD == 4){
 8002186:	4b32      	ldr	r3, [pc, #200]	; (8002250 <StartTask03+0x408>)
 8002188:	f993 3000 	ldrsb.w	r3, [r3]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d153      	bne.n	8002238 <StartTask03+0x3f0>
			DataSetSteering(buf, 0, SERVO_CW, SteDeg*100, SERVO_POS);
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <StartTask03+0x400>)
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4413      	add	r3, r2
 800219e:	461a      	mov	r2, r3
 80021a0:	0091      	lsls	r1, r2, #2
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	9200      	str	r2, [sp, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	4825      	ldr	r0, [pc, #148]	; (800224c <StartTask03+0x404>)
 80021b6:	f000 fd45 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 1, SERVO_CCW, SteDeg*100, SERVO_POS);
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <StartTask03+0x400>)
 80021bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	0091      	lsls	r1, r2, #2
 80021cc:	461a      	mov	r2, r3
 80021ce:	460b      	mov	r3, r1
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2200      	movs	r2, #0
 80021d8:	9200      	str	r2, [sp, #0]
 80021da:	2201      	movs	r2, #1
 80021dc:	2101      	movs	r1, #1
 80021de:	481b      	ldr	r0, [pc, #108]	; (800224c <StartTask03+0x404>)
 80021e0:	f000 fd30 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 2, SERVO_CCW, SteDeg*100, SERVO_POS);
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <StartTask03+0x400>)
 80021e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	461a      	mov	r2, r3
 80021f4:	0091      	lsls	r1, r2, #2
 80021f6:	461a      	mov	r2, r3
 80021f8:	460b      	mov	r3, r1
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2200      	movs	r2, #0
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	2102      	movs	r1, #2
 8002208:	4810      	ldr	r0, [pc, #64]	; (800224c <StartTask03+0x404>)
 800220a:	f000 fd1b 	bl	8002c44 <DataSetSteering>
			DataSetSteering(buf, 3, SERVO_CW, SteDeg*100, SERVO_POS);
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <StartTask03+0x400>)
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4413      	add	r3, r2
 800221c:	461a      	mov	r2, r3
 800221e:	0091      	lsls	r1, r2, #2
 8002220:	461a      	mov	r2, r3
 8002222:	460b      	mov	r3, r1
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	b29b      	uxth	r3, r3
 800222a:	2200      	movs	r2, #0
 800222c:	9200      	str	r2, [sp, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	2103      	movs	r1, #3
 8002232:	4806      	ldr	r0, [pc, #24]	; (800224c <StartTask03+0x404>)
 8002234:	f000 fd06 	bl	8002c44 <DataSetSteering>
	}
	osDelay(10);
 8002238:	200a      	movs	r0, #10
 800223a:	f007 f818 	bl	800926e <osDelay>
	ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 800223e:	4803      	ldr	r0, [pc, #12]	; (800224c <StartTask03+0x404>)
 8002240:	f000 fcd8 	bl	8002bf4 <ServoMotor_writeDMA>
  {
 8002244:	e6a7      	b.n	8001f96 <StartTask03+0x14e>
 8002246:	bf00      	nop
 8002248:	200007da 	.word	0x200007da
 800224c:	2000003c 	.word	0x2000003c
 8002250:	200007dc 	.word	0x200007dc

08002254 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 800225c:	f006 fe90 	bl	8008f80 <osKernelGetTickCount>
 8002260:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002268:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f007 f81a 	bl	80092a4 <osDelayUntil>


		temp++;
 8002270:	4bd0      	ldr	r3, [pc, #832]	; (80025b4 <StartTask04+0x360>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	4acf      	ldr	r2, [pc, #828]	; (80025b4 <StartTask04+0x360>)
 8002278:	6013      	str	r3, [r2, #0]
		switch (temp) {
 800227a:	4bce      	ldr	r3, [pc, #824]	; (80025b4 <StartTask04+0x360>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	2b07      	cmp	r3, #7
 8002282:	f200 81ea 	bhi.w	800265a <StartTask04+0x406>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <StartTask04+0x38>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	080022ad 	.word	0x080022ad
 8002290:	08002315 	.word	0x08002315
 8002294:	0800237d 	.word	0x0800237d
 8002298:	080023e5 	.word	0x080023e5
 800229c:	0800244d 	.word	0x0800244d
 80022a0:	080024cd 	.word	0x080024cd
 80022a4:	0800254d 	.word	0x0800254d
 80022a8:	080025d5 	.word	0x080025d5
			case 1:
				printf("case1\n");
 80022ac:	48c2      	ldr	r0, [pc, #776]	; (80025b8 <StartTask04+0x364>)
 80022ae:	f00a ff73 	bl	800d198 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 80022b2:	2301      	movs	r3, #1
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fe0b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 80022be:	2300      	movs	r3, #0
 80022c0:	2201      	movs	r2, #1
 80022c2:	2100      	movs	r1, #0
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7fe fe05 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 80022ca:	2300      	movs	r3, #0
 80022cc:	2200      	movs	r2, #0
 80022ce:	2101      	movs	r1, #1
 80022d0:	2002      	movs	r0, #2
 80022d2:	f7fe fdff 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 80022d6:	2301      	movs	r3, #1
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	2003      	movs	r0, #3
 80022de:	f7fe fdf9 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 80022e2:	2300      	movs	r3, #0
 80022e4:	2201      	movs	r2, #1
 80022e6:	2100      	movs	r1, #0
 80022e8:	2004      	movs	r0, #4
 80022ea:	f7fe fdf3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 80022ee:	2300      	movs	r3, #0
 80022f0:	2200      	movs	r2, #0
 80022f2:	2101      	movs	r1, #1
 80022f4:	2005      	movs	r0, #5
 80022f6:	f7fe fded 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 80022fa:	2301      	movs	r3, #1
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2006      	movs	r0, #6
 8002302:	f7fe fde7 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8002306:	2300      	movs	r3, #0
 8002308:	2201      	movs	r2, #1
 800230a:	2100      	movs	r1, #0
 800230c:	2007      	movs	r0, #7
 800230e:	f7fe fde1 	bl	8000ed4 <ws2812SetColor>
				break;
 8002312:	e1a2      	b.n	800265a <StartTask04+0x406>
			case 2:
				printf("case2\n");
 8002314:	48a9      	ldr	r0, [pc, #676]	; (80025bc <StartTask04+0x368>)
 8002316:	f00a ff3f 	bl	800d198 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 800231a:	2301      	movs	r3, #1
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	2007      	movs	r0, #7
 8002322:	f7fe fdd7 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8002326:	2300      	movs	r3, #0
 8002328:	2201      	movs	r2, #1
 800232a:	2100      	movs	r1, #0
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fdd1 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8002332:	2300      	movs	r3, #0
 8002334:	2200      	movs	r2, #0
 8002336:	2101      	movs	r1, #1
 8002338:	2001      	movs	r0, #1
 800233a:	f7fe fdcb 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 800233e:	2301      	movs	r3, #1
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	2002      	movs	r0, #2
 8002346:	f7fe fdc5 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 800234a:	2300      	movs	r3, #0
 800234c:	2201      	movs	r2, #1
 800234e:	2100      	movs	r1, #0
 8002350:	2003      	movs	r0, #3
 8002352:	f7fe fdbf 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8002356:	2300      	movs	r3, #0
 8002358:	2200      	movs	r2, #0
 800235a:	2101      	movs	r1, #1
 800235c:	2004      	movs	r0, #4
 800235e:	f7fe fdb9 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8002362:	2301      	movs	r3, #1
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2005      	movs	r0, #5
 800236a:	f7fe fdb3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 800236e:	2300      	movs	r3, #0
 8002370:	2201      	movs	r2, #1
 8002372:	2100      	movs	r1, #0
 8002374:	2006      	movs	r0, #6
 8002376:	f7fe fdad 	bl	8000ed4 <ws2812SetColor>
				break;
 800237a:	e16e      	b.n	800265a <StartTask04+0x406>
			case 3:
				printf("case3\n");
 800237c:	4890      	ldr	r0, [pc, #576]	; (80025c0 <StartTask04+0x36c>)
 800237e:	f00a ff0b 	bl	800d198 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8002382:	2301      	movs	r3, #1
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	2006      	movs	r0, #6
 800238a:	f7fe fda3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 800238e:	2300      	movs	r3, #0
 8002390:	2201      	movs	r2, #1
 8002392:	2100      	movs	r1, #0
 8002394:	2007      	movs	r0, #7
 8002396:	f7fe fd9d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 800239a:	2300      	movs	r3, #0
 800239c:	2200      	movs	r2, #0
 800239e:	2101      	movs	r1, #1
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe fd97 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 80023a6:	2301      	movs	r3, #1
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe fd91 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 80023b2:	2300      	movs	r3, #0
 80023b4:	2201      	movs	r2, #1
 80023b6:	2100      	movs	r1, #0
 80023b8:	2002      	movs	r0, #2
 80023ba:	f7fe fd8b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 80023be:	2300      	movs	r3, #0
 80023c0:	2200      	movs	r2, #0
 80023c2:	2101      	movs	r1, #1
 80023c4:	2003      	movs	r0, #3
 80023c6:	f7fe fd85 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 80023ca:	2301      	movs	r3, #1
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	2004      	movs	r0, #4
 80023d2:	f7fe fd7f 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 80023d6:	2300      	movs	r3, #0
 80023d8:	2201      	movs	r2, #1
 80023da:	2100      	movs	r1, #0
 80023dc:	2005      	movs	r0, #5
 80023de:	f7fe fd79 	bl	8000ed4 <ws2812SetColor>
				break;
 80023e2:	e13a      	b.n	800265a <StartTask04+0x406>
			case 4:
				printf("case4\n");
 80023e4:	4877      	ldr	r0, [pc, #476]	; (80025c4 <StartTask04+0x370>)
 80023e6:	f00a fed7 	bl	800d198 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 80023ea:	2301      	movs	r3, #1
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	2005      	movs	r0, #5
 80023f2:	f7fe fd6f 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 80023f6:	2300      	movs	r3, #0
 80023f8:	2201      	movs	r2, #1
 80023fa:	2100      	movs	r1, #0
 80023fc:	2006      	movs	r0, #6
 80023fe:	f7fe fd69 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8002402:	2300      	movs	r3, #0
 8002404:	2200      	movs	r2, #0
 8002406:	2101      	movs	r1, #1
 8002408:	2007      	movs	r0, #7
 800240a:	f7fe fd63 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 800240e:	2301      	movs	r3, #1
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe fd5d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 800241a:	2300      	movs	r3, #0
 800241c:	2201      	movs	r2, #1
 800241e:	2100      	movs	r1, #0
 8002420:	2001      	movs	r0, #1
 8002422:	f7fe fd57 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8002426:	2300      	movs	r3, #0
 8002428:	2200      	movs	r2, #0
 800242a:	2101      	movs	r1, #1
 800242c:	2002      	movs	r0, #2
 800242e:	f7fe fd51 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8002432:	2301      	movs	r3, #1
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	2003      	movs	r0, #3
 800243a:	f7fe fd4b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 800243e:	2300      	movs	r3, #0
 8002440:	2201      	movs	r2, #1
 8002442:	2100      	movs	r1, #0
 8002444:	2004      	movs	r0, #4
 8002446:	f7fe fd45 	bl	8000ed4 <ws2812SetColor>
				break;
 800244a:	e106      	b.n	800265a <StartTask04+0x406>
			case 5:
				printf("case5\n");
 800244c:	485e      	ldr	r0, [pc, #376]	; (80025c8 <StartTask04+0x374>)
 800244e:	f00a fea3 	bl	800d198 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8002452:	2301      	movs	r3, #1
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	2004      	movs	r0, #4
 800245a:	f7fe fd3b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 800245e:	2300      	movs	r3, #0
 8002460:	2201      	movs	r2, #1
 8002462:	2100      	movs	r1, #0
 8002464:	2005      	movs	r0, #5
 8002466:	f7fe fd35 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 800246a:	2300      	movs	r3, #0
 800246c:	2200      	movs	r2, #0
 800246e:	2101      	movs	r1, #1
 8002470:	2006      	movs	r0, #6
 8002472:	f7fe fd2f 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8002476:	2301      	movs	r3, #1
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	2007      	movs	r0, #7
 800247e:	f7fe fd29 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8002482:	2300      	movs	r3, #0
 8002484:	2201      	movs	r2, #1
 8002486:	2100      	movs	r1, #0
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe fd23 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 800248e:	2300      	movs	r3, #0
 8002490:	2200      	movs	r2, #0
 8002492:	2101      	movs	r1, #1
 8002494:	2001      	movs	r0, #1
 8002496:	f7fe fd1d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 800249a:	2301      	movs	r3, #1
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7fe fd17 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 80024a6:	2300      	movs	r3, #0
 80024a8:	2201      	movs	r2, #1
 80024aa:	2100      	movs	r1, #0
 80024ac:	2003      	movs	r0, #3
 80024ae:	f7fe fd11 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(8,0,0,1);//index, r, g, b
 80024b2:	2301      	movs	r3, #1
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2008      	movs	r0, #8
 80024ba:	f7fe fd0b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(9,0,1,0);//index, r, g, b
 80024be:	2300      	movs	r3, #0
 80024c0:	2201      	movs	r2, #1
 80024c2:	2100      	movs	r1, #0
 80024c4:	2009      	movs	r0, #9
 80024c6:	f7fe fd05 	bl	8000ed4 <ws2812SetColor>

				break;
 80024ca:	e0c6      	b.n	800265a <StartTask04+0x406>
			case 6:
				printf("case6\n");
 80024cc:	483f      	ldr	r0, [pc, #252]	; (80025cc <StartTask04+0x378>)
 80024ce:	f00a fe63 	bl	800d198 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 80024d2:	2301      	movs	r3, #1
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	2003      	movs	r0, #3
 80024da:	f7fe fcfb 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 80024de:	2300      	movs	r3, #0
 80024e0:	2201      	movs	r2, #1
 80024e2:	2100      	movs	r1, #0
 80024e4:	2004      	movs	r0, #4
 80024e6:	f7fe fcf5 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 80024ea:	2300      	movs	r3, #0
 80024ec:	2200      	movs	r2, #0
 80024ee:	2101      	movs	r1, #1
 80024f0:	2005      	movs	r0, #5
 80024f2:	f7fe fcef 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 80024f6:	2301      	movs	r3, #1
 80024f8:	2200      	movs	r2, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	2006      	movs	r0, #6
 80024fe:	f7fe fce9 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8002502:	2300      	movs	r3, #0
 8002504:	2201      	movs	r2, #1
 8002506:	2100      	movs	r1, #0
 8002508:	2007      	movs	r0, #7
 800250a:	f7fe fce3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 800250e:	2300      	movs	r3, #0
 8002510:	2200      	movs	r2, #0
 8002512:	2101      	movs	r1, #1
 8002514:	2000      	movs	r0, #0
 8002516:	f7fe fcdd 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 800251a:	2301      	movs	r3, #1
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	2001      	movs	r0, #1
 8002522:	f7fe fcd7 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8002526:	2300      	movs	r3, #0
 8002528:	2201      	movs	r2, #1
 800252a:	2100      	movs	r1, #0
 800252c:	2002      	movs	r0, #2
 800252e:	f7fe fcd1 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(8,0,1,1);//index, r, g, b
 8002532:	2301      	movs	r3, #1
 8002534:	2201      	movs	r2, #1
 8002536:	2100      	movs	r1, #0
 8002538:	2008      	movs	r0, #8
 800253a:	f7fe fccb 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(9,1,1,0);//index, r, g, b
 800253e:	2300      	movs	r3, #0
 8002540:	2201      	movs	r2, #1
 8002542:	2101      	movs	r1, #1
 8002544:	2009      	movs	r0, #9
 8002546:	f7fe fcc5 	bl	8000ed4 <ws2812SetColor>
				break;
 800254a:	e086      	b.n	800265a <StartTask04+0x406>
			case 7:
				printf("case7\n");
 800254c:	4820      	ldr	r0, [pc, #128]	; (80025d0 <StartTask04+0x37c>)
 800254e:	f00a fe23 	bl	800d198 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8002552:	2301      	movs	r3, #1
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	2002      	movs	r0, #2
 800255a:	f7fe fcbb 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 800255e:	2300      	movs	r3, #0
 8002560:	2201      	movs	r2, #1
 8002562:	2100      	movs	r1, #0
 8002564:	2003      	movs	r0, #3
 8002566:	f7fe fcb5 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 800256a:	2300      	movs	r3, #0
 800256c:	2200      	movs	r2, #0
 800256e:	2101      	movs	r1, #1
 8002570:	2004      	movs	r0, #4
 8002572:	f7fe fcaf 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8002576:	2301      	movs	r3, #1
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2005      	movs	r0, #5
 800257e:	f7fe fca9 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8002582:	2300      	movs	r3, #0
 8002584:	2201      	movs	r2, #1
 8002586:	2100      	movs	r1, #0
 8002588:	2006      	movs	r0, #6
 800258a:	f7fe fca3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 800258e:	2300      	movs	r3, #0
 8002590:	2200      	movs	r2, #0
 8002592:	2101      	movs	r1, #1
 8002594:	2007      	movs	r0, #7
 8002596:	f7fe fc9d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 800259a:	2301      	movs	r3, #1
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe fc97 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 80025a6:	2300      	movs	r3, #0
 80025a8:	2201      	movs	r2, #1
 80025aa:	2100      	movs	r1, #0
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe fc91 	bl	8000ed4 <ws2812SetColor>
				break;
 80025b2:	e052      	b.n	800265a <StartTask04+0x406>
 80025b4:	200007fc 	.word	0x200007fc
 80025b8:	080108bc 	.word	0x080108bc
 80025bc:	080108c4 	.word	0x080108c4
 80025c0:	080108cc 	.word	0x080108cc
 80025c4:	080108d4 	.word	0x080108d4
 80025c8:	080108dc 	.word	0x080108dc
 80025cc:	080108e4 	.word	0x080108e4
 80025d0:	080108ec 	.word	0x080108ec
			case 8:
				printf("case8\n");
 80025d4:	4825      	ldr	r0, [pc, #148]	; (800266c <StartTask04+0x418>)
 80025d6:	f00a fddf 	bl	800d198 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 80025da:	2301      	movs	r3, #1
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7fe fc77 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 80025e6:	2300      	movs	r3, #0
 80025e8:	2201      	movs	r2, #1
 80025ea:	2100      	movs	r1, #0
 80025ec:	2002      	movs	r0, #2
 80025ee:	f7fe fc71 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 80025f2:	2300      	movs	r3, #0
 80025f4:	2200      	movs	r2, #0
 80025f6:	2101      	movs	r1, #1
 80025f8:	2003      	movs	r0, #3
 80025fa:	f7fe fc6b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 80025fe:	2301      	movs	r3, #1
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	2004      	movs	r0, #4
 8002606:	f7fe fc65 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 800260a:	2300      	movs	r3, #0
 800260c:	2201      	movs	r2, #1
 800260e:	2100      	movs	r1, #0
 8002610:	2005      	movs	r0, #5
 8002612:	f7fe fc5f 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8002616:	2300      	movs	r3, #0
 8002618:	2200      	movs	r2, #0
 800261a:	2101      	movs	r1, #1
 800261c:	2006      	movs	r0, #6
 800261e:	f7fe fc59 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8002622:	2301      	movs	r3, #1
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	2007      	movs	r0, #7
 800262a:	f7fe fc53 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 800262e:	2300      	movs	r3, #0
 8002630:	2201      	movs	r2, #1
 8002632:	2100      	movs	r1, #0
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe fc4d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(8,1,1,1);//index, r, g, b
 800263a:	2301      	movs	r3, #1
 800263c:	2201      	movs	r2, #1
 800263e:	2101      	movs	r1, #1
 8002640:	2008      	movs	r0, #8
 8002642:	f7fe fc47 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(9,1,1,1);//index, r, g, b
 8002646:	2301      	movs	r3, #1
 8002648:	2201      	movs	r2, #1
 800264a:	2101      	movs	r1, #1
 800264c:	2009      	movs	r0, #9
 800264e:	f7fe fc41 	bl	8000ed4 <ws2812SetColor>
				temp=1;
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <StartTask04+0x41c>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]
				break;
 8002658:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe fc90 	bl	8000f84 <ws2812AllColor>
		ws2812NumOn(NUM_NPLED);
 8002664:	2018      	movs	r0, #24
 8002666:	f7fe fc21 	bl	8000eac <ws2812NumOn>
  {
 800266a:	e5fa      	b.n	8002262 <StartTask04+0xe>
 800266c:	080108f4 	.word	0x080108f4
 8002670:	200007fc 	.word	0x200007fc

08002674 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 800267c:	f006 fc80 	bl	8008f80 <osKernelGetTickCount>
 8002680:	60f8      	str	r0, [r7, #12]

	fanInit();
 8002682:	f7ff f809 	bl	8001698 <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800268c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f006 fe08 	bl	80092a4 <osDelayUntil>
	fanOn(30);
 8002694:	201e      	movs	r0, #30
 8002696:	f7ff f809 	bl	80016ac <fanOn>
	lastTime += PERIOD_FAN;
 800269a:	e7f4      	b.n	8002686 <StartTask05+0x12>

0800269c <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	6078      	str	r0, [r7, #4]
	//char buf[48]={0,};
  /* USER CODE BEGIN StartTask06 */
	//uint32_t lastTime = osKernelGetTickCount();
	osDelay(10);//for printf();
 80026a4:	200a      	movs	r0, #10
 80026a6:	f006 fde2 	bl	800926e <osDelay>
	printf("StartTask06 PS_SIG3_Pin.%d: \n", PS_SIGx_Pin);
 80026aa:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <StartTask06+0xc8>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4619      	mov	r1, r3
 80026b0:	482d      	ldr	r0, [pc, #180]	; (8002768 <StartTask06+0xcc>)
 80026b2:	f00a fceb 	bl	800d08c <iprintf>
  /* Infinite loop */
  for(;;)
  {
		osThreadFlagsWait(1, 0, osWaitForever);
 80026b6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ba:	2100      	movs	r1, #0
 80026bc:	2001      	movs	r0, #1
 80026be:	f006 fd55 	bl	800916c <osThreadFlagsWait>

	if(PS_SIGx_Pin&1){//1ch init
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <StartTask06+0xc8>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <StartTask06+0x4e>
		PS_SIGx_Pin=0; printf(" PS_SIG1_stop.\n");
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <StartTask06+0xc8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	4825      	ldr	r0, [pc, #148]	; (800276c <StartTask06+0xd0>)
 80026d6:	f00a fd5f 	bl	800d198 <puts>
		DataSetSteering(buf, 0, SERVO_CCW, 0, 0);
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2300      	movs	r3, #0
 80026e0:	2201      	movs	r2, #1
 80026e2:	2100      	movs	r1, #0
 80026e4:	4822      	ldr	r0, [pc, #136]	; (8002770 <StartTask06+0xd4>)
 80026e6:	f000 faad 	bl	8002c44 <DataSetSteering>
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}

	if(PS_SIGx_Pin&2){//2ch init
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <StartTask06+0xc8>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <StartTask06+0x76>
		PS_SIGx_Pin=0; printf(" PS_SIG2_stop.\n");
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <StartTask06+0xc8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	481d      	ldr	r0, [pc, #116]	; (8002774 <StartTask06+0xd8>)
 80026fe:	f00a fd4b 	bl	800d198 <puts>
		DataSetSteering(buf, 1, SERVO_CCW, 0, 0);
 8002702:	2300      	movs	r3, #0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2300      	movs	r3, #0
 8002708:	2201      	movs	r2, #1
 800270a:	2101      	movs	r1, #1
 800270c:	4818      	ldr	r0, [pc, #96]	; (8002770 <StartTask06+0xd4>)
 800270e:	f000 fa99 	bl	8002c44 <DataSetSteering>
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}
	if(PS_SIGx_Pin&4){//3ch init
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <StartTask06+0xc8>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <StartTask06+0x9e>
		PS_SIGx_Pin=0; printf(" PS_SIG3_stop.\n");
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <StartTask06+0xc8>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	4814      	ldr	r0, [pc, #80]	; (8002778 <StartTask06+0xdc>)
 8002726:	f00a fd37 	bl	800d198 <puts>
		DataSetSteering(buf, 2, SERVO_CCW, 0, 0);
 800272a:	2300      	movs	r3, #0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	2201      	movs	r2, #1
 8002732:	2102      	movs	r1, #2
 8002734:	480e      	ldr	r0, [pc, #56]	; (8002770 <StartTask06+0xd4>)
 8002736:	f000 fa85 	bl	8002c44 <DataSetSteering>
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}
	if(PS_SIGx_Pin&8){//4ch init
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <StartTask06+0xc8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0b7      	beq.n	80026b6 <StartTask06+0x1a>
		PS_SIGx_Pin=0; printf(" PS_SIG4_stop.\n");
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <StartTask06+0xc8>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <StartTask06+0xe0>)
 800274e:	f00a fd23 	bl	800d198 <puts>
		DataSetSteering(buf, 3, SERVO_CCW, 0, 0);
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	2201      	movs	r2, #1
 800275a:	2103      	movs	r1, #3
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <StartTask06+0xd4>)
 800275e:	f000 fa71 	bl	8002c44 <DataSetSteering>
		osThreadFlagsWait(1, 0, osWaitForever);
 8002762:	e7a8      	b.n	80026b6 <StartTask06+0x1a>
 8002764:	200007d8 	.word	0x200007d8
 8002768:	080108fc 	.word	0x080108fc
 800276c:	0801091c 	.word	0x0801091c
 8002770:	2000003c 	.word	0x2000003c
 8002774:	0801092c 	.word	0x0801092c
 8002778:	0801093c 	.word	0x0801093c
 800277c:	0801094c 	.word	0x0801094c

08002780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <MX_GPIO_Init+0x158>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a4e      	ldr	r2, [pc, #312]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a47      	ldr	r2, [pc, #284]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a40      	ldr	r2, [pc, #256]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a39      	ldr	r2, [pc, #228]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <MX_GPIO_Init+0x158>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <MX_GPIO_Init+0x158>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a32      	ldr	r2, [pc, #200]	; (80028d8 <MX_GPIO_Init+0x158>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <MX_GPIO_Init+0x158>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8002822:	2200      	movs	r2, #0
 8002824:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8002828:	482c      	ldr	r0, [pc, #176]	; (80028dc <MX_GPIO_Init+0x15c>)
 800282a:	f002 fe51 	bl	80054d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800282e:	2200      	movs	r2, #0
 8002830:	f244 0110 	movw	r1, #16400	; 0x4010
 8002834:	482a      	ldr	r0, [pc, #168]	; (80028e0 <MX_GPIO_Init+0x160>)
 8002836:	f002 fe4b 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	2104      	movs	r1, #4
 800283e:	4829      	ldr	r0, [pc, #164]	; (80028e4 <MX_GPIO_Init+0x164>)
 8002840:	f002 fe46 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8002844:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8002848:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284a:	2301      	movs	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	481f      	ldr	r0, [pc, #124]	; (80028dc <MX_GPIO_Init+0x15c>)
 800285e:	f002 fc83 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002862:	2301      	movs	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002866:	2303      	movs	r3, #3
 8002868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4819      	ldr	r0, [pc, #100]	; (80028dc <MX_GPIO_Init+0x15c>)
 8002876:	f002 fc77 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin|PS_SIG4_Pin;
 800287a:	23f0      	movs	r3, #240	; 0xf0
 800287c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800287e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4816      	ldr	r0, [pc, #88]	; (80028e8 <MX_GPIO_Init+0x168>)
 8002890:	f002 fc6a 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8002894:	f244 0310 	movw	r3, #16400	; 0x4010
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	480c      	ldr	r0, [pc, #48]	; (80028e0 <MX_GPIO_Init+0x160>)
 80028ae:	f002 fc5b 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028b2:	2304      	movs	r3, #4
 80028b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4806      	ldr	r0, [pc, #24]	; (80028e4 <MX_GPIO_Init+0x164>)
 80028ca:	f002 fc4d 	bl	8005168 <HAL_GPIO_Init>
//  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
//
//  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40020000 	.word	0x40020000

080028ec <GPIO_disableirq>:

/* USER CODE BEGIN 2 */
void GPIO_disableirq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80028f0:	200a      	movs	r0, #10
 80028f2:	f002 f829 	bl	8004948 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80028f6:	2017      	movs	r0, #23
 80028f8:	f002 f826 	bl	8004948 <HAL_NVIC_DisableIRQ>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <GPIO_enableirq>:

void GPIO_enableirq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2105      	movs	r1, #5
 8002908:	200a      	movs	r0, #10
 800290a:	f001 fff3 	bl	80048f4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800290e:	200a      	movs	r0, #10
 8002910:	f002 f80c 	bl	800492c <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2105      	movs	r1, #5
 8002918:	2017      	movs	r0, #23
 800291a:	f001 ffeb 	bl	80048f4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800291e:	2017      	movs	r0, #23
 8002920:	f002 f804 	bl	800492c <HAL_NVIC_EnableIRQ>
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}

08002928 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 800292e:	4a19      	ldr	r2, [pc, #100]	; (8002994 <MX_I2C1_SMBUS_Init+0x6c>)
 8002930:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <MX_I2C1_SMBUS_Init+0x70>)
 8002936:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 8002940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002944:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 8002960:	2200      	movs	r2, #0
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 8002966:	2202      	movs	r2, #2
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800296a:	4809      	ldr	r0, [pc, #36]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 800296c:	f003 fa86 	bl	8005e7c <HAL_SMBUS_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 8002976:	f000 f90d 	bl	8002b94 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_I2C1_SMBUS_Init+0x68>)
 800297c:	f003 fb34 	bl	8005fe8 <HAL_SMBUS_EnableAlert_IT>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 8002986:	f000 f905 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000800 	.word	0x20000800
 8002994:	40005400 	.word	0x40005400
 8002998:	000186a0 	.word	0x000186a0

0800299c <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_SMBUS_MspInit+0x84>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12b      	bne.n	8002a16 <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_SMBUS_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_SMBUS_MspInit+0x88>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_SMBUS_MspInit+0x88>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029da:	23e0      	movs	r3, #224	; 0xe0
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029de:	2312      	movs	r3, #18
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029ea:	2304      	movs	r3, #4
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	480c      	ldr	r0, [pc, #48]	; (8002a28 <HAL_SMBUS_MspInit+0x8c>)
 80029f6:	f002 fbb7 	bl	8005168 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_SMBUS_MspInit+0x88>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_SMBUS_MspInit+0x88>)
 8002a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_SMBUS_MspInit+0x88>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40005400 	.word	0x40005400
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020400 	.word	0x40020400

08002a2c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	2364      	movs	r3, #100	; 0x64
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	4803      	ldr	r0, [pc, #12]	; (8002a50 <_write+0x24>)
 8002a42:	f005 f88e 	bl	8007b62 <HAL_UART_Transmit>
	return (len);
 8002a46:	687b      	ldr	r3, [r7, #4]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200009e8 	.word	0x200009e8

08002a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a58:	f000 ff72 	bl	8003940 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8002a5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a60:	f000 ffb0 	bl	80039c4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a64:	f000 f81a 	bl	8002a9c <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a68:	f7ff fe8a 	bl	8002780 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002a6c:	f7fe fad8 	bl	8001020 <MX_CAN1_Init>

  MX_TIM1_Init();
 8002a70:	f000 faf8 	bl	8003064 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 8002a74:	f7ff ff58 	bl	8002928 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8002a78:	f7fe fdd8 	bl	800162c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002a7c:	f000 fe4c 	bl	8003718 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8002a80:	f000 fe20 	bl	80036c4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8002a84:	f000 fc1c 	bl	80032c0 <MX_TIM8_Init>
  MX_TIM3_Init();
 8002a88:	f000 fb9e 	bl	80031c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002a8c:	f006 fa2e 	bl	8008eec <osKernelInitialize>
  MX_FREERTOS_Init();
 8002a90:	f7fe fea4 	bl	80017dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002a94:	f006 fa4e 	bl	8008f34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <main+0x44>
	...

08002a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b094      	sub	sp, #80	; 0x50
 8002aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	2230      	movs	r2, #48	; 0x30
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f009 fde7 	bl	800c67e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <SystemClock_Config+0xcc>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <SystemClock_Config+0xcc>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <SystemClock_Config+0xcc>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <SystemClock_Config+0xd0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <SystemClock_Config+0xd0>)
 8002ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <SystemClock_Config+0xd0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b02:	2302      	movs	r3, #2
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002b0c:	2306      	movs	r3, #6
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b10:	23a8      	movs	r3, #168	; 0xa8
 8002b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b14:	2302      	movs	r3, #2
 8002b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1c:	f107 0320 	add.w	r3, r7, #32
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fd21 	bl	8005568 <HAL_RCC_OscConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b2c:	f000 f832 	bl	8002b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b30:	230f      	movs	r3, #15
 8002b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b34:	2302      	movs	r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	2105      	movs	r1, #5
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 ff82 	bl	8005a58 <HAL_RCC_ClockConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b5a:	f000 f81b 	bl	8002b94 <Error_Handler>
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3750      	adds	r7, #80	; 0x50
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40007000 	.word	0x40007000

08002b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b82:	f000 feff 	bl	8003984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40001000 	.word	0x40001000

08002b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b98:	b672      	cpsid	i
}
 8002b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <Error_Handler+0x8>
	...

08002ba0 <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <HAL_UART_RxCpltCallback+0x3c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d109      	bne.n	8002bc6 <HAL_UART_RxCpltCallback+0x26>
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_UART_RxCpltCallback+0x40>)
 8002bb6:	480b      	ldr	r0, [pc, #44]	; (8002be4 <HAL_UART_RxCpltCallback+0x44>)
 8002bb8:	f005 f865 	bl	8007c86 <HAL_UART_Receive_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4809      	ldr	r0, [pc, #36]	; (8002be8 <HAL_UART_RxCpltCallback+0x48>)
 8002bc2:	f00a fa63 	bl	800d08c <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_UART_RxCpltCallback+0x4c>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8002bcc:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <HAL_UART_RxCpltCallback+0x50>)
 8002bce:	f00a fae3 	bl	800d198 <puts>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40004800 	.word	0x40004800
 8002be0:	20000858 	.word	0x20000858
 8002be4:	20000a2c 	.word	0x20000a2c
 8002be8:	0801095c 	.word	0x0801095c
 8002bec:	20000854 	.word	0x20000854
 8002bf0:	08010970 	.word	0x08010970

08002bf4 <ServoMotor_writeDMA>:

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
}

void ServoMotor_writeDMA(const char* str)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c02:	480e      	ldr	r0, [pc, #56]	; (8002c3c <ServoMotor_writeDMA+0x48>)
 8002c04:	f002 fc64 	bl	80054d0 <HAL_GPIO_WritePin>
    osDelay(6);//because transmit_DMA
 8002c08:	2006      	movs	r0, #6
 8002c0a:	f006 fb30 	bl	800926e <osDelay>
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 8002c0e:	2230      	movs	r2, #48	; 0x30
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	480b      	ldr	r0, [pc, #44]	; (8002c40 <ServoMotor_writeDMA+0x4c>)
 8002c14:	f005 f868 	bl	8007ce8 <HAL_UART_Transmit_DMA>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <ServoMotor_writeDMA+0x2e>
 8002c1e:	f7ff ffb9 	bl	8002b94 <Error_Handler>
    osDelay(6);//because transmit_DMA
 8002c22:	2006      	movs	r0, #6
 8002c24:	f006 fb23 	bl	800926e <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c2e:	4803      	ldr	r0, [pc, #12]	; (8002c3c <ServoMotor_writeDMA+0x48>)
 8002c30:	f002 fc4e 	bl	80054d0 <HAL_GPIO_WritePin>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	20000a2c 	.word	0x20000a2c

08002c44 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const char* str, char id, char direction, unsigned short position, char init)
{
 8002c44:	b490      	push	{r4, r7}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	70fb      	strb	r3, [r7, #3]
 8002c56:	460b      	mov	r3, r1
 8002c58:	70bb      	strb	r3, [r7, #2]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	803b      	strh	r3, [r7, #0]
    char buf[12];

    buf[0]=0xFF;//header
 8002c5e:	23ff      	movs	r3, #255	; 0xff
 8002c60:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 8002c62:	23fe      	movs	r3, #254	; 0xfe
 8002c64:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 8002c6e:	2300      	movs	r3, #0
 8002c70:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8002c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c76:	3302      	adds	r3, #2
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 8002c7c:	78bb      	ldrb	r3, [r7, #2]
 8002c7e:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 8002c80:	883b      	ldrh	r3, [r7, #0]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 8002c8a:	883b      	ldrh	r3, [r7, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	743b      	strb	r3, [r7, #16]
    if(init == 1){buf[9]=STOP_SPEED;}//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 8002c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <DataSetSteering+0x5a>
 8002c98:	2303      	movs	r3, #3
 8002c9a:	747b      	strb	r3, [r7, #17]
 8002c9c:	e001      	b.n	8002ca2 <DataSetSteering+0x5e>
    else buf[9]=0x1E;//speed, position second = 3s
 8002c9e:	231e      	movs	r3, #30
 8002ca0:	747b      	strb	r3, [r7, #17]
    buf[10]=0x00;//reservation
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	74bb      	strb	r3, [r7, #18]
    buf[11]=0x00;//reservation
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	74fb      	strb	r3, [r7, #19]

    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8002caa:	2302      	movs	r3, #2
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	e00d      	b.n	8002ccc <DataSetSteering+0x88>
 8002cb0:	f107 0208 	add.w	r2, r7, #8
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <DataSetSteering+0xc8>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <DataSetSteering+0xc8>)
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b09      	cmp	r3, #9
 8002cd0:	ddee      	ble.n	8002cb0 <DataSetSteering+0x6c>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <DataSetSteering+0xc8>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <DataSetSteering+0xc8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	461c      	mov	r4, r3
 8002cf4:	f107 0308 	add.w	r3, r7, #8
 8002cf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cfa:	6020      	str	r0, [r4, #0]
 8002cfc:	6061      	str	r1, [r4, #4]
 8002cfe:	60a2      	str	r2, [r4, #8]

}
 8002d00:	bf00      	nop
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc90      	pop	{r4, r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000850 	.word	0x20000850

08002d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_MspInit+0x54>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_MspInit+0x54>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_MspInit+0x54>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_MspInit+0x54>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_MspInit+0x54>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_MspInit+0x54>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	210f      	movs	r1, #15
 8002d52:	f06f 0001 	mvn.w	r0, #1
 8002d56:	f001 fdcd 	bl	80048f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	2036      	movs	r0, #54	; 0x36
 8002d7e:	f001 fdb9 	bl	80048f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d82:	2036      	movs	r0, #54	; 0x36
 8002d84:	f001 fdd2 	bl	800492c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_InitTick+0xa4>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_InitTick+0xa4>)
 8002d92:	f043 0310 	orr.w	r3, r3, #16
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
 8002d98:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <HAL_InitTick+0xa4>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002da4:	f107 0210 	add.w	r2, r7, #16
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 f832 	bl	8005e18 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002db4:	f003 f808 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8002db8:	4603      	mov	r3, r0
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_InitTick+0xa8>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_InitTick+0xac>)
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_InitTick+0xb0>)
 8002dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_InitTick+0xac>)
 8002dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_InitTick+0xac>)
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_InitTick+0xac>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_InitTick+0xac>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002dec:	4809      	ldr	r0, [pc, #36]	; (8002e14 <HAL_InitTick+0xac>)
 8002dee:	f003 f91b 	bl	8006028 <HAL_TIM_Base_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002df8:	4806      	ldr	r0, [pc, #24]	; (8002e14 <HAL_InitTick+0xac>)
 8002dfa:	f003 f965 	bl	80060c8 <HAL_TIM_Base_Start_IT>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	e000      	b.n	8002e04 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3730      	adds	r7, #48	; 0x30
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	431bde83 	.word	0x431bde83
 8002e14:	20000864 	.word	0x20000864
 8002e18:	40001000 	.word	0x40001000

08002e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <NMI_Handler+0x4>

08002e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e26:	e7fe      	b.n	8002e26 <HardFault_Handler+0x4>

08002e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <MemManage_Handler+0x4>

08002e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <BusFault_Handler+0x4>

08002e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <UsageFault_Handler+0x4>

08002e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 8002e4c:	2010      	movs	r0, #16
 8002e4e:	f002 fb73 	bl	8005538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <DMA1_Stream3_IRQHandler+0x10>)
 8002e5e:	f001 ff19 	bl	8004c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000a70 	.word	0x20000a70

08002e6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <CAN1_RX0_IRQHandler+0x10>)
 8002e72:	f001 fa33 	bl	80042dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200007b0 	.word	0x200007b0

08002e80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 8002e84:	2020      	movs	r0, #32
 8002e86:	f002 fb57 	bl	8005538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 8002e8a:	2040      	movs	r0, #64	; 0x40
 8002e8c:	f002 fb54 	bl	8005538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8002e90:	2080      	movs	r0, #128	; 0x80
 8002e92:	f002 fb51 	bl	8005538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <USART2_IRQHandler+0x10>)
 8002ea2:	f004 ff9f 	bl	8007de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200009e8 	.word	0x200009e8

08002eb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <USART3_IRQHandler+0x10>)
 8002eb6:	f004 ff95 	bl	8007de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000a2c 	.word	0x20000a2c

08002ec4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <TIM6_DAC_IRQHandler+0x10>)
 8002eca:	f003 fca6 	bl	800681a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000864 	.word	0x20000864

08002ed8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <DMA2_Stream2_IRQHandler+0x10>)
 8002ede:	f001 fed9 	bl	8004c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000988 	.word	0x20000988

08002eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
	return 1;
 8002ef0:	2301      	movs	r3, #1
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_kill>:

int _kill(int pid, int sig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f06:	f009 fa89 	bl	800c41c <__errno>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2216      	movs	r2, #22
 8002f0e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_exit>:

void _exit (int status)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ffe7 	bl	8002efc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f2e:	e7fe      	b.n	8002f2e <_exit+0x12>

08002f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e00a      	b.n	8002f58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f42:	f3af 8000 	nop.w
 8002f46:	4601      	mov	r1, r0
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	60ba      	str	r2, [r7, #8]
 8002f4e:	b2ca      	uxtb	r2, r1
 8002f50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbf0      	blt.n	8002f42 <_read+0x12>
	}

return len;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
	return -1;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f92:	605a      	str	r2, [r3, #4]
	return 0;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_isatty>:

int _isatty(int file)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
	return 1;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f009 fa0a 	bl	800c41c <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20020000 	.word	0x20020000
 8003034:	00000400 	.word	0x00000400
 8003038:	200008ac 	.word	0x200008ac
 800303c:	200054f8 	.word	0x200054f8

08003040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <SystemInit+0x20>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <SystemInit+0x20>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b096      	sub	sp, #88	; 0x58
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003074:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
 8003084:	615a      	str	r2, [r3, #20]
 8003086:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	2220      	movs	r2, #32
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f009 faee 	bl	800c67e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030a2:	4b47      	ldr	r3, [pc, #284]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030a4:	4a47      	ldr	r2, [pc, #284]	; (80031c4 <MX_TIM1_Init+0x160>)
 80030a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 80030a8:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030aa:	f240 628f 	movw	r2, #1679	; 0x68f
 80030ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80030b6:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030b8:	2263      	movs	r2, #99	; 0x63
 80030ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030bc:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030c2:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c8:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030ce:	483c      	ldr	r0, [pc, #240]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030d0:	f003 f86a 	bl	80061a8 <HAL_TIM_PWM_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80030da:	f7ff fd5b 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80030de:	4838      	ldr	r0, [pc, #224]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030e0:	f003 fb42 	bl	8006768 <HAL_TIM_IC_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80030ea:	f7ff fd53 	bl	8002b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030fa:	4619      	mov	r1, r3
 80030fc:	4830      	ldr	r0, [pc, #192]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80030fe:	f004 fc01 	bl	8007904 <HAL_TIMEx_MasterConfigSynchronization>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003108:	f7ff fd44 	bl	8002b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800310c:	2360      	movs	r3, #96	; 0x60
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003114:	2300      	movs	r3, #0
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003118:	2300      	movs	r3, #0
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003128:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800312c:	2200      	movs	r2, #0
 800312e:	4619      	mov	r1, r3
 8003130:	4823      	ldr	r0, [pc, #140]	; (80031c0 <MX_TIM1_Init+0x15c>)
 8003132:	f003 fd17 	bl	8006b64 <HAL_TIM_PWM_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800313c:	f7ff fd2a 	bl	8002b94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003144:	2301      	movs	r3, #1
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003148:	2300      	movs	r3, #0
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003154:	2204      	movs	r2, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4819      	ldr	r0, [pc, #100]	; (80031c0 <MX_TIM1_Init+0x15c>)
 800315a:	f003 fc66 	bl	8006a2a <HAL_TIM_IC_ConfigChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8003164:	f7ff fd16 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800316c:	2208      	movs	r2, #8
 800316e:	4619      	mov	r1, r3
 8003170:	4813      	ldr	r0, [pc, #76]	; (80031c0 <MX_TIM1_Init+0x15c>)
 8003172:	f003 fc5a 	bl	8006a2a <HAL_TIM_IC_ConfigChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 800317c:	f7ff fd0a 	bl	8002b94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003198:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4807      	ldr	r0, [pc, #28]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80031a4:	f004 fc2a 	bl	80079fc <HAL_TIMEx_ConfigBreakDeadTime>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80031ae:	f7ff fcf1 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031b2:	4803      	ldr	r0, [pc, #12]	; (80031c0 <MX_TIM1_Init+0x15c>)
 80031b4:	f000 fa22 	bl	80035fc <HAL_TIM_MspPostInit>

}
 80031b8:	bf00      	nop
 80031ba:	3758      	adds	r7, #88	; 0x58
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200008b0 	.word	0x200008b0
 80031c4:	40010000 	.word	0x40010000

080031c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ce:	f107 0318 	add.w	r3, r7, #24
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031dc:	f107 0310 	add.w	r3, r7, #16
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031e6:	463b      	mov	r3, r7
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <MX_TIM3_Init+0xf0>)
 80031f4:	4a31      	ldr	r2, [pc, #196]	; (80032bc <MX_TIM3_Init+0xf4>)
 80031f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031f8:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <MX_TIM3_Init+0xf0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fe:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <MX_TIM3_Init+0xf0>)
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003204:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <MX_TIM3_Init+0xf0>)
 8003206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800320a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <MX_TIM3_Init+0xf0>)
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003212:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <MX_TIM3_Init+0xf0>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003218:	4827      	ldr	r0, [pc, #156]	; (80032b8 <MX_TIM3_Init+0xf0>)
 800321a:	f002 ff05 	bl	8006028 <HAL_TIM_Base_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003224:	f7ff fcb6 	bl	8002b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800322e:	f107 0318 	add.w	r3, r7, #24
 8003232:	4619      	mov	r1, r3
 8003234:	4820      	ldr	r0, [pc, #128]	; (80032b8 <MX_TIM3_Init+0xf0>)
 8003236:	f003 fd57 	bl	8006ce8 <HAL_TIM_ConfigClockSource>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003240:	f7ff fca8 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003244:	481c      	ldr	r0, [pc, #112]	; (80032b8 <MX_TIM3_Init+0xf0>)
 8003246:	f003 fa8f 	bl	8006768 <HAL_TIM_IC_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003250:	f7ff fca0 	bl	8002b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800325c:	f107 0310 	add.w	r3, r7, #16
 8003260:	4619      	mov	r1, r3
 8003262:	4815      	ldr	r0, [pc, #84]	; (80032b8 <MX_TIM3_Init+0xf0>)
 8003264:	f004 fb4e 	bl	8007904 <HAL_TIMEx_MasterConfigSynchronization>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800326e:	f7ff fc91 	bl	8002b94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003272:	2300      	movs	r3, #0
 8003274:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003276:	2301      	movs	r3, #1
 8003278:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003282:	463b      	mov	r3, r7
 8003284:	2208      	movs	r2, #8
 8003286:	4619      	mov	r1, r3
 8003288:	480b      	ldr	r0, [pc, #44]	; (80032b8 <MX_TIM3_Init+0xf0>)
 800328a:	f003 fbce 	bl	8006a2a <HAL_TIM_IC_ConfigChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003294:	f7ff fc7e 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003298:	463b      	mov	r3, r7
 800329a:	220c      	movs	r2, #12
 800329c:	4619      	mov	r1, r3
 800329e:	4806      	ldr	r0, [pc, #24]	; (80032b8 <MX_TIM3_Init+0xf0>)
 80032a0:	f003 fbc3 	bl	8006a2a <HAL_TIM_IC_ConfigChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80032aa:	f7ff fc73 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032ae:	bf00      	nop
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200008f8 	.word	0x200008f8
 80032bc:	40000400 	.word	0x40000400

080032c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b096      	sub	sp, #88	; 0x58
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	611a      	str	r2, [r3, #16]
 80032ee:	615a      	str	r2, [r3, #20]
 80032f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	2220      	movs	r2, #32
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f009 f9c0 	bl	800c67e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80032fe:	4b50      	ldr	r3, [pc, #320]	; (8003440 <MX_TIM8_Init+0x180>)
 8003300:	4a50      	ldr	r2, [pc, #320]	; (8003444 <MX_TIM8_Init+0x184>)
 8003302:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8003304:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <MX_TIM8_Init+0x180>)
 8003306:	2201      	movs	r2, #1
 8003308:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330a:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <MX_TIM8_Init+0x180>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <MX_TIM8_Init+0x180>)
 8003312:	2268      	movs	r2, #104	; 0x68
 8003314:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003316:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <MX_TIM8_Init+0x180>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800331c:	4b48      	ldr	r3, [pc, #288]	; (8003440 <MX_TIM8_Init+0x180>)
 800331e:	2200      	movs	r2, #0
 8003320:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <MX_TIM8_Init+0x180>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003328:	4845      	ldr	r0, [pc, #276]	; (8003440 <MX_TIM8_Init+0x180>)
 800332a:	f002 fe7d 	bl	8006028 <HAL_TIM_Base_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003334:	f7ff fc2e 	bl	8002b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800333e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003342:	4619      	mov	r1, r3
 8003344:	483e      	ldr	r0, [pc, #248]	; (8003440 <MX_TIM8_Init+0x180>)
 8003346:	f003 fccf 	bl	8006ce8 <HAL_TIM_ConfigClockSource>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8003350:	f7ff fc20 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003354:	483a      	ldr	r0, [pc, #232]	; (8003440 <MX_TIM8_Init+0x180>)
 8003356:	f002 ff27 	bl	80061a8 <HAL_TIM_PWM_Init>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003360:	f7ff fc18 	bl	8002b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003364:	2300      	movs	r3, #0
 8003366:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800336c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003370:	4619      	mov	r1, r3
 8003372:	4833      	ldr	r0, [pc, #204]	; (8003440 <MX_TIM8_Init+0x180>)
 8003374:	f004 fac6 	bl	8007904 <HAL_TIMEx_MasterConfigSynchronization>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800337e:	f7ff fc09 	bl	8002b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003382:	2360      	movs	r3, #96	; 0x60
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800338e:	2300      	movs	r3, #0
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800339e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a2:	2200      	movs	r2, #0
 80033a4:	4619      	mov	r1, r3
 80033a6:	4826      	ldr	r0, [pc, #152]	; (8003440 <MX_TIM8_Init+0x180>)
 80033a8:	f003 fbdc 	bl	8006b64 <HAL_TIM_PWM_ConfigChannel>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80033b2:	f7ff fbef 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ba:	2204      	movs	r2, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4820      	ldr	r0, [pc, #128]	; (8003440 <MX_TIM8_Init+0x180>)
 80033c0:	f003 fbd0 	bl	8006b64 <HAL_TIM_PWM_ConfigChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80033ca:	f7ff fbe3 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d2:	2208      	movs	r2, #8
 80033d4:	4619      	mov	r1, r3
 80033d6:	481a      	ldr	r0, [pc, #104]	; (8003440 <MX_TIM8_Init+0x180>)
 80033d8:	f003 fbc4 	bl	8006b64 <HAL_TIM_PWM_ConfigChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80033e2:	f7ff fbd7 	bl	8002b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ea:	220c      	movs	r2, #12
 80033ec:	4619      	mov	r1, r3
 80033ee:	4814      	ldr	r0, [pc, #80]	; (8003440 <MX_TIM8_Init+0x180>)
 80033f0:	f003 fbb8 	bl	8006b64 <HAL_TIM_PWM_ConfigChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80033fa:	f7ff fbcb 	bl	8002b94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003416:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4807      	ldr	r0, [pc, #28]	; (8003440 <MX_TIM8_Init+0x180>)
 8003422:	f004 faeb 	bl	80079fc <HAL_TIMEx_ConfigBreakDeadTime>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 800342c:	f7ff fbb2 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003430:	4803      	ldr	r0, [pc, #12]	; (8003440 <MX_TIM8_Init+0x180>)
 8003432:	f000 f8e3 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8003436:	bf00      	nop
 8003438:	3758      	adds	r7, #88	; 0x58
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000940 	.word	0x20000940
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_TIM_PWM_MspInit+0x84>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d12c      	bne.n	80034c4 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_TIM_PWM_MspInit+0x88>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_TIM_PWM_MspInit+0x88>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6453      	str	r3, [r2, #68]	; 0x44
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_TIM_PWM_MspInit+0x88>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_TIM_PWM_MspInit+0x88>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_TIM_PWM_MspInit+0x88>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_TIM_PWM_MspInit+0x88>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034b4:	2301      	movs	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4619      	mov	r1, r3
 80034be:	4805      	ldr	r0, [pc, #20]	; (80034d4 <HAL_TIM_PWM_MspInit+0x8c>)
 80034c0:	f001 fe52 	bl	8005168 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80034c4:	bf00      	nop
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40020000 	.word	0x40020000

080034d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3b      	ldr	r2, [pc, #236]	; (80035e4 <HAL_TIM_Base_MspInit+0x10c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12c      	bne.n	8003554 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4a39      	ldr	r2, [pc, #228]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
 800350a:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003532:	2303      	movs	r3, #3
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003542:	2302      	movs	r3, #2
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4827      	ldr	r0, [pc, #156]	; (80035ec <HAL_TIM_Base_MspInit+0x114>)
 800354e:	f001 fe0b 	bl	8005168 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003552:	e042      	b.n	80035da <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <HAL_TIM_Base_MspInit+0x118>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d13d      	bne.n	80035da <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_TIM_Base_MspInit+0x110>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <HAL_TIM_Base_MspInit+0x120>)
 800357e:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 8003582:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003586:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 8003596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 800359e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a2:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 80035a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035aa:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80035be:	480d      	ldr	r0, [pc, #52]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 80035c0:	f001 f9d0 	bl	8004964 <HAL_DMA_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_TIM_Base_MspInit+0xf6>
      Error_Handler();
 80035ca:	f7ff fae3 	bl	8002b94 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <HAL_TIM_Base_MspInit+0x11c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40010400 	.word	0x40010400
 80035f4:	20000988 	.word	0x20000988
 80035f8:	40026440 	.word	0x40026440

080035fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_TIM_MspPostInit+0xb4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d11f      	bne.n	800365e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_TIM_MspPostInit+0xb8>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <HAL_TIM_MspPostInit+0xb8>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <HAL_TIM_MspPostInit+0xb8>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800363a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800363e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003648:	2300      	movs	r3, #0
 800364a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800364c:	2301      	movs	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	4619      	mov	r1, r3
 8003656:	4818      	ldr	r0, [pc, #96]	; (80036b8 <HAL_TIM_MspPostInit+0xbc>)
 8003658:	f001 fd86 	bl	8005168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800365c:	e023      	b.n	80036a6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_TIM_MspPostInit+0xc0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d11e      	bne.n	80036a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_TIM_MspPostInit+0xb8>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <HAL_TIM_MspPostInit+0xb8>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_TIM_MspPostInit+0xb8>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003684:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003696:	2303      	movs	r3, #3
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	4619      	mov	r1, r3
 80036a0:	4807      	ldr	r0, [pc, #28]	; (80036c0 <HAL_TIM_MspPostInit+0xc4>)
 80036a2:	f001 fd61 	bl	8005168 <HAL_GPIO_Init>
}
 80036a6:	bf00      	nop
 80036a8:	3728      	adds	r7, #40	; 0x28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40010400 	.word	0x40010400
 80036c0:	40020800 	.word	0x40020800

080036c4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <MX_USART2_UART_Init+0x50>)
 80036cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036ea:	220c      	movs	r2, #12
 80036ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036fa:	4805      	ldr	r0, [pc, #20]	; (8003710 <MX_USART2_UART_Init+0x4c>)
 80036fc:	f004 f9e4 	bl	8007ac8 <HAL_UART_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003706:	f7ff fa45 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200009e8 	.word	0x200009e8
 8003714:	40004400 	.word	0x40004400

08003718 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <MX_USART3_UART_Init+0x50>)
 8003720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 8003724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 800373e:	220c      	movs	r2, #12
 8003740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 800374a:	2200      	movs	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800374e:	4805      	ldr	r0, [pc, #20]	; (8003764 <MX_USART3_UART_Init+0x4c>)
 8003750:	f004 f9ba 	bl	8007ac8 <HAL_UART_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800375a:	f7ff fa1b 	bl	8002b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000a2c 	.word	0x20000a2c
 8003768:	40004800 	.word	0x40004800

0800376c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	; 0x30
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003774:	f107 031c 	add.w	r3, r7, #28
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a51      	ldr	r2, [pc, #324]	; (80038d0 <HAL_UART_MspInit+0x164>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d134      	bne.n	80037f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_UART_MspInit+0x168>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a4f      	ldr	r2, [pc, #316]	; (80038d4 <HAL_UART_MspInit+0x168>)
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <HAL_UART_MspInit+0x168>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <HAL_UART_MspInit+0x168>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a48      	ldr	r2, [pc, #288]	; (80038d4 <HAL_UART_MspInit+0x168>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ba:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_UART_MspInit+0x168>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037c6:	230c      	movs	r3, #12
 80037c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d2:	2303      	movs	r3, #3
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037d6:	2307      	movs	r3, #7
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 031c 	add.w	r3, r7, #28
 80037de:	4619      	mov	r1, r3
 80037e0:	483d      	ldr	r0, [pc, #244]	; (80038d8 <HAL_UART_MspInit+0x16c>)
 80037e2:	f001 fcc1 	bl	8005168 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	2105      	movs	r1, #5
 80037ea:	2026      	movs	r0, #38	; 0x26
 80037ec:	f001 f882 	bl	80048f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037f0:	2026      	movs	r0, #38	; 0x26
 80037f2:	f001 f89b 	bl	800492c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80037f6:	e067      	b.n	80038c8 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a37      	ldr	r2, [pc, #220]	; (80038dc <HAL_UART_MspInit+0x170>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d162      	bne.n	80038c8 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_UART_MspInit+0x168>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a32      	ldr	r2, [pc, #200]	; (80038d4 <HAL_UART_MspInit+0x168>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_UART_MspInit+0x168>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <HAL_UART_MspInit+0x168>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a2b      	ldr	r2, [pc, #172]	; (80038d4 <HAL_UART_MspInit+0x168>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_UART_MspInit+0x168>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800383a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003848:	2303      	movs	r3, #3
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800384c:	2307      	movs	r3, #7
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4822      	ldr	r0, [pc, #136]	; (80038e0 <HAL_UART_MspInit+0x174>)
 8003858:	f001 fc86 	bl	8005168 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <HAL_UART_MspInit+0x178>)
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <HAL_UART_MspInit+0x17c>)
 8003860:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_UART_MspInit+0x178>)
 8003864:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003868:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_UART_MspInit+0x178>)
 800386c:	2240      	movs	r2, #64	; 0x40
 800386e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_UART_MspInit+0x178>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_UART_MspInit+0x178>)
 8003878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_UART_MspInit+0x178>)
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_UART_MspInit+0x178>)
 8003886:	2200      	movs	r2, #0
 8003888:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_UART_MspInit+0x178>)
 800388c:	2200      	movs	r2, #0
 800388e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_UART_MspInit+0x178>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <HAL_UART_MspInit+0x178>)
 8003898:	2200      	movs	r2, #0
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800389c:	4811      	ldr	r0, [pc, #68]	; (80038e4 <HAL_UART_MspInit+0x178>)
 800389e:	f001 f861 	bl	8004964 <HAL_DMA_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_UART_MspInit+0x140>
      Error_Handler();
 80038a8:	f7ff f974 	bl	8002b94 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <HAL_UART_MspInit+0x178>)
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34
 80038b2:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <HAL_UART_MspInit+0x178>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2105      	movs	r1, #5
 80038bc:	2027      	movs	r0, #39	; 0x27
 80038be:	f001 f819 	bl	80048f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80038c2:	2027      	movs	r0, #39	; 0x27
 80038c4:	f001 f832 	bl	800492c <HAL_NVIC_EnableIRQ>
}
 80038c8:	bf00      	nop
 80038ca:	3730      	adds	r7, #48	; 0x30
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40004400 	.word	0x40004400
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40004800 	.word	0x40004800
 80038e0:	40020400 	.word	0x40020400
 80038e4:	20000a70 	.word	0x20000a70
 80038e8:	40026058 	.word	0x40026058

080038ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038f0:	480d      	ldr	r0, [pc, #52]	; (8003928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038f2:	490e      	ldr	r1, [pc, #56]	; (800392c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f8:	e002      	b.n	8003900 <LoopCopyDataInit>

080038fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fe:	3304      	adds	r3, #4

08003900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003904:	d3f9      	bcc.n	80038fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003908:	4c0b      	ldr	r4, [pc, #44]	; (8003938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800390c:	e001      	b.n	8003912 <LoopFillZerobss>

0800390e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003910:	3204      	adds	r2, #4

08003912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003914:	d3fb      	bcc.n	800390e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003916:	f7ff fb93 	bl	8003040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800391a:	f008 fe7b 	bl	800c614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391e:	f7ff f899 	bl	8002a54 <main>
  bx  lr    
 8003922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800392c:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8003930:	080111a0 	.word	0x080111a0
  ldr r2, =_sbss
 8003934:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8003938:	200054f4 	.word	0x200054f4

0800393c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800393c:	e7fe      	b.n	800393c <ADC_IRQHandler>
	...

08003940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <HAL_Init+0x40>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <HAL_Init+0x40>)
 800394a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800394e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_Init+0x40>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_Init+0x40>)
 8003956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800395a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_Init+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a07      	ldr	r2, [pc, #28]	; (8003980 <HAL_Init+0x40>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003968:	2003      	movs	r0, #3
 800396a:	f000 ffb8 	bl	80048de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800396e:	200f      	movs	r0, #15
 8003970:	f7ff f9fa 	bl	8002d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003974:	f7ff f9cc 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00

08003984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_IncTick+0x20>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_IncTick+0x24>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4413      	add	r3, r2
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_IncTick+0x24>)
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000074 	.word	0x20000074
 80039a8:	20000ad0 	.word	0x20000ad0

080039ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return uwTick;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_GetTick+0x14>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000ad0 	.word	0x20000ad0

080039c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039cc:	f7ff ffee 	bl	80039ac <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d005      	beq.n	80039ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_Delay+0x44>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ea:	bf00      	nop
 80039ec:	f7ff ffde 	bl	80039ac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d8f7      	bhi.n	80039ec <HAL_Delay+0x28>
  {
  }
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000074 	.word	0x20000074

08003a0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0ed      	b.n	8003bfa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd fb2e 	bl	800108c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a40:	f7ff ffb4 	bl	80039ac <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a46:	e012      	b.n	8003a6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a48:	f7ff ffb0 	bl	80039ac <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b0a      	cmp	r3, #10
 8003a54:	d90b      	bls.n	8003a6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2205      	movs	r2, #5
 8003a66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0c5      	b.n	8003bfa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0e5      	beq.n	8003a48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0202 	bic.w	r2, r2, #2
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8c:	f7ff ff8e 	bl	80039ac <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a92:	e012      	b.n	8003aba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a94:	f7ff ff8a 	bl	80039ac <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b0a      	cmp	r3, #10
 8003aa0:	d90b      	bls.n	8003aba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e09f      	b.n	8003bfa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7e1b      	ldrb	r3, [r3, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d108      	bne.n	8003ae2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e007      	b.n	8003af2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7e5b      	ldrb	r3, [r3, #25]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e007      	b.n	8003b1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	7e9b      	ldrb	r3, [r3, #26]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d108      	bne.n	8003b36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0220 	orr.w	r2, r2, #32
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e007      	b.n	8003b46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0220 	bic.w	r2, r2, #32
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7edb      	ldrb	r3, [r3, #27]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d108      	bne.n	8003b60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0210 	bic.w	r2, r2, #16
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e007      	b.n	8003b70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0210 	orr.w	r2, r2, #16
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7f1b      	ldrb	r3, [r3, #28]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d108      	bne.n	8003b8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0208 	orr.w	r2, r2, #8
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e007      	b.n	8003b9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7f5b      	ldrb	r3, [r3, #29]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d108      	bne.n	8003bb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0204 	orr.w	r2, r2, #4
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e007      	b.n	8003bc4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c1a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d003      	beq.n	8003c2a <HAL_CAN_ConfigFilter+0x26>
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	f040 80be 	bne.w	8003da6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_CAN_ConfigFilter+0x1bc>)
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d123      	bne.n	8003cd4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	3248      	adds	r2, #72	; 0x48
 8003cb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cca:	6979      	ldr	r1, [r7, #20]
 8003ccc:	3348      	adds	r3, #72	; 0x48
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d122      	bne.n	8003d22 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003cfc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3248      	adds	r2, #72	; 0x48
 8003d02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d18:	6979      	ldr	r1, [r7, #20]
 8003d1a:	3348      	adds	r3, #72	; 0x48
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	401a      	ands	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d3c:	e007      	b.n	8003d4e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	401a      	ands	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003d68:	e007      	b.n	8003d7a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d98:	f023 0201 	bic.w	r2, r3, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e006      	b.n	8003db4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
  }
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40006400 	.word	0x40006400

08003dc4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d12e      	bne.n	8003e36 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003df0:	f7ff fddc 	bl	80039ac <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003df6:	e012      	b.n	8003e1e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003df8:	f7ff fdd8 	bl	80039ac <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b0a      	cmp	r3, #10
 8003e04:	d90b      	bls.n	8003e1e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2205      	movs	r2, #5
 8003e16:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e012      	b.n	8003e44 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e006      	b.n	8003e44 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
  }
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e60:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d003      	beq.n	8003e78 <HAL_CAN_AddTxMessage+0x2c>
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	f040 80b8 	bne.w	8003fe8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a0 	beq.w	8003fd8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	0e1b      	lsrs	r3, r3, #24
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d907      	bls.n	8003eb8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e09e      	b.n	8003ff6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003eb8:	2201      	movs	r2, #1
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ed4:	68f9      	ldr	r1, [r7, #12]
 8003ed6:	6809      	ldr	r1, [r1, #0]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	3318      	adds	r3, #24
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	440b      	add	r3, r1
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e00f      	b.n	8003f06 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ef0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003efa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3318      	adds	r3, #24
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	440b      	add	r3, r1
 8003f04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	3318      	adds	r3, #24
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	440b      	add	r3, r1
 8003f16:	3304      	adds	r3, #4
 8003f18:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	7d1b      	ldrb	r3, [r3, #20]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d111      	bne.n	8003f46 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3318      	adds	r3, #24
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3304      	adds	r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	6811      	ldr	r1, [r2, #0]
 8003f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	3318      	adds	r3, #24
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	440b      	add	r3, r1
 8003f42:	3304      	adds	r3, #4
 8003f44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3307      	adds	r3, #7
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	061a      	lsls	r2, r3, #24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3306      	adds	r3, #6
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3305      	adds	r3, #5
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	4313      	orrs	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	3204      	adds	r2, #4
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	4610      	mov	r0, r2
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6811      	ldr	r1, [r2, #0]
 8003f6e:	ea43 0200 	orr.w	r2, r3, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	440b      	add	r3, r1
 8003f78:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003f7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3303      	adds	r3, #3
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	061a      	lsls	r2, r3, #24
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3302      	adds	r3, #2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3301      	adds	r3, #1
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	6811      	ldr	r1, [r2, #0]
 8003fa4:	ea43 0200 	orr.w	r2, r3, r0
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003fb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3318      	adds	r3, #24
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	4413      	add	r3, r2
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	6811      	ldr	r1, [r2, #0]
 8003fc6:	f043 0201 	orr.w	r2, r3, #1
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	3318      	adds	r3, #24
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	440b      	add	r3, r1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e00e      	b.n	8003ff6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e006      	b.n	8003ff6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004014:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d002      	beq.n	8004022 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800401c:	7afb      	ldrb	r3, [r7, #11]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d11d      	bne.n	800405e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004080:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d003      	beq.n	8004090 <HAL_CAN_GetRxMessage+0x24>
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b02      	cmp	r3, #2
 800408c:	f040 80f3 	bne.w	8004276 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10e      	bne.n	80040b4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0e7      	b.n	8004284 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0d8      	b.n	8004284 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	331b      	adds	r3, #27
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0204 	and.w	r2, r3, #4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	331b      	adds	r3, #27
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	4413      	add	r3, r2
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0d5b      	lsrs	r3, r3, #21
 8004100:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e00b      	b.n	8004122 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	331b      	adds	r3, #27
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	08db      	lsrs	r3, r3, #3
 800411a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	331b      	adds	r3, #27
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	4413      	add	r3, r2
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0202 	and.w	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	331b      	adds	r3, #27
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	4413      	add	r3, r2
 8004144:	3304      	adds	r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	331b      	adds	r3, #27
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	b2da      	uxtb	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	331b      	adds	r3, #27
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	4413      	add	r3, r2
 800418a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	4413      	add	r3, r2
 80041a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	0a1a      	lsrs	r2, r3, #8
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	3301      	adds	r3, #1
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0c1a      	lsrs	r2, r3, #16
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	3302      	adds	r3, #2
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	0e1a      	lsrs	r2, r3, #24
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	3303      	adds	r3, #3
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	3304      	adds	r3, #4
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	4413      	add	r3, r2
 8004206:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	0a1a      	lsrs	r2, r3, #8
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	3305      	adds	r3, #5
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	4413      	add	r3, r2
 8004220:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	0c1a      	lsrs	r2, r3, #16
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	3306      	adds	r3, #6
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e1a      	lsrs	r2, r3, #24
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	3307      	adds	r3, #7
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0220 	orr.w	r2, r2, #32
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e007      	b.n	8004272 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0220 	orr.w	r2, r2, #32
 8004270:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e006      	b.n	8004284 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d002      	beq.n	80042ae <HAL_CAN_ActivateNotification+0x1e>
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d109      	bne.n	80042c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6959      	ldr	r1, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e006      	b.n	80042d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d07c      	beq.n	800441c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d023      	beq.n	8004374 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f983 	bl	800464a <HAL_CAN_TxMailbox0CompleteCallback>
 8004344:	e016      	b.n	8004374 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	e00c      	b.n	8004374 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	e002      	b.n	8004374 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f989 	bl	8004686 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d024      	beq.n	80043c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004386:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f963 	bl	800465e <HAL_CAN_TxMailbox1CompleteCallback>
 8004398:	e016      	b.n	80043c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	e00c      	b.n	80043c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	e002      	b.n	80043c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f969 	bl	800469a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d024      	beq.n	800441c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f943 	bl	8004672 <HAL_CAN_TxMailbox2CompleteCallback>
 80043ec:	e016      	b.n	800441c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004400:	e00c      	b.n	800441c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	e002      	b.n	800441c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f949 	bl	80046ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004436:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2210      	movs	r2, #16
 800443e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d006      	beq.n	8004462 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2208      	movs	r2, #8
 800445a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f930 	bl	80046c2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fd f8b6 	bl	80015ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800449a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2210      	movs	r2, #16
 80044a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2208      	movs	r2, #8
 80044be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f912 	bl	80046ea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f8f9 	bl	80046d6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2210      	movs	r2, #16
 80044fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8fc 	bl	80046fe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d006      	beq.n	8004528 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2208      	movs	r2, #8
 8004520:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8f5 	bl	8004712 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d07b      	beq.n	800462a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d072      	beq.n	8004622 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f043 0302 	orr.w	r3, r3, #2
 8004572:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004596:	2b00      	cmp	r3, #0
 8004598:	d043      	beq.n	8004622 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03e      	beq.n	8004622 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045aa:	2b60      	cmp	r3, #96	; 0x60
 80045ac:	d02b      	beq.n	8004606 <HAL_CAN_IRQHandler+0x32a>
 80045ae:	2b60      	cmp	r3, #96	; 0x60
 80045b0:	d82e      	bhi.n	8004610 <HAL_CAN_IRQHandler+0x334>
 80045b2:	2b50      	cmp	r3, #80	; 0x50
 80045b4:	d022      	beq.n	80045fc <HAL_CAN_IRQHandler+0x320>
 80045b6:	2b50      	cmp	r3, #80	; 0x50
 80045b8:	d82a      	bhi.n	8004610 <HAL_CAN_IRQHandler+0x334>
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d019      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x316>
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d826      	bhi.n	8004610 <HAL_CAN_IRQHandler+0x334>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d010      	beq.n	80045e8 <HAL_CAN_IRQHandler+0x30c>
 80045c6:	2b30      	cmp	r3, #48	; 0x30
 80045c8:	d822      	bhi.n	8004610 <HAL_CAN_IRQHandler+0x334>
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d002      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x2f8>
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d005      	beq.n	80045de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80045d2:	e01d      	b.n	8004610 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	f043 0308 	orr.w	r3, r3, #8
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045dc:	e019      	b.n	8004612 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	f043 0310 	orr.w	r3, r3, #16
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045e6:	e014      	b.n	8004612 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	f043 0320 	orr.w	r3, r3, #32
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045f0:	e00f      	b.n	8004612 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045fa:	e00a      	b.n	8004612 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004604:	e005      	b.n	8004612 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800460e:	e000      	b.n	8004612 <HAL_CAN_IRQHandler+0x336>
            break;
 8004610:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004620:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2204      	movs	r2, #4
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f872 	bl	8004726 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004642:	bf00      	nop
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	; (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0b      	blt.n	80047ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <__NVIC_EnableIRQ+0x38>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	e000e100 	.word	0xe000e100

080047dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db12      	blt.n	8004814 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	490a      	ldr	r1, [pc, #40]	; (8004820 <__NVIC_DisableIRQ+0x44>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	3320      	adds	r3, #32
 8004804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004808:	f3bf 8f4f 	dsb	sy
}
 800480c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800480e:	f3bf 8f6f 	isb	sy
}
 8004812:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000e100 	.word	0xe000e100

08004824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db0a      	blt.n	800484e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	490c      	ldr	r1, [pc, #48]	; (8004870 <__NVIC_SetPriority+0x4c>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	440b      	add	r3, r1
 8004848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800484c:	e00a      	b.n	8004864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4908      	ldr	r1, [pc, #32]	; (8004874 <__NVIC_SetPriority+0x50>)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3b04      	subs	r3, #4
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	440b      	add	r3, r1
 8004862:	761a      	strb	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000e100 	.word	0xe000e100
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f1c3 0307 	rsb	r3, r3, #7
 8004892:	2b04      	cmp	r3, #4
 8004894:	bf28      	it	cs
 8004896:	2304      	movcs	r3, #4
 8004898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3304      	adds	r3, #4
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d902      	bls.n	80048a8 <NVIC_EncodePriority+0x30>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3b03      	subs	r3, #3
 80048a6:	e000      	b.n	80048aa <NVIC_EncodePriority+0x32>
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	401a      	ands	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	43d9      	mvns	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d0:	4313      	orrs	r3, r2
         );
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ff28 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004906:	f7ff ff3d 	bl	8004784 <__NVIC_GetPriorityGrouping>
 800490a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	6978      	ldr	r0, [r7, #20]
 8004912:	f7ff ffb1 	bl	8004878 <NVIC_EncodePriority>
 8004916:	4602      	mov	r2, r0
 8004918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff80 	bl	8004824 <__NVIC_SetPriority>
}
 8004924:	bf00      	nop
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff ff30 	bl	80047a0 <__NVIC_EnableIRQ>
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff40 	bl	80047dc <__NVIC_DisableIRQ>
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004970:	f7ff f81c 	bl	80039ac <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e099      	b.n	8004ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a0:	e00f      	b.n	80049c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a2:	f7ff f803 	bl	80039ac <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d908      	bls.n	80049c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2203      	movs	r2, #3
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e078      	b.n	8004ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e8      	bne.n	80049a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_DMA_Init+0x158>)
 80049dc:	4013      	ands	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d107      	bne.n	8004a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	4313      	orrs	r3, r2
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d117      	bne.n	8004a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb01 	bl	8005070 <DMA_CheckFifoParam>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a82:	2301      	movs	r3, #1
 8004a84:	e016      	b.n	8004ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fab8 	bl	8005004 <DMA_CalcBaseAndBitshift>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	223f      	movs	r2, #63	; 0x3f
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	f010803f 	.word	0xf010803f

08004ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DMA_Start_IT+0x26>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e040      	b.n	8004b68 <HAL_DMA_Start_IT+0xa8>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d12f      	bne.n	8004b5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa4a 	bl	8004fa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	223f      	movs	r2, #63	; 0x3f
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0216 	orr.w	r2, r2, #22
 8004b2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e005      	b.n	8004b66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
 8004b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b7e:	f7fe ff15 	bl	80039ac <HAL_GetTick>
 8004b82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e052      	b.n	8004c48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0216 	bic.w	r2, r2, #22
 8004bb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <HAL_DMA_Abort+0x62>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0208 	bic.w	r2, r2, #8
 8004be0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf2:	e013      	b.n	8004c1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bf4:	f7fe feda 	bl	80039ac <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b05      	cmp	r3, #5
 8004c00:	d90c      	bls.n	8004c1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e015      	b.n	8004c48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e4      	bne.n	8004bf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	223f      	movs	r2, #63	; 0x3f
 8004c30:	409a      	lsls	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d004      	beq.n	8004c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e00c      	b.n	8004c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2205      	movs	r2, #5
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ca0:	4b8e      	ldr	r3, [pc, #568]	; (8004edc <HAL_DMA_IRQHandler+0x248>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a8e      	ldr	r2, [pc, #568]	; (8004ee0 <HAL_DMA_IRQHandler+0x24c>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	0a9b      	lsrs	r3, r3, #10
 8004cac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01a      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d013      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	2208      	movs	r2, #8
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	2201      	movs	r2, #1
 8004d06:	409a      	lsls	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	2201      	movs	r2, #1
 8004d24:	409a      	lsls	r2, r3
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f043 0202 	orr.w	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d012      	beq.n	8004d6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d58:	2204      	movs	r2, #4
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	2210      	movs	r2, #16
 8004d72:	409a      	lsls	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d043      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d03c      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	2210      	movs	r2, #16
 8004d90:	409a      	lsls	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d018      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d024      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
 8004dc2:	e01f      	b.n	8004e04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
 8004dd4:	e016      	b.n	8004e04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0208 	bic.w	r2, r2, #8
 8004df2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	2220      	movs	r2, #32
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 808f 	beq.w	8004f34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8087 	beq.w	8004f34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	d136      	bne.n	8004eac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0216 	bic.w	r2, r2, #22
 8004e4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d103      	bne.n	8004e6e <HAL_DMA_IRQHandler+0x1da>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0208 	bic.w	r2, r2, #8
 8004e7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	223f      	movs	r2, #63	; 0x3f
 8004e84:	409a      	lsls	r2, r3
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d07e      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
        }
        return;
 8004eaa:	e079      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01d      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10d      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d031      	beq.n	8004f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
 8004ed8:	e02c      	b.n	8004f34 <HAL_DMA_IRQHandler+0x2a0>
 8004eda:	bf00      	nop
 8004edc:	2000006c 	.word	0x2000006c
 8004ee0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d023      	beq.n	8004f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
 8004ef4:	e01e      	b.n	8004f34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10f      	bne.n	8004f24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0210 	bic.w	r2, r2, #16
 8004f12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d032      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d022      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2205      	movs	r2, #5
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d307      	bcc.n	8004f7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f2      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x2cc>
 8004f7a:	e000      	b.n	8004f7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	e000      	b.n	8004fa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004fa0:	bf00      	nop
    }
  }
}
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d108      	bne.n	8004fe8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fe6:	e007      	b.n	8004ff8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	3b10      	subs	r3, #16
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <DMA_CalcBaseAndBitshift+0x64>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800501e:	4a13      	ldr	r2, [pc, #76]	; (800506c <DMA_CalcBaseAndBitshift+0x68>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d909      	bls.n	8005046 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	659a      	str	r2, [r3, #88]	; 0x58
 8005044:	e007      	b.n	8005056 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	aaaaaaab 	.word	0xaaaaaaab
 800506c:	08010b64 	.word	0x08010b64

08005070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11f      	bne.n	80050ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d856      	bhi.n	800513e <DMA_CheckFifoParam+0xce>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <DMA_CheckFifoParam+0x28>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050bb 	.word	0x080050bb
 80050a0:	080050a9 	.word	0x080050a9
 80050a4:	0800513f 	.word	0x0800513f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d046      	beq.n	8005142 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b8:	e043      	b.n	8005142 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050c2:	d140      	bne.n	8005146 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c8:	e03d      	b.n	8005146 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d2:	d121      	bne.n	8005118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d837      	bhi.n	800514a <DMA_CheckFifoParam+0xda>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <DMA_CheckFifoParam+0x70>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f1 	.word	0x080050f1
 80050e4:	080050f7 	.word	0x080050f7
 80050e8:	080050f1 	.word	0x080050f1
 80050ec:	08005109 	.word	0x08005109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e030      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d025      	beq.n	800514e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005106:	e022      	b.n	800514e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005110:	d11f      	bne.n	8005152 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005116:	e01c      	b.n	8005152 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d903      	bls.n	8005126 <DMA_CheckFifoParam+0xb6>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d003      	beq.n	800512c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005124:	e018      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
      break;
 800512a:	e015      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      break;
 800513c:	e00b      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;
 800513e:	bf00      	nop
 8005140:	e00a      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 8005142:	bf00      	nop
 8005144:	e008      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 8005146:	bf00      	nop
 8005148:	e006      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 800514a:	bf00      	nop
 800514c:	e004      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 800514e:	bf00      	nop
 8005150:	e002      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;   
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 8005156:	bf00      	nop
    }
  } 
  
  return status; 
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e16b      	b.n	800545c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005184:	2201      	movs	r2, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	f040 815a 	bne.w	8005456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d005      	beq.n	80051ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d130      	bne.n	800521c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2203      	movs	r2, #3
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 0201 	and.w	r2, r3, #1
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	2b03      	cmp	r3, #3
 8005226:	d017      	beq.n	8005258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d123      	bne.n	80052ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	08da      	lsrs	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3208      	adds	r2, #8
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	220f      	movs	r2, #15
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	08da      	lsrs	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3208      	adds	r2, #8
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	2203      	movs	r2, #3
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4013      	ands	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0203 	and.w	r2, r3, #3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80b4 	beq.w	8005456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	4b60      	ldr	r3, [pc, #384]	; (8005474 <HAL_GPIO_Init+0x30c>)
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	4a5f      	ldr	r2, [pc, #380]	; (8005474 <HAL_GPIO_Init+0x30c>)
 80052f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052fc:	6453      	str	r3, [r2, #68]	; 0x44
 80052fe:	4b5d      	ldr	r3, [pc, #372]	; (8005474 <HAL_GPIO_Init+0x30c>)
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800530a:	4a5b      	ldr	r2, [pc, #364]	; (8005478 <HAL_GPIO_Init+0x310>)
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	3302      	adds	r3, #2
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	220f      	movs	r2, #15
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a52      	ldr	r2, [pc, #328]	; (800547c <HAL_GPIO_Init+0x314>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d02b      	beq.n	800538e <HAL_GPIO_Init+0x226>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a51      	ldr	r2, [pc, #324]	; (8005480 <HAL_GPIO_Init+0x318>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d025      	beq.n	800538a <HAL_GPIO_Init+0x222>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a50      	ldr	r2, [pc, #320]	; (8005484 <HAL_GPIO_Init+0x31c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01f      	beq.n	8005386 <HAL_GPIO_Init+0x21e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4f      	ldr	r2, [pc, #316]	; (8005488 <HAL_GPIO_Init+0x320>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d019      	beq.n	8005382 <HAL_GPIO_Init+0x21a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4e      	ldr	r2, [pc, #312]	; (800548c <HAL_GPIO_Init+0x324>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_GPIO_Init+0x216>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4d      	ldr	r2, [pc, #308]	; (8005490 <HAL_GPIO_Init+0x328>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00d      	beq.n	800537a <HAL_GPIO_Init+0x212>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4c      	ldr	r2, [pc, #304]	; (8005494 <HAL_GPIO_Init+0x32c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d007      	beq.n	8005376 <HAL_GPIO_Init+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a4b      	ldr	r2, [pc, #300]	; (8005498 <HAL_GPIO_Init+0x330>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_GPIO_Init+0x20a>
 800536e:	2307      	movs	r3, #7
 8005370:	e00e      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005372:	2308      	movs	r3, #8
 8005374:	e00c      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005376:	2306      	movs	r3, #6
 8005378:	e00a      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800537a:	2305      	movs	r3, #5
 800537c:	e008      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800537e:	2304      	movs	r3, #4
 8005380:	e006      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005382:	2303      	movs	r3, #3
 8005384:	e004      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005386:	2302      	movs	r3, #2
 8005388:	e002      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800538e:	2300      	movs	r3, #0
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	f002 0203 	and.w	r2, r2, #3
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	4093      	lsls	r3, r2
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a0:	4935      	ldr	r1, [pc, #212]	; (8005478 <HAL_GPIO_Init+0x310>)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	3302      	adds	r3, #2
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ae:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_GPIO_Init+0x334>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053d2:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_GPIO_Init+0x334>)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053d8:	4b30      	ldr	r3, [pc, #192]	; (800549c <HAL_GPIO_Init+0x334>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053fc:	4a27      	ldr	r2, [pc, #156]	; (800549c <HAL_GPIO_Init+0x334>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005402:	4b26      	ldr	r3, [pc, #152]	; (800549c <HAL_GPIO_Init+0x334>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005426:	4a1d      	ldr	r2, [pc, #116]	; (800549c <HAL_GPIO_Init+0x334>)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_GPIO_Init+0x334>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <HAL_GPIO_Init+0x334>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	f67f ae90 	bls.w	8005184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	3724      	adds	r7, #36	; 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	40013800 	.word	0x40013800
 800547c:	40020000 	.word	0x40020000
 8005480:	40020400 	.word	0x40020400
 8005484:	40020800 	.word	0x40020800
 8005488:	40020c00 	.word	0x40020c00
 800548c:	40021000 	.word	0x40021000
 8005490:	40021400 	.word	0x40021400
 8005494:	40021800 	.word	0x40021800
 8005498:	40021c00 	.word	0x40021c00
 800549c:	40013c00 	.word	0x40013c00

080054a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	e001      	b.n	80054c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	807b      	strh	r3, [r7, #2]
 80054dc:	4613      	mov	r3, r2
 80054de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054e0:	787b      	ldrb	r3, [r7, #1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054ec:	e003      	b.n	80054f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ee:	887b      	ldrh	r3, [r7, #2]
 80054f0:	041a      	lsls	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	619a      	str	r2, [r3, #24]
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005514:	887a      	ldrh	r2, [r7, #2]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4013      	ands	r3, r2
 800551a:	041a      	lsls	r2, r3, #16
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	43d9      	mvns	r1, r3
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	400b      	ands	r3, r1
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	619a      	str	r2, [r3, #24]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800554e:	4a05      	ldr	r2, [pc, #20]	; (8005564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fc f8f0 	bl	800173c <HAL_GPIO_EXTI_Callback>
  }
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40013c00 	.word	0x40013c00

08005568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e267      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d075      	beq.n	8005672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005586:	4b88      	ldr	r3, [pc, #544]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b04      	cmp	r3, #4
 8005590:	d00c      	beq.n	80055ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005592:	4b85      	ldr	r3, [pc, #532]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800559a:	2b08      	cmp	r3, #8
 800559c:	d112      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800559e:	4b82      	ldr	r3, [pc, #520]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055aa:	d10b      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ac:	4b7e      	ldr	r3, [pc, #504]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d05b      	beq.n	8005670 <HAL_RCC_OscConfig+0x108>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d157      	bne.n	8005670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e242      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055cc:	d106      	bne.n	80055dc <HAL_RCC_OscConfig+0x74>
 80055ce:	4b76      	ldr	r3, [pc, #472]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a75      	ldr	r2, [pc, #468]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e01d      	b.n	8005618 <HAL_RCC_OscConfig+0xb0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCC_OscConfig+0x98>
 80055e6:	4b70      	ldr	r3, [pc, #448]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6f      	ldr	r2, [pc, #444]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	4b6d      	ldr	r3, [pc, #436]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a6c      	ldr	r2, [pc, #432]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e00b      	b.n	8005618 <HAL_RCC_OscConfig+0xb0>
 8005600:	4b69      	ldr	r3, [pc, #420]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a68      	ldr	r2, [pc, #416]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4b66      	ldr	r3, [pc, #408]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a65      	ldr	r2, [pc, #404]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d013      	beq.n	8005648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fe f9c4 	bl	80039ac <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005628:	f7fe f9c0 	bl	80039ac <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e207      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	4b5b      	ldr	r3, [pc, #364]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0xc0>
 8005646:	e014      	b.n	8005672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fe f9b0 	bl	80039ac <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005650:	f7fe f9ac 	bl	80039ac <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	; 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e1f3      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005662:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0xe8>
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d063      	beq.n	8005746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800567e:	4b4a      	ldr	r3, [pc, #296]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800568a:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005692:	2b08      	cmp	r3, #8
 8005694:	d11c      	bne.n	80056d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005696:	4b44      	ldr	r3, [pc, #272]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d116      	bne.n	80056d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_RCC_OscConfig+0x152>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d001      	beq.n	80056ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e1c7      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ba:	4b3b      	ldr	r3, [pc, #236]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4937      	ldr	r1, [pc, #220]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ce:	e03a      	b.n	8005746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d020      	beq.n	800571a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d8:	4b34      	ldr	r3, [pc, #208]	; (80057ac <HAL_RCC_OscConfig+0x244>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fe f965 	bl	80039ac <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e6:	f7fe f961 	bl	80039ac <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e1a8      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f8:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005704:	4b28      	ldr	r3, [pc, #160]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4925      	ldr	r1, [pc, #148]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
 8005718:	e015      	b.n	8005746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571a:	4b24      	ldr	r3, [pc, #144]	; (80057ac <HAL_RCC_OscConfig+0x244>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fe f944 	bl	80039ac <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005728:	f7fe f940 	bl	80039ac <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e187      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d036      	beq.n	80057c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <HAL_RCC_OscConfig+0x248>)
 800575c:	2201      	movs	r2, #1
 800575e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005760:	f7fe f924 	bl	80039ac <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005768:	f7fe f920 	bl	80039ac <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e167      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCC_OscConfig+0x240>)
 800577c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0x200>
 8005786:	e01b      	b.n	80057c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <HAL_RCC_OscConfig+0x248>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578e:	f7fe f90d 	bl	80039ac <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005794:	e00e      	b.n	80057b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005796:	f7fe f909 	bl	80039ac <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d907      	bls.n	80057b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e150      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
 80057a8:	40023800 	.word	0x40023800
 80057ac:	42470000 	.word	0x42470000
 80057b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b4:	4b88      	ldr	r3, [pc, #544]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80057b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ea      	bne.n	8005796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8097 	beq.w	80058fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d2:	4b81      	ldr	r3, [pc, #516]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	4b7d      	ldr	r3, [pc, #500]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	4a7c      	ldr	r2, [pc, #496]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80057e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ec:	6413      	str	r3, [r2, #64]	; 0x40
 80057ee:	4b7a      	ldr	r3, [pc, #488]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	60bb      	str	r3, [r7, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fe:	4b77      	ldr	r3, [pc, #476]	; (80059dc <HAL_RCC_OscConfig+0x474>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d118      	bne.n	800583c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800580a:	4b74      	ldr	r3, [pc, #464]	; (80059dc <HAL_RCC_OscConfig+0x474>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a73      	ldr	r2, [pc, #460]	; (80059dc <HAL_RCC_OscConfig+0x474>)
 8005810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005816:	f7fe f8c9 	bl	80039ac <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581e:	f7fe f8c5 	bl	80039ac <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e10c      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005830:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <HAL_RCC_OscConfig+0x474>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d106      	bne.n	8005852 <HAL_RCC_OscConfig+0x2ea>
 8005844:	4b64      	ldr	r3, [pc, #400]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	4a63      	ldr	r2, [pc, #396]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	6713      	str	r3, [r2, #112]	; 0x70
 8005850:	e01c      	b.n	800588c <HAL_RCC_OscConfig+0x324>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b05      	cmp	r3, #5
 8005858:	d10c      	bne.n	8005874 <HAL_RCC_OscConfig+0x30c>
 800585a:	4b5f      	ldr	r3, [pc, #380]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	4a5e      	ldr	r2, [pc, #376]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005860:	f043 0304 	orr.w	r3, r3, #4
 8005864:	6713      	str	r3, [r2, #112]	; 0x70
 8005866:	4b5c      	ldr	r3, [pc, #368]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	4a5b      	ldr	r2, [pc, #364]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	6713      	str	r3, [r2, #112]	; 0x70
 8005872:	e00b      	b.n	800588c <HAL_RCC_OscConfig+0x324>
 8005874:	4b58      	ldr	r3, [pc, #352]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	4a57      	ldr	r2, [pc, #348]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	6713      	str	r3, [r2, #112]	; 0x70
 8005880:	4b55      	ldr	r3, [pc, #340]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	4a54      	ldr	r2, [pc, #336]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005886:	f023 0304 	bic.w	r3, r3, #4
 800588a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d015      	beq.n	80058c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fe f88a 	bl	80039ac <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fe f886 	bl	80039ac <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e0cb      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b2:	4b49      	ldr	r3, [pc, #292]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ee      	beq.n	800589c <HAL_RCC_OscConfig+0x334>
 80058be:	e014      	b.n	80058ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c0:	f7fe f874 	bl	80039ac <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c6:	e00a      	b.n	80058de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c8:	f7fe f870 	bl	80039ac <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e0b5      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058de:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ee      	bne.n	80058c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d105      	bne.n	80058fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f0:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	4a38      	ldr	r2, [pc, #224]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80058f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80a1 	beq.w	8005a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005906:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b08      	cmp	r3, #8
 8005910:	d05c      	beq.n	80059cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d141      	bne.n	800599e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <HAL_RCC_OscConfig+0x478>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7fe f844 	bl	80039ac <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005928:	f7fe f840 	bl	80039ac <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e087      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593a:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	019b      	lsls	r3, r3, #6
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	3b01      	subs	r3, #1
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	491b      	ldr	r1, [pc, #108]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005970:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <HAL_RCC_OscConfig+0x478>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fe f819 	bl	80039ac <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597e:	f7fe f815 	bl	80039ac <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e05c      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x416>
 800599c:	e054      	b.n	8005a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <HAL_RCC_OscConfig+0x478>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fe f802 	bl	80039ac <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fd fffe 	bl	80039ac <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e045      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <HAL_RCC_OscConfig+0x470>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x444>
 80059ca:	e03d      	b.n	8005a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e038      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40007000 	.word	0x40007000
 80059e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059e4:	4b1b      	ldr	r3, [pc, #108]	; (8005a54 <HAL_RCC_OscConfig+0x4ec>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d028      	beq.n	8005a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d121      	bne.n	8005a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d11a      	bne.n	8005a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a14:	4013      	ands	r3, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d111      	bne.n	8005a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d107      	bne.n	8005a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40023800 	.word	0x40023800

08005a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0cc      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b68      	ldr	r3, [pc, #416]	; (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d90c      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b65      	ldr	r3, [pc, #404]	; (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b63      	ldr	r3, [pc, #396]	; (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0b8      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aac:	4b59      	ldr	r3, [pc, #356]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4a58      	ldr	r2, [pc, #352]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac4:	4b53      	ldr	r3, [pc, #332]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4a52      	ldr	r2, [pc, #328]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad0:	4b50      	ldr	r3, [pc, #320]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	494d      	ldr	r1, [pc, #308]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d044      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	4b47      	ldr	r3, [pc, #284]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d119      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e07f      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d003      	beq.n	8005b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b16:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e06f      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b26:	4b3b      	ldr	r3, [pc, #236]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e067      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b36:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f023 0203 	bic.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4934      	ldr	r1, [pc, #208]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b48:	f7fd ff30 	bl	80039ac <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b50:	f7fd ff2c 	bl	80039ac <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e04f      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	4b2b      	ldr	r3, [pc, #172]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 020c 	and.w	r2, r3, #12
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d1eb      	bne.n	8005b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b78:	4b25      	ldr	r3, [pc, #148]	; (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d20c      	bcs.n	8005ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b22      	ldr	r3, [pc, #136]	; (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e032      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4916      	ldr	r1, [pc, #88]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	490e      	ldr	r1, [pc, #56]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bde:	f000 f821 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 8005be2:	4602      	mov	r2, r0
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	490a      	ldr	r1, [pc, #40]	; (8005c18 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf0:	5ccb      	ldrb	r3, [r1, r3]
 8005bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fd f8b2 	bl	8002d68 <HAL_InitTick>

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023c00 	.word	0x40023c00
 8005c14:	40023800 	.word	0x40023800
 8005c18:	08010b4c 	.word	0x08010b4c
 8005c1c:	2000006c 	.word	0x2000006c
 8005c20:	20000070 	.word	0x20000070

08005c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c28:	b090      	sub	sp, #64	; 0x40
 8005c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c30:	2300      	movs	r3, #0
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c34:	2300      	movs	r3, #0
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c3c:	4b59      	ldr	r3, [pc, #356]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 030c 	and.w	r3, r3, #12
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d00d      	beq.n	8005c64 <HAL_RCC_GetSysClockFreq+0x40>
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	f200 80a1 	bhi.w	8005d90 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x34>
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d003      	beq.n	8005c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c56:	e09b      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c58:	4b53      	ldr	r3, [pc, #332]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c5c:	e09b      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c5e:	4b53      	ldr	r3, [pc, #332]	; (8005dac <HAL_RCC_GetSysClockFreq+0x188>)
 8005c60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c62:	e098      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c64:	4b4f      	ldr	r3, [pc, #316]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c6e:	4b4d      	ldr	r3, [pc, #308]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d028      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7a:	4b4a      	ldr	r3, [pc, #296]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	099b      	lsrs	r3, r3, #6
 8005c80:	2200      	movs	r2, #0
 8005c82:	623b      	str	r3, [r7, #32]
 8005c84:	627a      	str	r2, [r7, #36]	; 0x24
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCC_GetSysClockFreq+0x188>)
 8005c90:	fb03 f201 	mul.w	r2, r3, r1
 8005c94:	2300      	movs	r3, #0
 8005c96:	fb00 f303 	mul.w	r3, r0, r3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4a43      	ldr	r2, [pc, #268]	; (8005dac <HAL_RCC_GetSysClockFreq+0x188>)
 8005c9e:	fba0 1202 	umull	r1, r2, r0, r2
 8005ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005caa:	4413      	add	r3, r2
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	61fa      	str	r2, [r7, #28]
 8005cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005cbe:	f7fa ff73 	bl	8000ba8 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cca:	e053      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ccc:	4b35      	ldr	r3, [pc, #212]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	617a      	str	r2, [r7, #20]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005cde:	f04f 0b00 	mov.w	fp, #0
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	465b      	mov	r3, fp
 8005ce6:	f04f 0000 	mov.w	r0, #0
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	0159      	lsls	r1, r3, #5
 8005cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf4:	0150      	lsls	r0, r2, #5
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	ebb2 080a 	subs.w	r8, r2, sl
 8005cfe:	eb63 090b 	sbc.w	r9, r3, fp
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d16:	ebb2 0408 	subs.w	r4, r2, r8
 8005d1a:	eb63 0509 	sbc.w	r5, r3, r9
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	00eb      	lsls	r3, r5, #3
 8005d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d2c:	00e2      	lsls	r2, r4, #3
 8005d2e:	4614      	mov	r4, r2
 8005d30:	461d      	mov	r5, r3
 8005d32:	eb14 030a 	adds.w	r3, r4, sl
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	eb45 030b 	adc.w	r3, r5, fp
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	028b      	lsls	r3, r1, #10
 8005d4e:	4621      	mov	r1, r4
 8005d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d54:	4621      	mov	r1, r4
 8005d56:	028a      	lsls	r2, r1, #10
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5e:	2200      	movs	r2, #0
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	60fa      	str	r2, [r7, #12]
 8005d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d68:	f7fa ff1e 	bl	8000ba8 <__aeabi_uldivmod>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4613      	mov	r3, r2
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d74:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d8e:	e002      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3740      	adds	r7, #64	; 0x40
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da2:	bf00      	nop
 8005da4:	40023800 	.word	0x40023800
 8005da8:	00f42400 	.word	0x00f42400
 8005dac:	00b71b00 	.word	0x00b71b00

08005db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005db6:	681b      	ldr	r3, [r3, #0]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	2000006c 	.word	0x2000006c

08005dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dcc:	f7ff fff0 	bl	8005db0 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0a9b      	lsrs	r3, r3, #10
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4903      	ldr	r1, [pc, #12]	; (8005dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40023800 	.word	0x40023800
 8005dec:	08010b5c 	.word	0x08010b5c

08005df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005df4:	f7ff ffdc 	bl	8005db0 <HAL_RCC_GetHCLKFreq>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	0b5b      	lsrs	r3, r3, #13
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	4903      	ldr	r1, [pc, #12]	; (8005e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e06:	5ccb      	ldrb	r3, [r1, r3]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40023800 	.word	0x40023800
 8005e14:	08010b5c 	.word	0x08010b5c

08005e18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	220f      	movs	r2, #15
 8005e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0203 	and.w	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	08db      	lsrs	r3, r3, #3
 8005e52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <HAL_RCC_GetClockConfig+0x60>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0207 	and.w	r2, r3, #7
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	601a      	str	r2, [r3, #0]
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800
 8005e78:	40023c00 	.word	0x40023c00

08005e7c <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e0a1      	b.n	8005fda <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fd76 	bl	800299c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7ff ff7e 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8005ecc:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4a44      	ldr	r2, [pc, #272]	; (8005fe4 <HAL_SMBUS_Init+0x168>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	0c9b      	lsrs	r3, r3, #18
 8005ed8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8005f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6852      	ldr	r2, [r2, #4]
 8005f16:	0052      	lsls	r2, r2, #1
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	fbb1 f1f2 	udiv	r1, r1, r2
 8005f1e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005f22:	400a      	ands	r2, r1
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	d006      	beq.n	8005f36 <HAL_SMBUS_Init+0xba>
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6852      	ldr	r2, [r2, #4]
 8005f2c:	0052      	lsls	r2, r2, #1
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	fbb1 f2f2 	udiv	r2, r1, r2
 8005f34:	e000      	b.n	8005f38 <HAL_SMBUS_Init+0xbc>
 8005f36:	2204      	movs	r2, #4
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	6809      	ldr	r1, [r1, #0]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6911      	ldr	r1, [r2, #16]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68d2      	ldr	r2, [r2, #12]
 8005f7e:	4311      	orrs	r1, r2
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	431bde83 	.word	0x431bde83

08005fe8 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8006008:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006018:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e041      	b.n	80060be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fd fa42 	bl	80034d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f001 f812 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d001      	beq.n	80060e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e04e      	b.n	800617e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a23      	ldr	r2, [pc, #140]	; (800618c <HAL_TIM_Base_Start_IT+0xc4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d01d      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <HAL_TIM_Base_Start_IT+0xc8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <HAL_TIM_Base_Start_IT+0xcc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <HAL_TIM_Base_Start_IT+0xd0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_TIM_Base_Start_IT+0xd4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d111      	bne.n	800616c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b06      	cmp	r3, #6
 8006158:	d010      	beq.n	800617c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	e007      	b.n	800617c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40001800 	.word	0x40001800

080061a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e041      	b.n	800623e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fd f93a 	bl	8003448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f000 ff52 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <HAL_TIM_PWM_Start+0x24>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	bf14      	ite	ne
 8006264:	2301      	movne	r3, #1
 8006266:	2300      	moveq	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	e022      	b.n	80062b2 <HAL_TIM_PWM_Start+0x6a>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d109      	bne.n	8006286 <HAL_TIM_PWM_Start+0x3e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	bf14      	ite	ne
 800627e:	2301      	movne	r3, #1
 8006280:	2300      	moveq	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	e015      	b.n	80062b2 <HAL_TIM_PWM_Start+0x6a>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d109      	bne.n	80062a0 <HAL_TIM_PWM_Start+0x58>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e008      	b.n	80062b2 <HAL_TIM_PWM_Start+0x6a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	bf14      	ite	ne
 80062ac:	2301      	movne	r3, #1
 80062ae:	2300      	moveq	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e07c      	b.n	80063b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <HAL_TIM_PWM_Start+0x82>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c8:	e013      	b.n	80062f2 <HAL_TIM_PWM_Start+0xaa>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d104      	bne.n	80062da <HAL_TIM_PWM_Start+0x92>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d8:	e00b      	b.n	80062f2 <HAL_TIM_PWM_Start+0xaa>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start+0xa2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e8:	e003      	b.n	80062f2 <HAL_TIM_PWM_Start+0xaa>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2201      	movs	r2, #1
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fadc 	bl	80078b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a2d      	ldr	r2, [pc, #180]	; (80063bc <HAL_TIM_PWM_Start+0x174>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIM_PWM_Start+0xcc>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a2c      	ldr	r2, [pc, #176]	; (80063c0 <HAL_TIM_PWM_Start+0x178>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d101      	bne.n	8006318 <HAL_TIM_PWM_Start+0xd0>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <HAL_TIM_PWM_Start+0xd2>
 8006318:	2300      	movs	r3, #0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800632c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a22      	ldr	r2, [pc, #136]	; (80063bc <HAL_TIM_PWM_Start+0x174>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_TIM_PWM_Start+0x136>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d01d      	beq.n	800637e <HAL_TIM_PWM_Start+0x136>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <HAL_TIM_PWM_Start+0x17c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_TIM_PWM_Start+0x136>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <HAL_TIM_PWM_Start+0x180>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_TIM_PWM_Start+0x136>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <HAL_TIM_PWM_Start+0x184>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_TIM_PWM_Start+0x136>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <HAL_TIM_PWM_Start+0x178>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_TIM_PWM_Start+0x136>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_TIM_PWM_Start+0x188>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIM_PWM_Start+0x136>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_TIM_PWM_Start+0x18c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d111      	bne.n	80063a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b06      	cmp	r3, #6
 800638e:	d010      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a0:	e007      	b.n	80063b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0201 	orr.w	r2, r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40001800 	.word	0x40001800

080063d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <HAL_TIM_PWM_Start_DMA+0x2c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	e022      	b.n	800644a <HAL_TIM_PWM_Start_DMA+0x72>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b04      	cmp	r3, #4
 8006408:	d109      	bne.n	800641e <HAL_TIM_PWM_Start_DMA+0x46>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	bf0c      	ite	eq
 8006416:	2301      	moveq	r3, #1
 8006418:	2300      	movne	r3, #0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	e015      	b.n	800644a <HAL_TIM_PWM_Start_DMA+0x72>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d109      	bne.n	8006438 <HAL_TIM_PWM_Start_DMA+0x60>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	e008      	b.n	800644a <HAL_TIM_PWM_Start_DMA+0x72>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800644e:	2302      	movs	r3, #2
 8006450:	e171      	b.n	8006736 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <HAL_TIM_PWM_Start_DMA+0x94>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e022      	b.n	80064b2 <HAL_TIM_PWM_Start_DMA+0xda>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d109      	bne.n	8006486 <HAL_TIM_PWM_Start_DMA+0xae>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	e015      	b.n	80064b2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d109      	bne.n	80064a0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf0c      	ite	eq
 8006498:	2301      	moveq	r3, #1
 800649a:	2300      	movne	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	e008      	b.n	80064b2 <HAL_TIM_PWM_Start_DMA+0xda>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	bf0c      	ite	eq
 80064ac:	2301      	moveq	r3, #1
 80064ae:	2300      	movne	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d024      	beq.n	8006500 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start_DMA+0xee>
 80064bc:	887b      	ldrh	r3, [r7, #2]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e137      	b.n	8006736 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d4:	e016      	b.n	8006504 <HAL_TIM_PWM_Start_DMA+0x12c>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d104      	bne.n	80064e6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e4:	e00e      	b.n	8006504 <HAL_TIM_PWM_Start_DMA+0x12c>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f4:	e006      	b.n	8006504 <HAL_TIM_PWM_Start_DMA+0x12c>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064fe:	e001      	b.n	8006504 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e118      	b.n	8006736 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b0c      	cmp	r3, #12
 8006508:	f200 80ae 	bhi.w	8006668 <HAL_TIM_PWM_Start_DMA+0x290>
 800650c:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006549 	.word	0x08006549
 8006518:	08006669 	.word	0x08006669
 800651c:	08006669 	.word	0x08006669
 8006520:	08006669 	.word	0x08006669
 8006524:	08006591 	.word	0x08006591
 8006528:	08006669 	.word	0x08006669
 800652c:	08006669 	.word	0x08006669
 8006530:	08006669 	.word	0x08006669
 8006534:	080065d9 	.word	0x080065d9
 8006538:	08006669 	.word	0x08006669
 800653c:	08006669 	.word	0x08006669
 8006540:	08006669 	.word	0x08006669
 8006544:	08006621 	.word	0x08006621
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	4a7c      	ldr	r2, [pc, #496]	; (8006740 <HAL_TIM_PWM_Start_DMA+0x368>)
 800654e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	4a7b      	ldr	r2, [pc, #492]	; (8006744 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	4a7a      	ldr	r2, [pc, #488]	; (8006748 <HAL_TIM_PWM_Start_DMA+0x370>)
 800655e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3334      	adds	r3, #52	; 0x34
 800656c:	461a      	mov	r2, r3
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	f7fe faa6 	bl	8004ac0 <HAL_DMA_Start_IT>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e0db      	b.n	8006736 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658c:	60da      	str	r2, [r3, #12]
      break;
 800658e:	e06e      	b.n	800666e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	4a6a      	ldr	r2, [pc, #424]	; (8006740 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006596:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	4a69      	ldr	r2, [pc, #420]	; (8006744 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800659e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	4a68      	ldr	r2, [pc, #416]	; (8006748 <HAL_TIM_PWM_Start_DMA+0x370>)
 80065a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3338      	adds	r3, #56	; 0x38
 80065b4:	461a      	mov	r2, r3
 80065b6:	887b      	ldrh	r3, [r7, #2]
 80065b8:	f7fe fa82 	bl	8004ac0 <HAL_DMA_Start_IT>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e0b7      	b.n	8006736 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065d4:	60da      	str	r2, [r3, #12]
      break;
 80065d6:	e04a      	b.n	800666e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	4a58      	ldr	r2, [pc, #352]	; (8006740 <HAL_TIM_PWM_Start_DMA+0x368>)
 80065de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	4a57      	ldr	r2, [pc, #348]	; (8006744 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80065e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4a56      	ldr	r2, [pc, #344]	; (8006748 <HAL_TIM_PWM_Start_DMA+0x370>)
 80065ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	333c      	adds	r3, #60	; 0x3c
 80065fc:	461a      	mov	r2, r3
 80065fe:	887b      	ldrh	r3, [r7, #2]
 8006600:	f7fe fa5e 	bl	8004ac0 <HAL_DMA_Start_IT>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e093      	b.n	8006736 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800661c:	60da      	str	r2, [r3, #12]
      break;
 800661e:	e026      	b.n	800666e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	4a46      	ldr	r2, [pc, #280]	; (8006740 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006626:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	4a45      	ldr	r2, [pc, #276]	; (8006744 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800662e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	4a44      	ldr	r2, [pc, #272]	; (8006748 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006636:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3340      	adds	r3, #64	; 0x40
 8006644:	461a      	mov	r2, r3
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	f7fe fa3a 	bl	8004ac0 <HAL_DMA_Start_IT>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e06f      	b.n	8006736 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006664:	60da      	str	r2, [r3, #12]
      break;
 8006666:	e002      	b.n	800666e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
      break;
 800666c:	bf00      	nop
  }

  if (status == HAL_OK)
 800666e:	7dfb      	ldrb	r3, [r7, #23]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d15f      	bne.n	8006734 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	4618      	mov	r0, r3
 800667e:	f001 f91b 	bl	80078b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a31      	ldr	r2, [pc, #196]	; (800674c <HAL_TIM_PWM_Start_DMA+0x374>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIM_PWM_Start_DMA+0x2be>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2f      	ldr	r2, [pc, #188]	; (8006750 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a25      	ldr	r2, [pc, #148]	; (800674c <HAL_TIM_PWM_Start_DMA+0x374>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d022      	beq.n	8006700 <HAL_TIM_PWM_Start_DMA+0x328>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c2:	d01d      	beq.n	8006700 <HAL_TIM_PWM_Start_DMA+0x328>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a22      	ldr	r2, [pc, #136]	; (8006754 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d018      	beq.n	8006700 <HAL_TIM_PWM_Start_DMA+0x328>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a21      	ldr	r2, [pc, #132]	; (8006758 <HAL_TIM_PWM_Start_DMA+0x380>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_TIM_PWM_Start_DMA+0x328>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1f      	ldr	r2, [pc, #124]	; (800675c <HAL_TIM_PWM_Start_DMA+0x384>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00e      	beq.n	8006700 <HAL_TIM_PWM_Start_DMA+0x328>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1a      	ldr	r2, [pc, #104]	; (8006750 <HAL_TIM_PWM_Start_DMA+0x378>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d009      	beq.n	8006700 <HAL_TIM_PWM_Start_DMA+0x328>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <HAL_TIM_PWM_Start_DMA+0x388>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_TIM_PWM_Start_DMA+0x328>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1a      	ldr	r2, [pc, #104]	; (8006764 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d111      	bne.n	8006724 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b06      	cmp	r3, #6
 8006710:	d010      	beq.n	8006734 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006722:	e007      	b.n	8006734 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	08006f81 	.word	0x08006f81
 8006744:	08007029 	.word	0x08007029
 8006748:	08006eef 	.word	0x08006eef
 800674c:	40010000 	.word	0x40010000
 8006750:	40010400 	.word	0x40010400
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40014000 	.word	0x40014000
 8006764:	40001800 	.word	0x40001800

08006768 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e041      	b.n	80067fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f839 	bl	8006806 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f000 fc72 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b02      	cmp	r3, #2
 800682e:	d122      	bne.n	8006876 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d11b      	bne.n	8006876 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0202 	mvn.w	r2, #2
 8006846:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb14 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 8006862:	e005      	b.n	8006870 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb06 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fb17 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b04      	cmp	r3, #4
 8006882:	d122      	bne.n	80068ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b04      	cmp	r3, #4
 8006890:	d11b      	bne.n	80068ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f06f 0204 	mvn.w	r2, #4
 800689a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 faea 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 80068b6:	e005      	b.n	80068c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fadc 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 faed 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d122      	bne.n	800691e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d11b      	bne.n	800691e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f06f 0208 	mvn.w	r2, #8
 80068ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2204      	movs	r2, #4
 80068f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fac0 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 800690a:	e005      	b.n	8006918 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fab2 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fac3 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b10      	cmp	r3, #16
 800692a:	d122      	bne.n	8006972 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	2b10      	cmp	r3, #16
 8006938:	d11b      	bne.n	8006972 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f06f 0210 	mvn.w	r2, #16
 8006942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2208      	movs	r2, #8
 8006948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa96 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 800695e:	e005      	b.n	800696c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fa88 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa99 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10e      	bne.n	800699e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b01      	cmp	r3, #1
 800698c:	d107      	bne.n	800699e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f06f 0201 	mvn.w	r2, #1
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fc f8e9 	bl	8002b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d10e      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 f875 	bl	8007ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d10e      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa68 	bl	8006ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d10e      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d107      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0220 	mvn.w	r2, #32
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f83f 	bl	8007aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e088      	b.n	8006b5a <HAL_TIM_IC_ConfigChannel+0x130>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11b      	bne.n	8006a8e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6819      	ldr	r1, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f000 fd63 	bl	8007530 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 020c 	bic.w	r2, r2, #12
 8006a78:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6999      	ldr	r1, [r3, #24]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	619a      	str	r2, [r3, #24]
 8006a8c:	e060      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d11c      	bne.n	8006ace <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6819      	ldr	r1, [r3, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f000 fde7 	bl	8007676 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ab6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6999      	ldr	r1, [r3, #24]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	619a      	str	r2, [r3, #24]
 8006acc:	e040      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6819      	ldr	r1, [r3, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f000 fe34 	bl	8007750 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 020c 	bic.w	r2, r2, #12
 8006af6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69d9      	ldr	r1, [r3, #28]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	61da      	str	r2, [r3, #28]
 8006b0a:	e021      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b0c      	cmp	r3, #12
 8006b10:	d11c      	bne.n	8006b4c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6819      	ldr	r1, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f000 fe51 	bl	80077c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b34:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69d9      	ldr	r1, [r3, #28]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	021a      	lsls	r2, r3, #8
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	61da      	str	r2, [r3, #28]
 8006b4a:	e001      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e0ae      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b0c      	cmp	r3, #12
 8006b8e:	f200 809f 	bhi.w	8006cd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bcd 	.word	0x08006bcd
 8006b9c:	08006cd1 	.word	0x08006cd1
 8006ba0:	08006cd1 	.word	0x08006cd1
 8006ba4:	08006cd1 	.word	0x08006cd1
 8006ba8:	08006c0d 	.word	0x08006c0d
 8006bac:	08006cd1 	.word	0x08006cd1
 8006bb0:	08006cd1 	.word	0x08006cd1
 8006bb4:	08006cd1 	.word	0x08006cd1
 8006bb8:	08006c4f 	.word	0x08006c4f
 8006bbc:	08006cd1 	.word	0x08006cd1
 8006bc0:	08006cd1 	.word	0x08006cd1
 8006bc4:	08006cd1 	.word	0x08006cd1
 8006bc8:	08006c8f 	.word	0x08006c8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fafc 	bl	80071d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0208 	orr.w	r2, r2, #8
 8006be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0204 	bic.w	r2, r2, #4
 8006bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6999      	ldr	r1, [r3, #24]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	619a      	str	r2, [r3, #24]
      break;
 8006c0a:	e064      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fb4c 	bl	80072b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6999      	ldr	r1, [r3, #24]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	021a      	lsls	r2, r3, #8
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	619a      	str	r2, [r3, #24]
      break;
 8006c4c:	e043      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fba1 	bl	800739c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0208 	orr.w	r2, r2, #8
 8006c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0204 	bic.w	r2, r2, #4
 8006c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	61da      	str	r2, [r3, #28]
      break;
 8006c8c:	e023      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fbf5 	bl	8007484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69da      	ldr	r2, [r3, #28]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69d9      	ldr	r1, [r3, #28]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	021a      	lsls	r2, r3, #8
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	61da      	str	r2, [r3, #28]
      break;
 8006cce:	e002      	b.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_TIM_ConfigClockSource+0x1c>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e0b4      	b.n	8006e6e <HAL_TIM_ConfigClockSource+0x186>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3c:	d03e      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0xd4>
 8006d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d42:	f200 8087 	bhi.w	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4a:	f000 8086 	beq.w	8006e5a <HAL_TIM_ConfigClockSource+0x172>
 8006d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d52:	d87f      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d54:	2b70      	cmp	r3, #112	; 0x70
 8006d56:	d01a      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0xa6>
 8006d58:	2b70      	cmp	r3, #112	; 0x70
 8006d5a:	d87b      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d5c:	2b60      	cmp	r3, #96	; 0x60
 8006d5e:	d050      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x11a>
 8006d60:	2b60      	cmp	r3, #96	; 0x60
 8006d62:	d877      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d64:	2b50      	cmp	r3, #80	; 0x50
 8006d66:	d03c      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0xfa>
 8006d68:	2b50      	cmp	r3, #80	; 0x50
 8006d6a:	d873      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d6c:	2b40      	cmp	r3, #64	; 0x40
 8006d6e:	d058      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0x13a>
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d86f      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d74:	2b30      	cmp	r3, #48	; 0x30
 8006d76:	d064      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d78:	2b30      	cmp	r3, #48	; 0x30
 8006d7a:	d86b      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d060      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d867      	bhi.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d05c      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d05a      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x15a>
 8006d8c:	e062      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6899      	ldr	r1, [r3, #8]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f000 fd6b 	bl	8007878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	609a      	str	r2, [r3, #8]
      break;
 8006dba:	e04f      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	6899      	ldr	r1, [r3, #8]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f000 fd54 	bl	8007878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dde:	609a      	str	r2, [r3, #8]
      break;
 8006de0:	e03c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6859      	ldr	r1, [r3, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f000 fc12 	bl	8007618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2150      	movs	r1, #80	; 0x50
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fd21 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 8006e00:	e02c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6859      	ldr	r1, [r3, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f000 fc6e 	bl	80076f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2160      	movs	r1, #96	; 0x60
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fd11 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 8006e20:	e01c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f000 fbf2 	bl	8007618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2140      	movs	r1, #64	; 0x40
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fd01 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 8006e40:	e00c      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f000 fcf8 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 8006e52:	e003      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	e000      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d107      	bne.n	8006f16 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f14:	e02a      	b.n	8006f6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d107      	bne.n	8006f30 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2202      	movs	r2, #2
 8006f24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f2e:	e01d      	b.n	8006f6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d107      	bne.n	8006f4a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f48:	e010      	b.n	8006f6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d107      	bne.n	8006f64 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2208      	movs	r2, #8
 8006f58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f62:	e003      	b.n	8006f6c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff ffb4 	bl	8006eda <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d10b      	bne.n	8006fb0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d136      	bne.n	8007014 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fae:	e031      	b.n	8007014 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d10b      	bne.n	8006fd2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d125      	bne.n	8007014 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd0:	e020      	b.n	8007014 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d10b      	bne.n	8006ff4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d114      	bne.n	8007014 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff2:	e00f      	b.n	8007014 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d10a      	bne.n	8007014 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2208      	movs	r2, #8
 8007002:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff ff42 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	771a      	strb	r2, [r3, #28]
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d103      	bne.n	8007048 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	771a      	strb	r2, [r3, #28]
 8007046:	e019      	b.n	800707c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d103      	bne.n	800705a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2202      	movs	r2, #2
 8007056:	771a      	strb	r2, [r3, #28]
 8007058:	e010      	b.n	800707c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d103      	bne.n	800706c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2204      	movs	r2, #4
 8007068:	771a      	strb	r2, [r3, #28]
 800706a:	e007      	b.n	800707c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d102      	bne.n	800707c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2208      	movs	r2, #8
 800707a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff ff18 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	771a      	strb	r2, [r3, #28]
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a40      	ldr	r2, [pc, #256]	; (80071a4 <TIM_Base_SetConfig+0x114>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ae:	d00f      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <TIM_Base_SetConfig+0x118>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00b      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a3c      	ldr	r2, [pc, #240]	; (80071ac <TIM_Base_SetConfig+0x11c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d007      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a3b      	ldr	r2, [pc, #236]	; (80071b0 <TIM_Base_SetConfig+0x120>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a3a      	ldr	r2, [pc, #232]	; (80071b4 <TIM_Base_SetConfig+0x124>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d108      	bne.n	80070e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a2f      	ldr	r2, [pc, #188]	; (80071a4 <TIM_Base_SetConfig+0x114>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d02b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f0:	d027      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2c      	ldr	r2, [pc, #176]	; (80071a8 <TIM_Base_SetConfig+0x118>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d023      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2b      	ldr	r2, [pc, #172]	; (80071ac <TIM_Base_SetConfig+0x11c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01f      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <TIM_Base_SetConfig+0x120>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a29      	ldr	r2, [pc, #164]	; (80071b4 <TIM_Base_SetConfig+0x124>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d017      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a28      	ldr	r2, [pc, #160]	; (80071b8 <TIM_Base_SetConfig+0x128>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a27      	ldr	r2, [pc, #156]	; (80071bc <TIM_Base_SetConfig+0x12c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00f      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <TIM_Base_SetConfig+0x130>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a25      	ldr	r2, [pc, #148]	; (80071c4 <TIM_Base_SetConfig+0x134>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a24      	ldr	r2, [pc, #144]	; (80071c8 <TIM_Base_SetConfig+0x138>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a23      	ldr	r2, [pc, #140]	; (80071cc <TIM_Base_SetConfig+0x13c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d108      	bne.n	8007154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <TIM_Base_SetConfig+0x114>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0xf8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a0c      	ldr	r2, [pc, #48]	; (80071b4 <TIM_Base_SetConfig+0x124>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d103      	bne.n	8007190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	615a      	str	r2, [r3, #20]
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40010400 	.word	0x40010400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800
 80071c4:	40001800 	.word	0x40001800
 80071c8:	40001c00 	.word	0x40001c00
 80071cc:	40002000 	.word	0x40002000

080071d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0303 	bic.w	r3, r3, #3
 8007206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f023 0302 	bic.w	r3, r3, #2
 8007218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a20      	ldr	r2, [pc, #128]	; (80072a8 <TIM_OC1_SetConfig+0xd8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_OC1_SetConfig+0x64>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a1f      	ldr	r2, [pc, #124]	; (80072ac <TIM_OC1_SetConfig+0xdc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d10c      	bne.n	800724e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 0308 	bic.w	r3, r3, #8
 800723a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 0304 	bic.w	r3, r3, #4
 800724c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <TIM_OC1_SetConfig+0xd8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC1_SetConfig+0x8e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a14      	ldr	r2, [pc, #80]	; (80072ac <TIM_OC1_SetConfig+0xdc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d111      	bne.n	8007282 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800726c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	621a      	str	r2, [r3, #32]
}
 800729c:	bf00      	nop
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40010400 	.word	0x40010400

080072b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f023 0210 	bic.w	r2, r3, #16
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0320 	bic.w	r3, r3, #32
 80072fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a22      	ldr	r2, [pc, #136]	; (8007394 <TIM_OC2_SetConfig+0xe4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_OC2_SetConfig+0x68>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a21      	ldr	r2, [pc, #132]	; (8007398 <TIM_OC2_SetConfig+0xe8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10d      	bne.n	8007334 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a17      	ldr	r2, [pc, #92]	; (8007394 <TIM_OC2_SetConfig+0xe4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC2_SetConfig+0x94>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a16      	ldr	r2, [pc, #88]	; (8007398 <TIM_OC2_SetConfig+0xe8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d113      	bne.n	800736c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800734a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40010000 	.word	0x40010000
 8007398:	40010400 	.word	0x40010400

0800739c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a21      	ldr	r2, [pc, #132]	; (800747c <TIM_OC3_SetConfig+0xe0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_OC3_SetConfig+0x66>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a20      	ldr	r2, [pc, #128]	; (8007480 <TIM_OC3_SetConfig+0xe4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d10d      	bne.n	800741e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800741c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a16      	ldr	r2, [pc, #88]	; (800747c <TIM_OC3_SetConfig+0xe0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d003      	beq.n	800742e <TIM_OC3_SetConfig+0x92>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a15      	ldr	r2, [pc, #84]	; (8007480 <TIM_OC3_SetConfig+0xe4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d113      	bne.n	8007456 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800743c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	621a      	str	r2, [r3, #32]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40010000 	.word	0x40010000
 8007480:	40010400 	.word	0x40010400

08007484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	031b      	lsls	r3, r3, #12
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a12      	ldr	r2, [pc, #72]	; (8007528 <TIM_OC4_SetConfig+0xa4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC4_SetConfig+0x68>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a11      	ldr	r2, [pc, #68]	; (800752c <TIM_OC4_SetConfig+0xa8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d109      	bne.n	8007500 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	019b      	lsls	r3, r3, #6
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400

08007530 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f023 0201 	bic.w	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4a28      	ldr	r2, [pc, #160]	; (80075fc <TIM_TI1_SetConfig+0xcc>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01b      	beq.n	8007596 <TIM_TI1_SetConfig+0x66>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007564:	d017      	beq.n	8007596 <TIM_TI1_SetConfig+0x66>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4a25      	ldr	r2, [pc, #148]	; (8007600 <TIM_TI1_SetConfig+0xd0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <TIM_TI1_SetConfig+0x66>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a24      	ldr	r2, [pc, #144]	; (8007604 <TIM_TI1_SetConfig+0xd4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <TIM_TI1_SetConfig+0x66>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a23      	ldr	r2, [pc, #140]	; (8007608 <TIM_TI1_SetConfig+0xd8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00b      	beq.n	8007596 <TIM_TI1_SetConfig+0x66>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4a22      	ldr	r2, [pc, #136]	; (800760c <TIM_TI1_SetConfig+0xdc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <TIM_TI1_SetConfig+0x66>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a21      	ldr	r2, [pc, #132]	; (8007610 <TIM_TI1_SetConfig+0xe0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_TI1_SetConfig+0x66>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <TIM_TI1_SetConfig+0xe4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d101      	bne.n	800759a <TIM_TI1_SetConfig+0x6a>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <TIM_TI1_SetConfig+0x6c>
 800759a:	2300      	movs	r3, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	e003      	b.n	80075ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f023 030a 	bic.w	r3, r3, #10
 80075d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f003 030a 	and.w	r3, r3, #10
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40010000 	.word	0x40010000
 8007600:	40000400 	.word	0x40000400
 8007604:	40000800 	.word	0x40000800
 8007608:	40000c00 	.word	0x40000c00
 800760c:	40010400 	.word	0x40010400
 8007610:	40014000 	.word	0x40014000
 8007614:	40001800 	.word	0x40001800

08007618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f023 0201 	bic.w	r2, r3, #1
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f023 030a 	bic.w	r3, r3, #10
 8007654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007676:	b480      	push	{r7}
 8007678:	b087      	sub	sp, #28
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	f023 0210 	bic.w	r2, r3, #16
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	031b      	lsls	r3, r3, #12
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	621a      	str	r2, [r3, #32]
}
 80076e4:	bf00      	nop
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f023 0210 	bic.w	r2, r3, #16
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800771a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	031b      	lsls	r3, r3, #12
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800772c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	621a      	str	r2, [r3, #32]
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800778c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	b2db      	uxtb	r3, r3
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80077a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007806:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	031b      	lsls	r3, r3, #12
 800780c:	b29b      	uxth	r3, r3
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800781a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	031b      	lsls	r3, r3, #12
 8007820:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	f043 0307 	orr.w	r3, r3, #7
 8007864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	609a      	str	r2, [r3, #8]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	021a      	lsls	r2, r3, #8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	431a      	orrs	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4313      	orrs	r3, r2
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	609a      	str	r2, [r3, #8]
}
 80078ac:	bf00      	nop
 80078ae:	371c      	adds	r7, #28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	2201      	movs	r2, #1
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1a      	ldr	r2, [r3, #32]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	43db      	mvns	r3, r3
 80078da:	401a      	ands	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	fa01 f303 	lsl.w	r3, r1, r3
 80078f0:	431a      	orrs	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	621a      	str	r2, [r3, #32]
}
 80078f6:	bf00      	nop
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
	...

08007904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007918:	2302      	movs	r3, #2
 800791a:	e05a      	b.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a21      	ldr	r2, [pc, #132]	; (80079e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d022      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007968:	d01d      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d018      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d10c      	bne.n	80079c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40010400 	.word	0x40010400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40001800 	.word	0x40001800

080079fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e03d      	b.n	8007a94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e03f      	b.n	8007b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fb fe3c 	bl	800376c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2224      	movs	r2, #36	; 0x24
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 ff35 	bl	800897c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695a      	ldr	r2, [r3, #20]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b08a      	sub	sp, #40	; 0x28
 8007b66:	af02      	add	r7, sp, #8
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	603b      	str	r3, [r7, #0]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d17c      	bne.n	8007c7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_UART_Transmit+0x2c>
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e075      	b.n	8007c7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UART_Transmit+0x3e>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e06e      	b.n	8007c7e <HAL_UART_Transmit+0x11c>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2221      	movs	r2, #33	; 0x21
 8007bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bb6:	f7fb fef9 	bl	80039ac <HAL_GetTick>
 8007bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	88fa      	ldrh	r2, [r7, #6]
 8007bc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd0:	d108      	bne.n	8007be4 <HAL_UART_Transmit+0x82>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d104      	bne.n	8007be4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	e003      	b.n	8007bec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007bf4:	e02a      	b.n	8007c4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2180      	movs	r1, #128	; 0x80
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fc4c 	bl	800849e <UART_WaitOnFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e036      	b.n	8007c7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	3302      	adds	r3, #2
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	e007      	b.n	8007c3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1cf      	bne.n	8007bf6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2140      	movs	r1, #64	; 0x40
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fc1c 	bl	800849e <UART_WaitOnFlagUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e006      	b.n	8007c7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e000      	b.n	8007c7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c7c:	2302      	movs	r3, #2
  }
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3720      	adds	r7, #32
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	d11d      	bne.n	8007cdc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <HAL_UART_Receive_IT+0x26>
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e016      	b.n	8007cde <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_UART_Receive_IT+0x38>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e00f      	b.n	8007cde <HAL_UART_Receive_IT+0x58>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68b9      	ldr	r1, [r7, #8]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fc51 	bl	800857a <UART_Start_Receive_IT>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	e000      	b.n	8007cde <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cdc:	2302      	movs	r3, #2
  }
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d165      	bne.n	8007dce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_UART_Transmit_DMA+0x26>
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e05e      	b.n	8007dd0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_UART_Transmit_DMA+0x38>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e057      	b.n	8007dd0 <HAL_UART_Transmit_DMA+0xe8>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2221      	movs	r2, #33	; 0x21
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	4a22      	ldr	r2, [pc, #136]	; (8007dd8 <HAL_UART_Transmit_DMA+0xf0>)
 8007d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d54:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <HAL_UART_Transmit_DMA+0xf4>)
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5c:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <HAL_UART_Transmit_DMA+0xf8>)
 8007d5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d64:	2200      	movs	r2, #0
 8007d66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d68:	f107 0308 	add.w	r3, r7, #8
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	f7fc fe9e 	bl	8004ac0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3314      	adds	r3, #20
 8007d9c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	617b      	str	r3, [r7, #20]
   return(result);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3314      	adds	r3, #20
 8007db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db6:	627a      	str	r2, [r7, #36]	; 0x24
 8007db8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6a39      	ldr	r1, [r7, #32]
 8007dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e000      	b.n	8007dd0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007dce:	2302      	movs	r3, #2
  }
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3730      	adds	r7, #48	; 0x30
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	08008355 	.word	0x08008355
 8007ddc:	080083ef 	.word	0x080083ef
 8007de0:	0800840b 	.word	0x0800840b

08007de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b0ba      	sub	sp, #232	; 0xe8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10f      	bne.n	8007e4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <HAL_UART_IRQHandler+0x66>
 8007e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fcde 	bl	8008804 <UART_Receive_IT>
      return;
 8007e48:	e256      	b.n	80082f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80de 	beq.w	8008010 <HAL_UART_IRQHandler+0x22c>
 8007e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80d1 	beq.w	8008010 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00b      	beq.n	8007e92 <HAL_UART_IRQHandler+0xae>
 8007e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f043 0201 	orr.w	r2, r3, #1
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <HAL_UART_IRQHandler+0xd2>
 8007e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	f043 0202 	orr.w	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <HAL_UART_IRQHandler+0xf6>
 8007ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f043 0204 	orr.w	r2, r3, #4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <HAL_UART_IRQHandler+0x126>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	f043 0208 	orr.w	r2, r3, #8
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 81ed 	beq.w	80082ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <HAL_UART_IRQHandler+0x14e>
 8007f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc69 	bl	8008804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3c:	2b40      	cmp	r3, #64	; 0x40
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <HAL_UART_IRQHandler+0x17a>
 8007f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d04f      	beq.n	8007ffe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fb71 	bl	8008646 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6e:	2b40      	cmp	r3, #64	; 0x40
 8007f70:	d141      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3314      	adds	r3, #20
 8007f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1d9      	bne.n	8007f72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d013      	beq.n	8007fee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	4a7d      	ldr	r2, [pc, #500]	; (80081c0 <HAL_UART_IRQHandler+0x3dc>)
 8007fcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fc fe3c 	bl	8004c50 <HAL_DMA_Abort_IT>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d016      	beq.n	800800c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	e00e      	b.n	800800c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f99a 	bl	8008328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff4:	e00a      	b.n	800800c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f996 	bl	8008328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	e006      	b.n	800800c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f992 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800800a:	e170      	b.n	80082ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	bf00      	nop
    return;
 800800e:	e16e      	b.n	80082ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	2b01      	cmp	r3, #1
 8008016:	f040 814a 	bne.w	80082ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 8143 	beq.w	80082ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 813c 	beq.w	80082ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008036:	2300      	movs	r3, #0
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60bb      	str	r3, [r7, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	f040 80b4 	bne.w	80081c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8140 	beq.w	80082f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800807a:	429a      	cmp	r2, r3
 800807c:	f080 8139 	bcs.w	80082f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008086:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008092:	f000 8088 	beq.w	80081a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	330c      	adds	r3, #12
 800809c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1d9      	bne.n	8008096 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3314      	adds	r3, #20
 80080e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080f4:	f023 0301 	bic.w	r3, r3, #1
 80080f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3314      	adds	r3, #20
 8008102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008106:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800810a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800810e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e1      	bne.n	80080e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3314      	adds	r3, #20
 8008124:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800812e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3314      	adds	r3, #20
 800813e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008142:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008144:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e3      	bne.n	800811e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2220      	movs	r2, #32
 800815a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008176:	f023 0310 	bic.w	r3, r3, #16
 800817a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008188:	65ba      	str	r2, [r7, #88]	; 0x58
 800818a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800818e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e3      	bne.n	8008164 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fc fce5 	bl	8004b70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f8c0 	bl	800833c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081bc:	e099      	b.n	80082f2 <HAL_UART_IRQHandler+0x50e>
 80081be:	bf00      	nop
 80081c0:	0800870d 	.word	0x0800870d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 808b 	beq.w	80082f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8086 	beq.w	80082f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	330c      	adds	r3, #12
 80081f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	330c      	adds	r3, #12
 800820a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800820e:	647a      	str	r2, [r7, #68]	; 0x44
 8008210:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800821c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e3      	bne.n	80081ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3314      	adds	r3, #20
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	623b      	str	r3, [r7, #32]
   return(result);
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3314      	adds	r3, #20
 8008242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008246:	633a      	str	r2, [r7, #48]	; 0x30
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800824c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e3      	bne.n	8008222 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	330c      	adds	r3, #12
 800826e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	60fb      	str	r3, [r7, #12]
   return(result);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0310 	bic.w	r3, r3, #16
 800827e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800828c:	61fa      	str	r2, [r7, #28]
 800828e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	69b9      	ldr	r1, [r7, #24]
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	617b      	str	r3, [r7, #20]
   return(result);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e3      	bne.n	8008268 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f848 	bl	800833c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082ac:	e023      	b.n	80082f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <HAL_UART_IRQHandler+0x4ea>
 80082ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa34 	bl	8008734 <UART_Transmit_IT>
    return;
 80082cc:	e014      	b.n	80082f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <HAL_UART_IRQHandler+0x514>
 80082da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d008      	beq.n	80082f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa74 	bl	80087d4 <UART_EndTransmit_IT>
    return;
 80082ec:	e004      	b.n	80082f8 <HAL_UART_IRQHandler+0x514>
    return;
 80082ee:	bf00      	nop
 80082f0:	e002      	b.n	80082f8 <HAL_UART_IRQHandler+0x514>
      return;
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <HAL_UART_IRQHandler+0x514>
      return;
 80082f6:	bf00      	nop
  }
}
 80082f8:	37e8      	adds	r7, #232	; 0xe8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop

08008300 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b090      	sub	sp, #64	; 0x40
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836c:	2b00      	cmp	r3, #0
 800836e:	d137      	bne.n	80083e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008372:	2200      	movs	r2, #0
 8008374:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3314      	adds	r3, #20
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	623b      	str	r3, [r7, #32]
   return(result);
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800838c:	63bb      	str	r3, [r7, #56]	; 0x38
 800838e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3314      	adds	r3, #20
 8008394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008396:	633a      	str	r2, [r7, #48]	; 0x30
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e5      	bne.n	8008376 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	330c      	adds	r3, #12
 80083b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c0:	637b      	str	r3, [r7, #52]	; 0x34
 80083c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ca:	61fa      	str	r2, [r7, #28]
 80083cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	69b9      	ldr	r1, [r7, #24]
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	617b      	str	r3, [r7, #20]
   return(result);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e5      	bne.n	80083aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083de:	e002      	b.n	80083e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80083e2:	f7ff ff8d 	bl	8008300 <HAL_UART_TxCpltCallback>
}
 80083e6:	bf00      	nop
 80083e8:	3740      	adds	r7, #64	; 0x40
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff ff89 	bl	8008314 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b80      	cmp	r3, #128	; 0x80
 8008428:	bf0c      	ite	eq
 800842a:	2301      	moveq	r3, #1
 800842c:	2300      	movne	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b21      	cmp	r3, #33	; 0x21
 800843c:	d108      	bne.n	8008450 <UART_DMAError+0x46>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2200      	movs	r2, #0
 8008448:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800844a:	68b8      	ldr	r0, [r7, #8]
 800844c:	f000 f8d3 	bl	80085f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845a:	2b40      	cmp	r3, #64	; 0x40
 800845c:	bf0c      	ite	eq
 800845e:	2301      	moveq	r3, #1
 8008460:	2300      	movne	r3, #0
 8008462:	b2db      	uxtb	r3, r3
 8008464:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b22      	cmp	r3, #34	; 0x22
 8008470:	d108      	bne.n	8008484 <UART_DMAError+0x7a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2200      	movs	r2, #0
 800847c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800847e:	68b8      	ldr	r0, [r7, #8]
 8008480:	f000 f8e1 	bl	8008646 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	f043 0210 	orr.w	r2, r3, #16
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008490:	68b8      	ldr	r0, [r7, #8]
 8008492:	f7ff ff49 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b090      	sub	sp, #64	; 0x40
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	4613      	mov	r3, r2
 80084ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ae:	e050      	b.n	8008552 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d04c      	beq.n	8008552 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0x30>
 80084be:	f7fb fa75 	bl	80039ac <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d241      	bcs.n	8008552 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	330c      	adds	r3, #12
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	330c      	adds	r3, #12
 80084ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80084ee:	637a      	str	r2, [r7, #52]	; 0x34
 80084f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e5      	bne.n	80084ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3314      	adds	r3, #20
 8008508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	613b      	str	r3, [r7, #16]
   return(result);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f023 0301 	bic.w	r3, r3, #1
 8008518:	63bb      	str	r3, [r7, #56]	; 0x38
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3314      	adds	r3, #20
 8008520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008522:	623a      	str	r2, [r7, #32]
 8008524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	69f9      	ldr	r1, [r7, #28]
 8008528:	6a3a      	ldr	r2, [r7, #32]
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e5      	bne.n	8008502 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2220      	movs	r2, #32
 8008542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e00f      	b.n	8008572 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	4013      	ands	r3, r2
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	429a      	cmp	r2, r3
 8008560:	bf0c      	ite	eq
 8008562:	2301      	moveq	r3, #1
 8008564:	2300      	movne	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	461a      	mov	r2, r3
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	429a      	cmp	r2, r3
 800856e:	d09f      	beq.n	80084b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3740      	adds	r7, #64	; 0x40
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	4613      	mov	r3, r2
 8008586:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	88fa      	ldrh	r2, [r7, #6]
 8008592:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	88fa      	ldrh	r2, [r7, #6]
 8008598:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2222      	movs	r2, #34	; 0x22
 80085a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d007      	beq.n	80085c8 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085c6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695a      	ldr	r2, [r3, #20]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0201 	orr.w	r2, r2, #1
 80085d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0220 	orr.w	r2, r2, #32
 80085e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b089      	sub	sp, #36	; 0x24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	60bb      	str	r3, [r7, #8]
   return(result);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008614:	61fb      	str	r3, [r7, #28]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	330c      	adds	r3, #12
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	61ba      	str	r2, [r7, #24]
 8008620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6979      	ldr	r1, [r7, #20]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	613b      	str	r3, [r7, #16]
   return(result);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e5      	bne.n	80085fe <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800863a:	bf00      	nop
 800863c:	3724      	adds	r7, #36	; 0x24
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008646:	b480      	push	{r7}
 8008648:	b095      	sub	sp, #84	; 0x54
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	330c      	adds	r3, #12
 8008654:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	330c      	adds	r3, #12
 800866c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800866e:	643a      	str	r2, [r7, #64]	; 0x40
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e5      	bne.n	800864e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3314      	adds	r3, #20
 8008688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	61fb      	str	r3, [r7, #28]
   return(result);
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	f023 0301 	bic.w	r3, r3, #1
 8008698:	64bb      	str	r3, [r7, #72]	; 0x48
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3314      	adds	r3, #20
 80086a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e5      	bne.n	8008682 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d119      	bne.n	80086f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f023 0310 	bic.w	r3, r3, #16
 80086d4:	647b      	str	r3, [r7, #68]	; 0x44
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	330c      	adds	r3, #12
 80086dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086de:	61ba      	str	r2, [r7, #24]
 80086e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6979      	ldr	r1, [r7, #20]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	613b      	str	r3, [r7, #16]
   return(result);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e5      	bne.n	80086be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008700:	bf00      	nop
 8008702:	3754      	adds	r7, #84	; 0x54
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fdfe 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b21      	cmp	r3, #33	; 0x21
 8008746:	d13e      	bne.n	80087c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008750:	d114      	bne.n	800877c <UART_Transmit_IT+0x48>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d110      	bne.n	800877c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800876e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	1c9a      	adds	r2, r3, #2
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	621a      	str	r2, [r3, #32]
 800877a:	e008      	b.n	800878e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	1c59      	adds	r1, r3, #1
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6211      	str	r1, [r2, #32]
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008792:	b29b      	uxth	r3, r3
 8008794:	3b01      	subs	r3, #1
 8008796:	b29b      	uxth	r3, r3
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	4619      	mov	r1, r3
 800879c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10f      	bne.n	80087c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68da      	ldr	r2, [r3, #12]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e000      	b.n	80087c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087c6:	2302      	movs	r3, #2
  }
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff fd83 	bl	8008300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08c      	sub	sp, #48	; 0x30
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b22      	cmp	r3, #34	; 0x22
 8008816:	f040 80ab 	bne.w	8008970 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008822:	d117      	bne.n	8008854 <UART_Receive_IT+0x50>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d113      	bne.n	8008854 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800882c:	2300      	movs	r3, #0
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008842:	b29a      	uxth	r2, r3
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	1c9a      	adds	r2, r3, #2
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	629a      	str	r2, [r3, #40]	; 0x28
 8008852:	e026      	b.n	80088a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008866:	d007      	beq.n	8008878 <UART_Receive_IT+0x74>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <UART_Receive_IT+0x82>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	b2da      	uxtb	r2, r3
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	e008      	b.n	8008898 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008892:	b2da      	uxtb	r2, r3
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	4619      	mov	r1, r3
 80088b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d15a      	bne.n	800896c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0220 	bic.w	r2, r2, #32
 80088c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d135      	bne.n	8008962 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	330c      	adds	r3, #12
 8008902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	613b      	str	r3, [r7, #16]
   return(result);
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f023 0310 	bic.w	r3, r3, #16
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	330c      	adds	r3, #12
 800891a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891c:	623a      	str	r2, [r7, #32]
 800891e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	69f9      	ldr	r1, [r7, #28]
 8008922:	6a3a      	ldr	r2, [r7, #32]
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	61bb      	str	r3, [r7, #24]
   return(result);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e5      	bne.n	80088fc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0310 	and.w	r3, r3, #16
 800893a:	2b10      	cmp	r3, #16
 800893c:	d10a      	bne.n	8008954 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fcee 	bl	800833c <HAL_UARTEx_RxEventCallback>
 8008960:	e002      	b.n	8008968 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fa f91c 	bl	8002ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	e002      	b.n	8008972 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e000      	b.n	8008972 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008970:	2302      	movs	r3, #2
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	3730      	adds	r7, #48	; 0x30
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
	...

0800897c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800897c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008980:	b0c0      	sub	sp, #256	; 0x100
 8008982:	af00      	add	r7, sp, #0
 8008984:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008998:	68d9      	ldr	r1, [r3, #12]
 800899a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	ea40 0301 	orr.w	r3, r0, r1
 80089a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	431a      	orrs	r2, r3
 80089b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089d4:	f021 010c 	bic.w	r1, r1, #12
 80089d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089e2:	430b      	orrs	r3, r1
 80089e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f6:	6999      	ldr	r1, [r3, #24]
 80089f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	ea40 0301 	orr.w	r3, r0, r1
 8008a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b8f      	ldr	r3, [pc, #572]	; (8008c48 <UART_SetConfig+0x2cc>)
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d005      	beq.n	8008a1c <UART_SetConfig+0xa0>
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b8d      	ldr	r3, [pc, #564]	; (8008c4c <UART_SetConfig+0x2d0>)
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d104      	bne.n	8008a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a1c:	f7fd f9e8 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 8008a20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a24:	e003      	b.n	8008a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a26:	f7fd f9cf 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8008a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a38:	f040 810c 	bne.w	8008c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a4e:	4622      	mov	r2, r4
 8008a50:	462b      	mov	r3, r5
 8008a52:	1891      	adds	r1, r2, r2
 8008a54:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a56:	415b      	adcs	r3, r3
 8008a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a5e:	4621      	mov	r1, r4
 8008a60:	eb12 0801 	adds.w	r8, r2, r1
 8008a64:	4629      	mov	r1, r5
 8008a66:	eb43 0901 	adc.w	r9, r3, r1
 8008a6a:	f04f 0200 	mov.w	r2, #0
 8008a6e:	f04f 0300 	mov.w	r3, #0
 8008a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a7e:	4690      	mov	r8, r2
 8008a80:	4699      	mov	r9, r3
 8008a82:	4623      	mov	r3, r4
 8008a84:	eb18 0303 	adds.w	r3, r8, r3
 8008a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	eb49 0303 	adc.w	r3, r9, r3
 8008a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008aaa:	460b      	mov	r3, r1
 8008aac:	18db      	adds	r3, r3, r3
 8008aae:	653b      	str	r3, [r7, #80]	; 0x50
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	eb42 0303 	adc.w	r3, r2, r3
 8008ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ac0:	f7f8 f872 	bl	8000ba8 <__aeabi_uldivmod>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4b61      	ldr	r3, [pc, #388]	; (8008c50 <UART_SetConfig+0x2d4>)
 8008aca:	fba3 2302 	umull	r2, r3, r3, r2
 8008ace:	095b      	lsrs	r3, r3, #5
 8008ad0:	011c      	lsls	r4, r3, #4
 8008ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	1891      	adds	r1, r2, r2
 8008aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8008aec:	415b      	adcs	r3, r3
 8008aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008af4:	4641      	mov	r1, r8
 8008af6:	eb12 0a01 	adds.w	sl, r2, r1
 8008afa:	4649      	mov	r1, r9
 8008afc:	eb43 0b01 	adc.w	fp, r3, r1
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b14:	4692      	mov	sl, r2
 8008b16:	469b      	mov	fp, r3
 8008b18:	4643      	mov	r3, r8
 8008b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8008b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b22:	464b      	mov	r3, r9
 8008b24:	eb4b 0303 	adc.w	r3, fp, r3
 8008b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b40:	460b      	mov	r3, r1
 8008b42:	18db      	adds	r3, r3, r3
 8008b44:	643b      	str	r3, [r7, #64]	; 0x40
 8008b46:	4613      	mov	r3, r2
 8008b48:	eb42 0303 	adc.w	r3, r2, r3
 8008b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b56:	f7f8 f827 	bl	8000ba8 <__aeabi_uldivmod>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4b3b      	ldr	r3, [pc, #236]	; (8008c50 <UART_SetConfig+0x2d4>)
 8008b62:	fba3 2301 	umull	r2, r3, r3, r1
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	2264      	movs	r2, #100	; 0x64
 8008b6a:	fb02 f303 	mul.w	r3, r2, r3
 8008b6e:	1acb      	subs	r3, r1, r3
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b76:	4b36      	ldr	r3, [pc, #216]	; (8008c50 <UART_SetConfig+0x2d4>)
 8008b78:	fba3 2302 	umull	r2, r3, r3, r2
 8008b7c:	095b      	lsrs	r3, r3, #5
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b84:	441c      	add	r4, r3
 8008b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b98:	4642      	mov	r2, r8
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	1891      	adds	r1, r2, r2
 8008b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ba0:	415b      	adcs	r3, r3
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ba8:	4641      	mov	r1, r8
 8008baa:	1851      	adds	r1, r2, r1
 8008bac:	6339      	str	r1, [r7, #48]	; 0x30
 8008bae:	4649      	mov	r1, r9
 8008bb0:	414b      	adcs	r3, r1
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	f04f 0300 	mov.w	r3, #0
 8008bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008bc0:	4659      	mov	r1, fp
 8008bc2:	00cb      	lsls	r3, r1, #3
 8008bc4:	4651      	mov	r1, sl
 8008bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bca:	4651      	mov	r1, sl
 8008bcc:	00ca      	lsls	r2, r1, #3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	4642      	mov	r2, r8
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bdc:	464b      	mov	r3, r9
 8008bde:	460a      	mov	r2, r1
 8008be0:	eb42 0303 	adc.w	r3, r2, r3
 8008be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	18db      	adds	r3, r3, r3
 8008c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c02:	4613      	mov	r3, r2
 8008c04:	eb42 0303 	adc.w	r3, r2, r3
 8008c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c12:	f7f7 ffc9 	bl	8000ba8 <__aeabi_uldivmod>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <UART_SetConfig+0x2d4>)
 8008c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c20:	095b      	lsrs	r3, r3, #5
 8008c22:	2164      	movs	r1, #100	; 0x64
 8008c24:	fb01 f303 	mul.w	r3, r1, r3
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	3332      	adds	r3, #50	; 0x32
 8008c2e:	4a08      	ldr	r2, [pc, #32]	; (8008c50 <UART_SetConfig+0x2d4>)
 8008c30:	fba2 2303 	umull	r2, r3, r2, r3
 8008c34:	095b      	lsrs	r3, r3, #5
 8008c36:	f003 0207 	and.w	r2, r3, #7
 8008c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4422      	add	r2, r4
 8008c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c44:	e105      	b.n	8008e52 <UART_SetConfig+0x4d6>
 8008c46:	bf00      	nop
 8008c48:	40011000 	.word	0x40011000
 8008c4c:	40011400 	.word	0x40011400
 8008c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c66:	4642      	mov	r2, r8
 8008c68:	464b      	mov	r3, r9
 8008c6a:	1891      	adds	r1, r2, r2
 8008c6c:	6239      	str	r1, [r7, #32]
 8008c6e:	415b      	adcs	r3, r3
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
 8008c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c76:	4641      	mov	r1, r8
 8008c78:	1854      	adds	r4, r2, r1
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	eb43 0501 	adc.w	r5, r3, r1
 8008c80:	f04f 0200 	mov.w	r2, #0
 8008c84:	f04f 0300 	mov.w	r3, #0
 8008c88:	00eb      	lsls	r3, r5, #3
 8008c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c8e:	00e2      	lsls	r2, r4, #3
 8008c90:	4614      	mov	r4, r2
 8008c92:	461d      	mov	r5, r3
 8008c94:	4643      	mov	r3, r8
 8008c96:	18e3      	adds	r3, r4, r3
 8008c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c9c:	464b      	mov	r3, r9
 8008c9e:	eb45 0303 	adc.w	r3, r5, r3
 8008ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	f04f 0300 	mov.w	r3, #0
 8008cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	008b      	lsls	r3, r1, #2
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ccc:	4621      	mov	r1, r4
 8008cce:	008a      	lsls	r2, r1, #2
 8008cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cd4:	f7f7 ff68 	bl	8000ba8 <__aeabi_uldivmod>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4b60      	ldr	r3, [pc, #384]	; (8008e60 <UART_SetConfig+0x4e4>)
 8008cde:	fba3 2302 	umull	r2, r3, r3, r2
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	011c      	lsls	r4, r3, #4
 8008ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	1891      	adds	r1, r2, r2
 8008cfe:	61b9      	str	r1, [r7, #24]
 8008d00:	415b      	adcs	r3, r3
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d08:	4641      	mov	r1, r8
 8008d0a:	1851      	adds	r1, r2, r1
 8008d0c:	6139      	str	r1, [r7, #16]
 8008d0e:	4649      	mov	r1, r9
 8008d10:	414b      	adcs	r3, r1
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d20:	4659      	mov	r1, fp
 8008d22:	00cb      	lsls	r3, r1, #3
 8008d24:	4651      	mov	r1, sl
 8008d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d2a:	4651      	mov	r1, sl
 8008d2c:	00ca      	lsls	r2, r1, #3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	4603      	mov	r3, r0
 8008d34:	4642      	mov	r2, r8
 8008d36:	189b      	adds	r3, r3, r2
 8008d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d3c:	464b      	mov	r3, r9
 8008d3e:	460a      	mov	r2, r1
 8008d40:	eb42 0303 	adc.w	r3, r2, r3
 8008d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	f04f 0300 	mov.w	r3, #0
 8008d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d60:	4649      	mov	r1, r9
 8008d62:	008b      	lsls	r3, r1, #2
 8008d64:	4641      	mov	r1, r8
 8008d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	008a      	lsls	r2, r1, #2
 8008d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d72:	f7f7 ff19 	bl	8000ba8 <__aeabi_uldivmod>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4b39      	ldr	r3, [pc, #228]	; (8008e60 <UART_SetConfig+0x4e4>)
 8008d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d80:	095b      	lsrs	r3, r3, #5
 8008d82:	2164      	movs	r1, #100	; 0x64
 8008d84:	fb01 f303 	mul.w	r3, r1, r3
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	3332      	adds	r3, #50	; 0x32
 8008d8e:	4a34      	ldr	r2, [pc, #208]	; (8008e60 <UART_SetConfig+0x4e4>)
 8008d90:	fba2 2303 	umull	r2, r3, r2, r3
 8008d94:	095b      	lsrs	r3, r3, #5
 8008d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d9a:	441c      	add	r4, r3
 8008d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da0:	2200      	movs	r2, #0
 8008da2:	673b      	str	r3, [r7, #112]	; 0x70
 8008da4:	677a      	str	r2, [r7, #116]	; 0x74
 8008da6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008daa:	4642      	mov	r2, r8
 8008dac:	464b      	mov	r3, r9
 8008dae:	1891      	adds	r1, r2, r2
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	415b      	adcs	r3, r3
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dba:	4641      	mov	r1, r8
 8008dbc:	1851      	adds	r1, r2, r1
 8008dbe:	6039      	str	r1, [r7, #0]
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	414b      	adcs	r3, r1
 8008dc4:	607b      	str	r3, [r7, #4]
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008dd2:	4659      	mov	r1, fp
 8008dd4:	00cb      	lsls	r3, r1, #3
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ddc:	4651      	mov	r1, sl
 8008dde:	00ca      	lsls	r2, r1, #3
 8008de0:	4610      	mov	r0, r2
 8008de2:	4619      	mov	r1, r3
 8008de4:	4603      	mov	r3, r0
 8008de6:	4642      	mov	r2, r8
 8008de8:	189b      	adds	r3, r3, r2
 8008dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dec:	464b      	mov	r3, r9
 8008dee:	460a      	mov	r2, r1
 8008df0:	eb42 0303 	adc.w	r3, r2, r3
 8008df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8008e00:	667a      	str	r2, [r7, #100]	; 0x64
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e0e:	4649      	mov	r1, r9
 8008e10:	008b      	lsls	r3, r1, #2
 8008e12:	4641      	mov	r1, r8
 8008e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e18:	4641      	mov	r1, r8
 8008e1a:	008a      	lsls	r2, r1, #2
 8008e1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e20:	f7f7 fec2 	bl	8000ba8 <__aeabi_uldivmod>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4b0d      	ldr	r3, [pc, #52]	; (8008e60 <UART_SetConfig+0x4e4>)
 8008e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	2164      	movs	r1, #100	; 0x64
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	3332      	adds	r3, #50	; 0x32
 8008e3c:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <UART_SetConfig+0x4e4>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f003 020f 	and.w	r2, r3, #15
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4422      	add	r2, r4
 8008e50:	609a      	str	r2, [r3, #8]
}
 8008e52:	bf00      	nop
 8008e54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e5e:	bf00      	nop
 8008e60:	51eb851f 	.word	0x51eb851f

08008e64 <__NVIC_SetPriority>:
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	db0a      	blt.n	8008e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	490c      	ldr	r1, [pc, #48]	; (8008eb0 <__NVIC_SetPriority+0x4c>)
 8008e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e82:	0112      	lsls	r2, r2, #4
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	440b      	add	r3, r1
 8008e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e8c:	e00a      	b.n	8008ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	4908      	ldr	r1, [pc, #32]	; (8008eb4 <__NVIC_SetPriority+0x50>)
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	3b04      	subs	r3, #4
 8008e9c:	0112      	lsls	r2, r2, #4
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	761a      	strb	r2, [r3, #24]
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	e000e100 	.word	0xe000e100
 8008eb4:	e000ed00 	.word	0xe000ed00

08008eb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <SysTick_Handler+0x1c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ec0:	f002 f844 	bl	800af4c <xTaskGetSchedulerState>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d001      	beq.n	8008ece <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008eca:	f003 f82d 	bl	800bf28 <xPortSysTickHandler>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	e000e010 	.word	0xe000e010

08008ed8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008edc:	2100      	movs	r1, #0
 8008ede:	f06f 0004 	mvn.w	r0, #4
 8008ee2:	f7ff ffbf 	bl	8008e64 <__NVIC_SetPriority>
#endif
}
 8008ee6:	bf00      	nop
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ef2:	f3ef 8305 	mrs	r3, IPSR
 8008ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008efe:	f06f 0305 	mvn.w	r3, #5
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	e00c      	b.n	8008f20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f06:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <osKernelInitialize+0x44>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <osKernelInitialize+0x44>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	e002      	b.n	8008f20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f20:	687b      	ldr	r3, [r7, #4]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20000ad4 	.word	0x20000ad4

08008f34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f3a:	f3ef 8305 	mrs	r3, IPSR
 8008f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f46:	f06f 0305 	mvn.w	r3, #5
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	e010      	b.n	8008f70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <osKernelStart+0x48>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d109      	bne.n	8008f6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f56:	f7ff ffbf 	bl	8008ed8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f5a:	4b08      	ldr	r3, [pc, #32]	; (8008f7c <osKernelStart+0x48>)
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f60:	f001 fb86 	bl	800a670 <vTaskStartScheduler>
      stat = osOK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	e002      	b.n	8008f70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f70:	687b      	ldr	r3, [r7, #4]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000ad4 	.word	0x20000ad4

08008f80 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f86:	f3ef 8305 	mrs	r3, IPSR
 8008f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8008f8c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008f92:	f001 fc99 	bl	800a8c8 <xTaskGetTickCountFromISR>
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	e002      	b.n	8008fa0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008f9a:	f001 fc85 	bl	800a8a8 <xTaskGetTickCount>
 8008f9e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008fa0:	687b      	ldr	r3, [r7, #4]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b08e      	sub	sp, #56	; 0x38
 8008fae:	af04      	add	r7, sp, #16
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fba:	f3ef 8305 	mrs	r3, IPSR
 8008fbe:	617b      	str	r3, [r7, #20]
  return(result);
 8008fc0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d17e      	bne.n	80090c4 <osThreadNew+0x11a>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d07b      	beq.n	80090c4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fcc:	2380      	movs	r3, #128	; 0x80
 8008fce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fd0:	2318      	movs	r3, #24
 8008fd2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fdc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d045      	beq.n	8009070 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <osThreadNew+0x48>
        name = attr->name;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <osThreadNew+0x6e>
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	2b38      	cmp	r3, #56	; 0x38
 800900a:	d805      	bhi.n	8009018 <osThreadNew+0x6e>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <osThreadNew+0x72>
        return (NULL);
 8009018:	2300      	movs	r3, #0
 800901a:	e054      	b.n	80090c6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	089b      	lsrs	r3, r3, #2
 800902a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00e      	beq.n	8009052 <osThreadNew+0xa8>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	2bbb      	cmp	r3, #187	; 0xbb
 800903a:	d90a      	bls.n	8009052 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009040:	2b00      	cmp	r3, #0
 8009042:	d006      	beq.n	8009052 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <osThreadNew+0xa8>
        mem = 1;
 800904c:	2301      	movs	r3, #1
 800904e:	61bb      	str	r3, [r7, #24]
 8009050:	e010      	b.n	8009074 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10c      	bne.n	8009074 <osThreadNew+0xca>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d108      	bne.n	8009074 <osThreadNew+0xca>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d104      	bne.n	8009074 <osThreadNew+0xca>
          mem = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	e001      	b.n	8009074 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d110      	bne.n	800909c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009082:	9202      	str	r2, [sp, #8]
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6a3a      	ldr	r2, [r7, #32]
 800908e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f001 f883 	bl	800a19c <xTaskCreateStatic>
 8009096:	4603      	mov	r3, r0
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	e013      	b.n	80090c4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d110      	bne.n	80090c4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	f107 0310 	add.w	r3, r7, #16
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f001 f8ce 	bl	800a256 <xTaskCreate>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d001      	beq.n	80090c4 <osThreadNew+0x11a>
            hTask = NULL;
 80090c0:	2300      	movs	r3, #0
 80090c2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090c4:	693b      	ldr	r3, [r7, #16]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3728      	adds	r7, #40	; 0x28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <osThreadFlagsSet+0x1a>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	da03      	bge.n	80090f2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80090ea:	f06f 0303 	mvn.w	r3, #3
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e035      	b.n	800915e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80090f2:	f04f 33ff 	mov.w	r3, #4294967295
 80090f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090f8:	f3ef 8305 	mrs	r3, IPSR
 80090fc:	613b      	str	r3, [r7, #16]
  return(result);
 80090fe:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01f      	beq.n	8009144 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009104:	2300      	movs	r3, #0
 8009106:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009108:	f107 0308 	add.w	r3, r7, #8
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	2300      	movs	r3, #0
 8009110:	2201      	movs	r2, #1
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6978      	ldr	r0, [r7, #20]
 8009116:	f002 f8c3 	bl	800b2a0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800911a:	f107 030c 	add.w	r3, r7, #12
 800911e:	2200      	movs	r2, #0
 8009120:	9200      	str	r2, [sp, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	2100      	movs	r1, #0
 8009126:	6978      	ldr	r0, [r7, #20]
 8009128:	f002 f8ba 	bl	800b2a0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d015      	beq.n	800915e <osThreadFlagsSet+0x8e>
 8009132:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <osThreadFlagsSet+0x98>)
 8009134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	e00c      	b.n	800915e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009144:	2300      	movs	r3, #0
 8009146:	2201      	movs	r2, #1
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6978      	ldr	r0, [r7, #20]
 800914c:	f001 ffea 	bl	800b124 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009150:	f107 030c 	add.w	r3, r7, #12
 8009154:	2200      	movs	r2, #0
 8009156:	2100      	movs	r1, #0
 8009158:	6978      	ldr	r0, [r7, #20]
 800915a:	f001 ffe3 	bl	800b124 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800916c:	b580      	push	{r7, lr}
 800916e:	b08c      	sub	sp, #48	; 0x30
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009178:	f3ef 8305 	mrs	r3, IPSR
 800917c:	617b      	str	r3, [r7, #20]
  return(result);
 800917e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009184:	f06f 0305 	mvn.w	r3, #5
 8009188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800918a:	e06b      	b.n	8009264 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	da03      	bge.n	800919a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009192:	f06f 0303 	mvn.w	r3, #3
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009198:	e064      	b.n	8009264 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <osThreadFlagsWait+0x3e>
      clear = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a8:	e001      	b.n	80091ae <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80091b6:	f001 fb77 	bl	800a8a8 <xTaskGetTickCount>
 80091ba:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80091bc:	f107 0210 	add.w	r2, r7, #16
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091c4:	2000      	movs	r0, #0
 80091c6:	f001 ff4d 	bl	800b064 <xTaskNotifyWait>
 80091ca:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d137      	bne.n	8009242 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80091d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4013      	ands	r3, r2
 80091d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091de:	4313      	orrs	r3, r2
 80091e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00c      	beq.n	8009206 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	4013      	ands	r3, r2
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d032      	beq.n	800925e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10f      	bne.n	800921e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80091fe:	f06f 0302 	mvn.w	r3, #2
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009204:	e02e      	b.n	8009264 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d128      	bne.n	8009262 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d103      	bne.n	800921e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009216:	f06f 0302 	mvn.w	r3, #2
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800921c:	e022      	b.n	8009264 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800921e:	f001 fb43 	bl	800a8a8 <xTaskGetTickCount>
 8009222:	4602      	mov	r2, r0
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	429a      	cmp	r2, r3
 8009230:	d902      	bls.n	8009238 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
 8009236:	e00e      	b.n	8009256 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
 8009240:	e009      	b.n	8009256 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d103      	bne.n	8009250 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009248:	f06f 0302 	mvn.w	r3, #2
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924e:	e002      	b.n	8009256 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009250:	f06f 0301 	mvn.w	r3, #1
 8009254:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1af      	bne.n	80091bc <osThreadFlagsWait+0x50>
 800925c:	e002      	b.n	8009264 <osThreadFlagsWait+0xf8>
            break;
 800925e:	bf00      	nop
 8009260:	e000      	b.n	8009264 <osThreadFlagsWait+0xf8>
            break;
 8009262:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009266:	4618      	mov	r0, r3
 8009268:	3730      	adds	r7, #48	; 0x30
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009276:	f3ef 8305 	mrs	r3, IPSR
 800927a:	60bb      	str	r3, [r7, #8]
  return(result);
 800927c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <osDelay+0x1c>
    stat = osErrorISR;
 8009282:	f06f 0305 	mvn.w	r3, #5
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	e007      	b.n	800929a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 f9b7 	bl	800a608 <vTaskDelay>
    }
  }

  return (stat);
 800929a:	68fb      	ldr	r3, [r7, #12]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ac:	f3ef 8305 	mrs	r3, IPSR
 80092b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80092b2:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80092b8:	f06f 0305 	mvn.w	r3, #5
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	e019      	b.n	80092f4 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80092c4:	f001 faf0 	bl	800a8a8 <xTaskGetTickCount>
 80092c8:	4603      	mov	r3, r0
 80092ca:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <osDelayUntil+0x4a>
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	db06      	blt.n	80092ee <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80092e0:	f107 0308 	add.w	r3, r7, #8
 80092e4:	6939      	ldr	r1, [r7, #16]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 f910 	bl	800a50c <vTaskDelayUntil>
 80092ec:	e002      	b.n	80092f4 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80092ee:	f06f 0303 	mvn.w	r3, #3
 80092f2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80092f4:	697b      	ldr	r3, [r7, #20]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80092fe:	b580      	push	{r7, lr}
 8009300:	b08a      	sub	sp, #40	; 0x28
 8009302:	af02      	add	r7, sp, #8
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800930e:	f3ef 8305 	mrs	r3, IPSR
 8009312:	613b      	str	r3, [r7, #16]
  return(result);
 8009314:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009316:	2b00      	cmp	r3, #0
 8009318:	d175      	bne.n	8009406 <osSemaphoreNew+0x108>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d072      	beq.n	8009406 <osSemaphoreNew+0x108>
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	429a      	cmp	r2, r3
 8009326:	d86e      	bhi.n	8009406 <osSemaphoreNew+0x108>
    mem = -1;
 8009328:	f04f 33ff 	mov.w	r3, #4294967295
 800932c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d015      	beq.n	8009360 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d006      	beq.n	800934a <osSemaphoreNew+0x4c>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b4f      	cmp	r3, #79	; 0x4f
 8009342:	d902      	bls.n	800934a <osSemaphoreNew+0x4c>
        mem = 1;
 8009344:	2301      	movs	r3, #1
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	e00c      	b.n	8009364 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d108      	bne.n	8009364 <osSemaphoreNew+0x66>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <osSemaphoreNew+0x66>
          mem = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	61bb      	str	r3, [r7, #24]
 800935e:	e001      	b.n	8009364 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936a:	d04c      	beq.n	8009406 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d128      	bne.n	80093c4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d10a      	bne.n	800938e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2203      	movs	r2, #3
 800937e:	9200      	str	r2, [sp, #0]
 8009380:	2200      	movs	r2, #0
 8009382:	2100      	movs	r1, #0
 8009384:	2001      	movs	r0, #1
 8009386:	f000 f993 	bl	80096b0 <xQueueGenericCreateStatic>
 800938a:	61f8      	str	r0, [r7, #28]
 800938c:	e005      	b.n	800939a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800938e:	2203      	movs	r2, #3
 8009390:	2100      	movs	r1, #0
 8009392:	2001      	movs	r0, #1
 8009394:	f000 fa04 	bl	80097a0 <xQueueGenericCreate>
 8009398:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d022      	beq.n	80093e6 <osSemaphoreNew+0xe8>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01f      	beq.n	80093e6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80093a6:	2300      	movs	r3, #0
 80093a8:	2200      	movs	r2, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	69f8      	ldr	r0, [r7, #28]
 80093ae:	f000 fabf 	bl	8009930 <xQueueGenericSend>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d016      	beq.n	80093e6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80093b8:	69f8      	ldr	r0, [r7, #28]
 80093ba:	f000 fd33 	bl	8009e24 <vQueueDelete>
            hSemaphore = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	e010      	b.n	80093e6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d108      	bne.n	80093dc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	461a      	mov	r2, r3
 80093d0:	68b9      	ldr	r1, [r7, #8]
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fa41 	bl	800985a <xQueueCreateCountingSemaphoreStatic>
 80093d8:	61f8      	str	r0, [r7, #28]
 80093da:	e004      	b.n	80093e6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80093dc:	68b9      	ldr	r1, [r7, #8]
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fa72 	bl	80098c8 <xQueueCreateCountingSemaphore>
 80093e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00c      	beq.n	8009406 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <osSemaphoreNew+0xfc>
          name = attr->name;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	e001      	b.n	80093fe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80093fe:	6979      	ldr	r1, [r7, #20]
 8009400:	69f8      	ldr	r0, [r7, #28]
 8009402:	f000 fe43 	bl	800a08c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009406:	69fb      	ldr	r3, [r7, #28]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a07      	ldr	r2, [pc, #28]	; (800943c <vApplicationGetIdleTaskMemory+0x2c>)
 8009420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	4a06      	ldr	r2, [pc, #24]	; (8009440 <vApplicationGetIdleTaskMemory+0x30>)
 8009426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2280      	movs	r2, #128	; 0x80
 800942c:	601a      	str	r2, [r3, #0]
}
 800942e:	bf00      	nop
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	20000ad8 	.word	0x20000ad8
 8009440:	20000b94 	.word	0x20000b94

08009444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4a07      	ldr	r2, [pc, #28]	; (8009470 <vApplicationGetTimerTaskMemory+0x2c>)
 8009454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	4a06      	ldr	r2, [pc, #24]	; (8009474 <vApplicationGetTimerTaskMemory+0x30>)
 800945a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009462:	601a      	str	r2, [r3, #0]
}
 8009464:	bf00      	nop
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	20000d94 	.word	0x20000d94
 8009474:	20000e50 	.word	0x20000e50

08009478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f103 0208 	add.w	r2, r3, #8
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f04f 32ff 	mov.w	r2, #4294967295
 8009490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f103 0208 	add.w	r2, r3, #8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f103 0208 	add.w	r2, r3, #8
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	bf00      	nop
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d103      	bne.n	800953a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	e00c      	b.n	8009554 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3308      	adds	r3, #8
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e002      	b.n	8009548 <vListInsert+0x2e>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	429a      	cmp	r2, r3
 8009552:	d2f6      	bcs.n	8009542 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	601a      	str	r2, [r3, #0]
}
 8009580:	bf00      	nop
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6892      	ldr	r2, [r2, #8]
 80095a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6852      	ldr	r2, [r2, #4]
 80095ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d103      	bne.n	80095c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	1e5a      	subs	r2, r3, #1
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800960a:	f002 fbfb 	bl	800be04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800961a:	fb01 f303 	mul.w	r3, r1, r3
 800961e:	441a      	add	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963a:	3b01      	subs	r3, #1
 800963c:	68f9      	ldr	r1, [r7, #12]
 800963e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	441a      	add	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	22ff      	movs	r2, #255	; 0xff
 800964e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	22ff      	movs	r2, #255	; 0xff
 8009656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d114      	bne.n	800968a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01a      	beq.n	800969e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3310      	adds	r3, #16
 800966c:	4618      	mov	r0, r3
 800966e:	f001 faab 	bl	800abc8 <xTaskRemoveFromEventList>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d012      	beq.n	800969e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009678:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <xQueueGenericReset+0xcc>)
 800967a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	e009      	b.n	800969e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3310      	adds	r3, #16
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff fef2 	bl	8009478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3324      	adds	r3, #36	; 0x24
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff feed 	bl	8009478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800969e:	f002 fbe1 	bl	800be64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096a2:	2301      	movs	r3, #1
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08e      	sub	sp, #56	; 0x38
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <xQueueGenericCreateStatic+0x52>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <xQueueGenericCreateStatic+0x56>
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <xQueueGenericCreateStatic+0x58>
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	623b      	str	r3, [r7, #32]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d102      	bne.n	800972e <xQueueGenericCreateStatic+0x7e>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <xQueueGenericCreateStatic+0x82>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericCreateStatic+0x84>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	61fb      	str	r3, [r7, #28]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800974e:	2350      	movs	r3, #80	; 0x50
 8009750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b50      	cmp	r3, #80	; 0x50
 8009756:	d00a      	beq.n	800976e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61bb      	str	r3, [r7, #24]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800976e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009782:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4613      	mov	r3, r2
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	68b9      	ldr	r1, [r7, #8]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 f83f 	bl	8009814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009798:	4618      	mov	r0, r3
 800979a:	3730      	adds	r7, #48	; 0x30
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08a      	sub	sp, #40	; 0x28
 80097a4:	af02      	add	r7, sp, #8
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	4613      	mov	r3, r2
 80097ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	613b      	str	r3, [r7, #16]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	3350      	adds	r3, #80	; 0x50
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 fc35 	bl	800c048 <pvPortMalloc>
 80097de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d011      	beq.n	800980a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	3350      	adds	r3, #80	; 0x50
 80097ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097f8:	79fa      	ldrb	r2, [r7, #7]
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	4613      	mov	r3, r2
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f805 	bl	8009814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800980a:	69bb      	ldr	r3, [r7, #24]
	}
 800980c:	4618      	mov	r0, r3
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d103      	bne.n	8009830 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e002      	b.n	8009836 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009842:	2101      	movs	r1, #1
 8009844:	69b8      	ldr	r0, [r7, #24]
 8009846:	f7ff fecb 	bl	80095e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800985a:	b580      	push	{r7, lr}
 800985c:	b08a      	sub	sp, #40	; 0x28
 800985e:	af02      	add	r7, sp, #8
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	61bb      	str	r3, [r7, #24]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	429a      	cmp	r2, r3
 8009888:	d90a      	bls.n	80098a0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	617b      	str	r3, [r7, #20]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80098a0:	2302      	movs	r3, #2
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f7ff ff00 	bl	80096b0 <xQueueGenericCreateStatic>
 80098b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80098be:	69fb      	ldr	r3, [r7, #28]
	}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	613b      	str	r3, [r7, #16]
}
 80098ea:	bf00      	nop
 80098ec:	e7fe      	b.n	80098ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d90a      	bls.n	800990c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800990c:	2202      	movs	r2, #2
 800990e:	2100      	movs	r1, #0
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7ff ff45 	bl	80097a0 <xQueueGenericCreate>
 8009916:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009924:	697b      	ldr	r3, [r7, #20]
	}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
	...

08009930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08e      	sub	sp, #56	; 0x38
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800993e:	2300      	movs	r3, #0
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10a      	bne.n	8009962 <xQueueGenericSend+0x32>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d103      	bne.n	8009970 <xQueueGenericSend+0x40>
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <xQueueGenericSend+0x44>
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <xQueueGenericSend+0x46>
 8009974:	2300      	movs	r3, #0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10a      	bne.n	8009990 <xQueueGenericSend+0x60>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d103      	bne.n	800999e <xQueueGenericSend+0x6e>
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <xQueueGenericSend+0x72>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueGenericSend+0x74>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <xQueueGenericSend+0x8e>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	623b      	str	r3, [r7, #32]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099be:	f001 fac5 	bl	800af4c <xTaskGetSchedulerState>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d102      	bne.n	80099ce <xQueueGenericSend+0x9e>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <xQueueGenericSend+0xa2>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <xQueueGenericSend+0xa4>
 80099d2:	2300      	movs	r3, #0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <xQueueGenericSend+0xbe>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	61fb      	str	r3, [r7, #28]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099ee:	f002 fa09 	bl	800be04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d302      	bcc.n	8009a04 <xQueueGenericSend+0xd4>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d129      	bne.n	8009a58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a0a:	f000 fa2e 	bl	8009e6a <prvCopyDataToQueue>
 8009a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d010      	beq.n	8009a3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	3324      	adds	r3, #36	; 0x24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 f8d3 	bl	800abc8 <xTaskRemoveFromEventList>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d013      	beq.n	8009a50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a28:	4b3f      	ldr	r3, [pc, #252]	; (8009b28 <xQueueGenericSend+0x1f8>)
 8009a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	e00a      	b.n	8009a50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a40:	4b39      	ldr	r3, [pc, #228]	; (8009b28 <xQueueGenericSend+0x1f8>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a50:	f002 fa08 	bl	800be64 <vPortExitCritical>
				return pdPASS;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e063      	b.n	8009b20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d103      	bne.n	8009a66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a5e:	f002 fa01 	bl	800be64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e05c      	b.n	8009b20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a6c:	f107 0314 	add.w	r3, r7, #20
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 f90d 	bl	800ac90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a76:	2301      	movs	r3, #1
 8009a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a7a:	f002 f9f3 	bl	800be64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a7e:	f000 fe67 	bl	800a750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a82:	f002 f9bf 	bl	800be04 <vPortEnterCritical>
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a8c:	b25b      	sxtb	r3, r3
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d103      	bne.n	8009a9c <xQueueGenericSend+0x16c>
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa2:	b25b      	sxtb	r3, r3
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa8:	d103      	bne.n	8009ab2 <xQueueGenericSend+0x182>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ab2:	f002 f9d7 	bl	800be64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ab6:	1d3a      	adds	r2, r7, #4
 8009ab8:	f107 0314 	add.w	r3, r7, #20
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 f8fc 	bl	800acbc <xTaskCheckForTimeOut>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d124      	bne.n	8009b14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009acc:	f000 fac5 	bl	800a05a <prvIsQueueFull>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d018      	beq.n	8009b08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	3310      	adds	r3, #16
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 f822 	bl	800ab28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ae6:	f000 fa50 	bl	8009f8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009aea:	f000 fe3f 	bl	800a76c <xTaskResumeAll>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f47f af7c 	bne.w	80099ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009af6:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <xQueueGenericSend+0x1f8>)
 8009af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	e772      	b.n	80099ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b0a:	f000 fa3e 	bl	8009f8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b0e:	f000 fe2d 	bl	800a76c <xTaskResumeAll>
 8009b12:	e76c      	b.n	80099ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b16:	f000 fa38 	bl	8009f8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b1a:	f000 fe27 	bl	800a76c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3738      	adds	r7, #56	; 0x38
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed04 	.word	0xe000ed04

08009b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b090      	sub	sp, #64	; 0x40
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10a      	bne.n	8009b5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d103      	bne.n	8009b68 <xQueueGenericSendFromISR+0x3c>
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <xQueueGenericSendFromISR+0x40>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e000      	b.n	8009b6e <xQueueGenericSendFromISR+0x42>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b84:	bf00      	nop
 8009b86:	e7fe      	b.n	8009b86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d103      	bne.n	8009b96 <xQueueGenericSendFromISR+0x6a>
 8009b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d101      	bne.n	8009b9a <xQueueGenericSendFromISR+0x6e>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e000      	b.n	8009b9c <xQueueGenericSendFromISR+0x70>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	623b      	str	r3, [r7, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bb6:	f002 fa07 	bl	800bfc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009bba:	f3ef 8211 	mrs	r2, BASEPRI
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	61fa      	str	r2, [r7, #28]
 8009bd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009bd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d302      	bcc.n	8009be8 <xQueueGenericSendFromISR+0xbc>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d12f      	bne.n	8009c48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009bfe:	f000 f934 	bl	8009e6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0a:	d112      	bne.n	8009c32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d016      	beq.n	8009c42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	3324      	adds	r3, #36	; 0x24
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 ffd5 	bl	800abc8 <xTaskRemoveFromEventList>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00e      	beq.n	8009c42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00b      	beq.n	8009c42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	e007      	b.n	8009c42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c36:	3301      	adds	r3, #1
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	b25a      	sxtb	r2, r3
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009c42:	2301      	movs	r3, #1
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009c46:	e001      	b.n	8009c4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3740      	adds	r7, #64	; 0x40
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08c      	sub	sp, #48	; 0x30
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c70:	2300      	movs	r3, #0
 8009c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <xQueueReceive+0x30>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	623b      	str	r3, [r7, #32]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d103      	bne.n	8009ca2 <xQueueReceive+0x3e>
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <xQueueReceive+0x42>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e000      	b.n	8009ca8 <xQueueReceive+0x44>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xQueueReceive+0x5e>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	61fb      	str	r3, [r7, #28]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cc2:	f001 f943 	bl	800af4c <xTaskGetSchedulerState>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d102      	bne.n	8009cd2 <xQueueReceive+0x6e>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <xQueueReceive+0x72>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e000      	b.n	8009cd8 <xQueueReceive+0x74>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <xQueueReceive+0x8e>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	61bb      	str	r3, [r7, #24]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cf2:	f002 f887 	bl	800be04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d01f      	beq.n	8009d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d06:	f000 f91a 	bl	8009f3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	1e5a      	subs	r2, r3, #1
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00f      	beq.n	8009d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1c:	3310      	adds	r3, #16
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 ff52 	bl	800abc8 <xTaskRemoveFromEventList>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d2a:	4b3d      	ldr	r3, [pc, #244]	; (8009e20 <xQueueReceive+0x1bc>)
 8009d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d3a:	f002 f893 	bl	800be64 <vPortExitCritical>
				return pdPASS;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e069      	b.n	8009e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d103      	bne.n	8009d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d48:	f002 f88c 	bl	800be64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e062      	b.n	8009e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d56:	f107 0310 	add.w	r3, r7, #16
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 ff98 	bl	800ac90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d60:	2301      	movs	r3, #1
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d64:	f002 f87e 	bl	800be64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d68:	f000 fcf2 	bl	800a750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d6c:	f002 f84a 	bl	800be04 <vPortEnterCritical>
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d76:	b25b      	sxtb	r3, r3
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7c:	d103      	bne.n	8009d86 <xQueueReceive+0x122>
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d8c:	b25b      	sxtb	r3, r3
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d92:	d103      	bne.n	8009d9c <xQueueReceive+0x138>
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d9c:	f002 f862 	bl	800be64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009da0:	1d3a      	adds	r2, r7, #4
 8009da2:	f107 0310 	add.w	r3, r7, #16
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 ff87 	bl	800acbc <xTaskCheckForTimeOut>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d123      	bne.n	8009dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db6:	f000 f93a 	bl	800a02e <prvIsQueueEmpty>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d017      	beq.n	8009df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	3324      	adds	r3, #36	; 0x24
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fead 	bl	800ab28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd0:	f000 f8db 	bl	8009f8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009dd4:	f000 fcca 	bl	800a76c <xTaskResumeAll>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d189      	bne.n	8009cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009dde:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <xQueueReceive+0x1bc>)
 8009de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	e780      	b.n	8009cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df2:	f000 f8ca 	bl	8009f8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009df6:	f000 fcb9 	bl	800a76c <xTaskResumeAll>
 8009dfa:	e77a      	b.n	8009cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dfe:	f000 f8c4 	bl	8009f8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e02:	f000 fcb3 	bl	800a76c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e08:	f000 f911 	bl	800a02e <prvIsQueueEmpty>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f43f af6f 	beq.w	8009cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3730      	adds	r7, #48	; 0x30
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <vQueueDelete+0x28>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60bb      	str	r3, [r7, #8]
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 f947 	bl	800a0e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f002 f9bf 	bl	800c1e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e76:	2300      	movs	r3, #0
 8009e78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10d      	bne.n	8009ea4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d14d      	bne.n	8009f2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 f877 	bl	800af88 <xTaskPriorityDisinherit>
 8009e9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	609a      	str	r2, [r3, #8]
 8009ea2:	e043      	b.n	8009f2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d119      	bne.n	8009ede <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6858      	ldr	r0, [r3, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	f002 fbd4 	bl	800c662 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	441a      	add	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d32b      	bcc.n	8009f2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	605a      	str	r2, [r3, #4]
 8009edc:	e026      	b.n	8009f2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68d8      	ldr	r0, [r3, #12]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	f002 fbba 	bl	800c662 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	425b      	negs	r3, r3
 8009ef8:	441a      	add	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d207      	bcs.n	8009f1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	425b      	negs	r3, r3
 8009f14:	441a      	add	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d105      	bne.n	8009f2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d002      	beq.n	8009f2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f34:	697b      	ldr	r3, [r7, #20]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b082      	sub	sp, #8
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d018      	beq.n	8009f82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f58:	441a      	add	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d303      	bcc.n	8009f72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68d9      	ldr	r1, [r3, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6838      	ldr	r0, [r7, #0]
 8009f7e:	f002 fb70 	bl	800c662 <memcpy>
	}
}
 8009f82:	bf00      	nop
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f92:	f001 ff37 	bl	800be04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f9e:	e011      	b.n	8009fc4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d012      	beq.n	8009fce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3324      	adds	r3, #36	; 0x24
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fe0b 	bl	800abc8 <xTaskRemoveFromEventList>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fb8:	f000 fee2 	bl	800ad80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	dce9      	bgt.n	8009fa0 <prvUnlockQueue+0x16>
 8009fcc:	e000      	b.n	8009fd0 <prvUnlockQueue+0x46>
					break;
 8009fce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	22ff      	movs	r2, #255	; 0xff
 8009fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009fd8:	f001 ff44 	bl	800be64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fdc:	f001 ff12 	bl	800be04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fe6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fe8:	e011      	b.n	800a00e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d012      	beq.n	800a018 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3310      	adds	r3, #16
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 fde6 	bl	800abc8 <xTaskRemoveFromEventList>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a002:	f000 febd 	bl	800ad80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	3b01      	subs	r3, #1
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a00e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a012:	2b00      	cmp	r3, #0
 800a014:	dce9      	bgt.n	8009fea <prvUnlockQueue+0x60>
 800a016:	e000      	b.n	800a01a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a018:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	22ff      	movs	r2, #255	; 0xff
 800a01e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a022:	f001 ff1f 	bl	800be64 <vPortExitCritical>
}
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a036:	f001 fee5 	bl	800be04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a042:	2301      	movs	r3, #1
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	e001      	b.n	800a04c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a04c:	f001 ff0a 	bl	800be64 <vPortExitCritical>

	return xReturn;
 800a050:	68fb      	ldr	r3, [r7, #12]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a062:	f001 fecf 	bl	800be04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d102      	bne.n	800a078 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a072:	2301      	movs	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	e001      	b.n	800a07c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a078:	2300      	movs	r3, #0
 800a07a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a07c:	f001 fef2 	bl	800be64 <vPortExitCritical>

	return xReturn;
 800a080:	68fb      	ldr	r3, [r7, #12]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	e014      	b.n	800a0c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a09c:	4a0f      	ldr	r2, [pc, #60]	; (800a0dc <vQueueAddToRegistry+0x50>)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10b      	bne.n	800a0c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0a8:	490c      	ldr	r1, [pc, #48]	; (800a0dc <vQueueAddToRegistry+0x50>)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0b2:	4a0a      	ldr	r2, [pc, #40]	; (800a0dc <vQueueAddToRegistry+0x50>)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0be:	e006      	b.n	800a0ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b07      	cmp	r3, #7
 800a0ca:	d9e7      	bls.n	800a09c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20001250 	.word	0x20001250

0800a0e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	e016      	b.n	800a11c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a0ee:	4a10      	ldr	r2, [pc, #64]	; (800a130 <vQueueUnregisterQueue+0x50>)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d10b      	bne.n	800a116 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a0fe:	4a0c      	ldr	r2, [pc, #48]	; (800a130 <vQueueUnregisterQueue+0x50>)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2100      	movs	r1, #0
 800a104:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a108:	4a09      	ldr	r2, [pc, #36]	; (800a130 <vQueueUnregisterQueue+0x50>)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	4413      	add	r3, r2
 800a110:	2200      	movs	r2, #0
 800a112:	605a      	str	r2, [r3, #4]
				break;
 800a114:	e006      	b.n	800a124 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3301      	adds	r3, #1
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b07      	cmp	r3, #7
 800a120:	d9e5      	bls.n	800a0ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a122:	bf00      	nop
 800a124:	bf00      	nop
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	20001250 	.word	0x20001250

0800a134 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a144:	f001 fe5e 	bl	800be04 <vPortEnterCritical>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a14e:	b25b      	sxtb	r3, r3
 800a150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a154:	d103      	bne.n	800a15e <vQueueWaitForMessageRestricted+0x2a>
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a164:	b25b      	sxtb	r3, r3
 800a166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16a:	d103      	bne.n	800a174 <vQueueWaitForMessageRestricted+0x40>
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a174:	f001 fe76 	bl	800be64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d106      	bne.n	800a18e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	3324      	adds	r3, #36	; 0x24
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fcf1 	bl	800ab70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a18e:	6978      	ldr	r0, [r7, #20]
 800a190:	f7ff fefb 	bl	8009f8a <prvUnlockQueue>
	}
 800a194:	bf00      	nop
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08e      	sub	sp, #56	; 0x38
 800a1a0:	af04      	add	r7, sp, #16
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	623b      	str	r3, [r7, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10a      	bne.n	800a1e2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	61fb      	str	r3, [r7, #28]
}
 800a1de:	bf00      	nop
 800a1e0:	e7fe      	b.n	800a1e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1e2:	23bc      	movs	r3, #188	; 0xbc
 800a1e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2bbc      	cmp	r3, #188	; 0xbc
 800a1ea:	d00a      	beq.n	800a202 <xTaskCreateStatic+0x66>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	61bb      	str	r3, [r7, #24]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a202:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	2b00      	cmp	r3, #0
 800a208:	d01e      	beq.n	800a248 <xTaskCreateStatic+0xac>
 800a20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01b      	beq.n	800a248 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a218:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	2202      	movs	r2, #2
 800a21e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a222:	2300      	movs	r3, #0
 800a224:	9303      	str	r3, [sp, #12]
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	f107 0314 	add.w	r3, r7, #20
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	68b9      	ldr	r1, [r7, #8]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 f850 	bl	800a2e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a242:	f000 f8f3 	bl	800a42c <prvAddNewTaskToReadyList>
 800a246:	e001      	b.n	800a24c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a24c:	697b      	ldr	r3, [r7, #20]
	}
 800a24e:	4618      	mov	r0, r3
 800a250:	3728      	adds	r7, #40	; 0x28
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a256:	b580      	push	{r7, lr}
 800a258:	b08c      	sub	sp, #48	; 0x30
 800a25a:	af04      	add	r7, sp, #16
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	603b      	str	r3, [r7, #0]
 800a262:	4613      	mov	r3, r2
 800a264:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 feec 	bl	800c048 <pvPortMalloc>
 800a270:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00e      	beq.n	800a296 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a278:	20bc      	movs	r0, #188	; 0xbc
 800a27a:	f001 fee5 	bl	800c048 <pvPortMalloc>
 800a27e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	631a      	str	r2, [r3, #48]	; 0x30
 800a28c:	e005      	b.n	800a29a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a28e:	6978      	ldr	r0, [r7, #20]
 800a290:	f001 ffa6 	bl	800c1e0 <vPortFree>
 800a294:	e001      	b.n	800a29a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d017      	beq.n	800a2d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2a8:	88fa      	ldrh	r2, [r7, #6]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9303      	str	r3, [sp, #12]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	9302      	str	r3, [sp, #8]
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68b9      	ldr	r1, [r7, #8]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f80e 	bl	800a2e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2c4:	69f8      	ldr	r0, [r7, #28]
 800a2c6:	f000 f8b1 	bl	800a42c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	e002      	b.n	800a2d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
	}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3720      	adds	r7, #32
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	21a5      	movs	r1, #165	; 0xa5
 800a2fa:	f002 f9c0 	bl	800c67e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a308:	3b01      	subs	r3, #1
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f023 0307 	bic.w	r3, r3, #7
 800a316:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00a      	beq.n	800a338 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	617b      	str	r3, [r7, #20]
}
 800a334:	bf00      	nop
 800a336:	e7fe      	b.n	800a336 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d01f      	beq.n	800a37e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a33e:	2300      	movs	r3, #0
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	e012      	b.n	800a36a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	4413      	add	r3, r2
 800a34a:	7819      	ldrb	r1, [r3, #0]
 800a34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	4413      	add	r3, r2
 800a352:	3334      	adds	r3, #52	; 0x34
 800a354:	460a      	mov	r2, r1
 800a356:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	3301      	adds	r3, #1
 800a368:	61fb      	str	r3, [r7, #28]
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	2b0f      	cmp	r3, #15
 800a36e:	d9e9      	bls.n	800a344 <prvInitialiseNewTask+0x64>
 800a370:	e000      	b.n	800a374 <prvInitialiseNewTask+0x94>
			{
				break;
 800a372:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a37c:	e003      	b.n	800a386 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a388:	2b37      	cmp	r3, #55	; 0x37
 800a38a:	d901      	bls.n	800a390 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a38c:	2337      	movs	r3, #55	; 0x37
 800a38e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a394:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a39a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	2200      	movs	r2, #0
 800a3a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff f886 	bl	80094b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	3318      	adds	r3, #24
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff f881 	bl	80094b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3de:	3354      	adds	r3, #84	; 0x54
 800a3e0:	2260      	movs	r2, #96	; 0x60
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f002 f94a 	bl	800c67e <memset>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	4a0c      	ldr	r2, [pc, #48]	; (800a420 <prvInitialiseNewTask+0x140>)
 800a3ee:	659a      	str	r2, [r3, #88]	; 0x58
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f2:	4a0c      	ldr	r2, [pc, #48]	; (800a424 <prvInitialiseNewTask+0x144>)
 800a3f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	4a0b      	ldr	r2, [pc, #44]	; (800a428 <prvInitialiseNewTask+0x148>)
 800a3fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	69b8      	ldr	r0, [r7, #24]
 800a402:	f001 fbd3 	bl	800bbac <pxPortInitialiseStack>
 800a406:	4602      	mov	r2, r0
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a416:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a418:	bf00      	nop
 800a41a:	3720      	adds	r7, #32
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	08010b8c 	.word	0x08010b8c
 800a424:	08010bac 	.word	0x08010bac
 800a428:	08010b6c 	.word	0x08010b6c

0800a42c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a434:	f001 fce6 	bl	800be04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a438:	4b2d      	ldr	r3, [pc, #180]	; (800a4f0 <prvAddNewTaskToReadyList+0xc4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	4a2c      	ldr	r2, [pc, #176]	; (800a4f0 <prvAddNewTaskToReadyList+0xc4>)
 800a440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a442:	4b2c      	ldr	r3, [pc, #176]	; (800a4f4 <prvAddNewTaskToReadyList+0xc8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d109      	bne.n	800a45e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a44a:	4a2a      	ldr	r2, [pc, #168]	; (800a4f4 <prvAddNewTaskToReadyList+0xc8>)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a450:	4b27      	ldr	r3, [pc, #156]	; (800a4f0 <prvAddNewTaskToReadyList+0xc4>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d110      	bne.n	800a47a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a458:	f000 fcb6 	bl	800adc8 <prvInitialiseTaskLists>
 800a45c:	e00d      	b.n	800a47a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a45e:	4b26      	ldr	r3, [pc, #152]	; (800a4f8 <prvAddNewTaskToReadyList+0xcc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a466:	4b23      	ldr	r3, [pc, #140]	; (800a4f4 <prvAddNewTaskToReadyList+0xc8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	429a      	cmp	r2, r3
 800a472:	d802      	bhi.n	800a47a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a474:	4a1f      	ldr	r2, [pc, #124]	; (800a4f4 <prvAddNewTaskToReadyList+0xc8>)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a47a:	4b20      	ldr	r3, [pc, #128]	; (800a4fc <prvAddNewTaskToReadyList+0xd0>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3301      	adds	r3, #1
 800a480:	4a1e      	ldr	r2, [pc, #120]	; (800a4fc <prvAddNewTaskToReadyList+0xd0>)
 800a482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a484:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <prvAddNewTaskToReadyList+0xd0>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a490:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <prvAddNewTaskToReadyList+0xd4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	429a      	cmp	r2, r3
 800a496:	d903      	bls.n	800a4a0 <prvAddNewTaskToReadyList+0x74>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	4a18      	ldr	r2, [pc, #96]	; (800a500 <prvAddNewTaskToReadyList+0xd4>)
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4a15      	ldr	r2, [pc, #84]	; (800a504 <prvAddNewTaskToReadyList+0xd8>)
 800a4ae:	441a      	add	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	f7ff f80b 	bl	80094d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4bc:	f001 fcd2 	bl	800be64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4c0:	4b0d      	ldr	r3, [pc, #52]	; (800a4f8 <prvAddNewTaskToReadyList+0xcc>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00e      	beq.n	800a4e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <prvAddNewTaskToReadyList+0xc8>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d207      	bcs.n	800a4e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <prvAddNewTaskToReadyList+0xdc>)
 800a4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20001764 	.word	0x20001764
 800a4f4:	20001290 	.word	0x20001290
 800a4f8:	20001770 	.word	0x20001770
 800a4fc:	20001780 	.word	0x20001780
 800a500:	2000176c 	.word	0x2000176c
 800a504:	20001294 	.word	0x20001294
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	; 0x28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a516:	2300      	movs	r3, #0
 800a518:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10a      	bne.n	800a536 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	617b      	str	r3, [r7, #20]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <vTaskDelayUntil+0x46>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	613b      	str	r3, [r7, #16]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a552:	4b2a      	ldr	r3, [pc, #168]	; (800a5fc <vTaskDelayUntil+0xf0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <vTaskDelayUntil+0x64>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	60fb      	str	r3, [r7, #12]
}
 800a56c:	bf00      	nop
 800a56e:	e7fe      	b.n	800a56e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a570:	f000 f8ee 	bl	800a750 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a574:	4b22      	ldr	r3, [pc, #136]	; (800a600 <vTaskDelayUntil+0xf4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4413      	add	r3, r2
 800a582:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6a3a      	ldr	r2, [r7, #32]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d20b      	bcs.n	800a5a6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	429a      	cmp	r2, r3
 800a596:	d211      	bcs.n	800a5bc <vTaskDelayUntil+0xb0>
 800a598:	69fa      	ldr	r2, [r7, #28]
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d90d      	bls.n	800a5bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a4:	e00a      	b.n	800a5bc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d303      	bcc.n	800a5b8 <vTaskDelayUntil+0xac>
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d901      	bls.n	800a5bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d006      	beq.n	800a5d6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a5c8:	69fa      	ldr	r2, [r7, #28]
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 ff49 	bl	800b468 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a5d6:	f000 f8c9 	bl	800a76c <xTaskResumeAll>
 800a5da:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d107      	bne.n	800a5f2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a5e2:	4b08      	ldr	r3, [pc, #32]	; (800a604 <vTaskDelayUntil+0xf8>)
 800a5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5f2:	bf00      	nop
 800a5f4:	3728      	adds	r7, #40	; 0x28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	2000178c 	.word	0x2000178c
 800a600:	20001768 	.word	0x20001768
 800a604:	e000ed04 	.word	0xe000ed04

0800a608 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d017      	beq.n	800a64a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a61a:	4b13      	ldr	r3, [pc, #76]	; (800a668 <vTaskDelay+0x60>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00a      	beq.n	800a638 <vTaskDelay+0x30>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	60bb      	str	r3, [r7, #8]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a638:	f000 f88a 	bl	800a750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a63c:	2100      	movs	r1, #0
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 ff12 	bl	800b468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a644:	f000 f892 	bl	800a76c <xTaskResumeAll>
 800a648:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d107      	bne.n	800a660 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a650:	4b06      	ldr	r3, [pc, #24]	; (800a66c <vTaskDelay+0x64>)
 800a652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a660:	bf00      	nop
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	2000178c 	.word	0x2000178c
 800a66c:	e000ed04 	.word	0xe000ed04

0800a670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08a      	sub	sp, #40	; 0x28
 800a674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a676:	2300      	movs	r3, #0
 800a678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a67e:	463a      	mov	r2, r7
 800a680:	1d39      	adds	r1, r7, #4
 800a682:	f107 0308 	add.w	r3, r7, #8
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe fec2 	bl	8009410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	9202      	str	r2, [sp, #8]
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	2300      	movs	r3, #0
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	2300      	movs	r3, #0
 800a69c:	460a      	mov	r2, r1
 800a69e:	4924      	ldr	r1, [pc, #144]	; (800a730 <vTaskStartScheduler+0xc0>)
 800a6a0:	4824      	ldr	r0, [pc, #144]	; (800a734 <vTaskStartScheduler+0xc4>)
 800a6a2:	f7ff fd7b 	bl	800a19c <xTaskCreateStatic>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	4a23      	ldr	r2, [pc, #140]	; (800a738 <vTaskStartScheduler+0xc8>)
 800a6aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6ac:	4b22      	ldr	r3, [pc, #136]	; (800a738 <vTaskStartScheduler+0xc8>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	e001      	b.n	800a6be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d102      	bne.n	800a6ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6c4:	f000 ff24 	bl	800b510 <xTimerCreateTimerTask>
 800a6c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d11b      	bne.n	800a708 <vTaskStartScheduler+0x98>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	613b      	str	r3, [r7, #16]
}
 800a6e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6e4:	4b15      	ldr	r3, [pc, #84]	; (800a73c <vTaskStartScheduler+0xcc>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3354      	adds	r3, #84	; 0x54
 800a6ea:	4a15      	ldr	r2, [pc, #84]	; (800a740 <vTaskStartScheduler+0xd0>)
 800a6ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6ee:	4b15      	ldr	r3, [pc, #84]	; (800a744 <vTaskStartScheduler+0xd4>)
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6f6:	4b14      	ldr	r3, [pc, #80]	; (800a748 <vTaskStartScheduler+0xd8>)
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6fc:	4b13      	ldr	r3, [pc, #76]	; (800a74c <vTaskStartScheduler+0xdc>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a702:	f001 fadd 	bl	800bcc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a706:	e00e      	b.n	800a726 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d10a      	bne.n	800a726 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	60fb      	str	r3, [r7, #12]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <vTaskStartScheduler+0xb4>
}
 800a726:	bf00      	nop
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	08010a4c 	.word	0x08010a4c
 800a734:	0800ad99 	.word	0x0800ad99
 800a738:	20001788 	.word	0x20001788
 800a73c:	20001290 	.word	0x20001290
 800a740:	2000007c 	.word	0x2000007c
 800a744:	20001784 	.word	0x20001784
 800a748:	20001770 	.word	0x20001770
 800a74c:	20001768 	.word	0x20001768

0800a750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <vTaskSuspendAll+0x18>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3301      	adds	r3, #1
 800a75a:	4a03      	ldr	r2, [pc, #12]	; (800a768 <vTaskSuspendAll+0x18>)
 800a75c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a75e:	bf00      	nop
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	2000178c 	.word	0x2000178c

0800a76c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a776:	2300      	movs	r3, #0
 800a778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a77a:	4b42      	ldr	r3, [pc, #264]	; (800a884 <xTaskResumeAll+0x118>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <xTaskResumeAll+0x2c>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	603b      	str	r3, [r7, #0]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a798:	f001 fb34 	bl	800be04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a79c:	4b39      	ldr	r3, [pc, #228]	; (800a884 <xTaskResumeAll+0x118>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	4a38      	ldr	r2, [pc, #224]	; (800a884 <xTaskResumeAll+0x118>)
 800a7a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a6:	4b37      	ldr	r3, [pc, #220]	; (800a884 <xTaskResumeAll+0x118>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d162      	bne.n	800a874 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7ae:	4b36      	ldr	r3, [pc, #216]	; (800a888 <xTaskResumeAll+0x11c>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d05e      	beq.n	800a874 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7b6:	e02f      	b.n	800a818 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b8:	4b34      	ldr	r3, [pc, #208]	; (800a88c <xTaskResumeAll+0x120>)
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3318      	adds	r3, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fee1 	bl	800958c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fedc 	bl	800958c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d8:	4b2d      	ldr	r3, [pc, #180]	; (800a890 <xTaskResumeAll+0x124>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d903      	bls.n	800a7e8 <xTaskResumeAll+0x7c>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	4a2a      	ldr	r2, [pc, #168]	; (800a890 <xTaskResumeAll+0x124>)
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4a27      	ldr	r2, [pc, #156]	; (800a894 <xTaskResumeAll+0x128>)
 800a7f6:	441a      	add	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f7fe fe67 	bl	80094d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a808:	4b23      	ldr	r3, [pc, #140]	; (800a898 <xTaskResumeAll+0x12c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80e:	429a      	cmp	r2, r3
 800a810:	d302      	bcc.n	800a818 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a812:	4b22      	ldr	r3, [pc, #136]	; (800a89c <xTaskResumeAll+0x130>)
 800a814:	2201      	movs	r2, #1
 800a816:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a818:	4b1c      	ldr	r3, [pc, #112]	; (800a88c <xTaskResumeAll+0x120>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1cb      	bne.n	800a7b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a826:	f000 fb71 	bl	800af0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a82a:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <xTaskResumeAll+0x134>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d010      	beq.n	800a858 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a836:	f000 f859 	bl	800a8ec <xTaskIncrementTick>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a840:	4b16      	ldr	r3, [pc, #88]	; (800a89c <xTaskResumeAll+0x130>)
 800a842:	2201      	movs	r2, #1
 800a844:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3b01      	subs	r3, #1
 800a84a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f1      	bne.n	800a836 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a852:	4b13      	ldr	r3, [pc, #76]	; (800a8a0 <xTaskResumeAll+0x134>)
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a858:	4b10      	ldr	r3, [pc, #64]	; (800a89c <xTaskResumeAll+0x130>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d009      	beq.n	800a874 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <xTaskResumeAll+0x138>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a874:	f001 faf6 	bl	800be64 <vPortExitCritical>

	return xAlreadyYielded;
 800a878:	68bb      	ldr	r3, [r7, #8]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000178c 	.word	0x2000178c
 800a888:	20001764 	.word	0x20001764
 800a88c:	20001724 	.word	0x20001724
 800a890:	2000176c 	.word	0x2000176c
 800a894:	20001294 	.word	0x20001294
 800a898:	20001290 	.word	0x20001290
 800a89c:	20001778 	.word	0x20001778
 800a8a0:	20001774 	.word	0x20001774
 800a8a4:	e000ed04 	.word	0xe000ed04

0800a8a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8ae:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <xTaskGetTickCount+0x1c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8b4:	687b      	ldr	r3, [r7, #4]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	20001768 	.word	0x20001768

0800a8c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8ce:	f001 fb7b 	bl	800bfc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a8d6:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <xTaskGetTickCountFromISR+0x20>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8dc:	683b      	ldr	r3, [r7, #0]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20001768 	.word	0x20001768

0800a8ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8f6:	4b4f      	ldr	r3, [pc, #316]	; (800aa34 <xTaskIncrementTick+0x148>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f040 808f 	bne.w	800aa1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a900:	4b4d      	ldr	r3, [pc, #308]	; (800aa38 <xTaskIncrementTick+0x14c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a908:	4a4b      	ldr	r2, [pc, #300]	; (800aa38 <xTaskIncrementTick+0x14c>)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d120      	bne.n	800a956 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a914:	4b49      	ldr	r3, [pc, #292]	; (800aa3c <xTaskIncrementTick+0x150>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <xTaskIncrementTick+0x48>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	603b      	str	r3, [r7, #0]
}
 800a930:	bf00      	nop
 800a932:	e7fe      	b.n	800a932 <xTaskIncrementTick+0x46>
 800a934:	4b41      	ldr	r3, [pc, #260]	; (800aa3c <xTaskIncrementTick+0x150>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	4b41      	ldr	r3, [pc, #260]	; (800aa40 <xTaskIncrementTick+0x154>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a3f      	ldr	r2, [pc, #252]	; (800aa3c <xTaskIncrementTick+0x150>)
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	4a3f      	ldr	r2, [pc, #252]	; (800aa40 <xTaskIncrementTick+0x154>)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	4b3e      	ldr	r3, [pc, #248]	; (800aa44 <xTaskIncrementTick+0x158>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3301      	adds	r3, #1
 800a94e:	4a3d      	ldr	r2, [pc, #244]	; (800aa44 <xTaskIncrementTick+0x158>)
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	f000 fadb 	bl	800af0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a956:	4b3c      	ldr	r3, [pc, #240]	; (800aa48 <xTaskIncrementTick+0x15c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d349      	bcc.n	800a9f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a960:	4b36      	ldr	r3, [pc, #216]	; (800aa3c <xTaskIncrementTick+0x150>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d104      	bne.n	800a974 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a96a:	4b37      	ldr	r3, [pc, #220]	; (800aa48 <xTaskIncrementTick+0x15c>)
 800a96c:	f04f 32ff 	mov.w	r2, #4294967295
 800a970:	601a      	str	r2, [r3, #0]
					break;
 800a972:	e03f      	b.n	800a9f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a974:	4b31      	ldr	r3, [pc, #196]	; (800aa3c <xTaskIncrementTick+0x150>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d203      	bcs.n	800a994 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a98c:	4a2e      	ldr	r2, [pc, #184]	; (800aa48 <xTaskIncrementTick+0x15c>)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a992:	e02f      	b.n	800a9f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	3304      	adds	r3, #4
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe fdf7 	bl	800958c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	3318      	adds	r3, #24
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fdee 	bl	800958c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b4:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <xTaskIncrementTick+0x160>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d903      	bls.n	800a9c4 <xTaskIncrementTick+0xd8>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	4a22      	ldr	r2, [pc, #136]	; (800aa4c <xTaskIncrementTick+0x160>)
 800a9c2:	6013      	str	r3, [r2, #0]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4a1f      	ldr	r2, [pc, #124]	; (800aa50 <xTaskIncrementTick+0x164>)
 800a9d2:	441a      	add	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f7fe fd79 	bl	80094d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e4:	4b1b      	ldr	r3, [pc, #108]	; (800aa54 <xTaskIncrementTick+0x168>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d3b8      	bcc.n	800a960 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9f2:	e7b5      	b.n	800a960 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9f4:	4b17      	ldr	r3, [pc, #92]	; (800aa54 <xTaskIncrementTick+0x168>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fa:	4915      	ldr	r1, [pc, #84]	; (800aa50 <xTaskIncrementTick+0x164>)
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	440b      	add	r3, r1
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d901      	bls.n	800aa10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa10:	4b11      	ldr	r3, [pc, #68]	; (800aa58 <xTaskIncrementTick+0x16c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d007      	beq.n	800aa28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	e004      	b.n	800aa28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <xTaskIncrementTick+0x170>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3301      	adds	r3, #1
 800aa24:	4a0d      	ldr	r2, [pc, #52]	; (800aa5c <xTaskIncrementTick+0x170>)
 800aa26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa28:	697b      	ldr	r3, [r7, #20]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	2000178c 	.word	0x2000178c
 800aa38:	20001768 	.word	0x20001768
 800aa3c:	2000171c 	.word	0x2000171c
 800aa40:	20001720 	.word	0x20001720
 800aa44:	2000177c 	.word	0x2000177c
 800aa48:	20001784 	.word	0x20001784
 800aa4c:	2000176c 	.word	0x2000176c
 800aa50:	20001294 	.word	0x20001294
 800aa54:	20001290 	.word	0x20001290
 800aa58:	20001778 	.word	0x20001778
 800aa5c:	20001774 	.word	0x20001774

0800aa60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa66:	4b2a      	ldr	r3, [pc, #168]	; (800ab10 <vTaskSwitchContext+0xb0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa6e:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <vTaskSwitchContext+0xb4>)
 800aa70:	2201      	movs	r2, #1
 800aa72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa74:	e046      	b.n	800ab04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800aa76:	4b27      	ldr	r3, [pc, #156]	; (800ab14 <vTaskSwitchContext+0xb4>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa7c:	4b26      	ldr	r3, [pc, #152]	; (800ab18 <vTaskSwitchContext+0xb8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e010      	b.n	800aaa6 <vTaskSwitchContext+0x46>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10a      	bne.n	800aaa0 <vTaskSwitchContext+0x40>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	607b      	str	r3, [r7, #4]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <vTaskSwitchContext+0x3e>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	491d      	ldr	r1, [pc, #116]	; (800ab1c <vTaskSwitchContext+0xbc>)
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	440b      	add	r3, r1
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0e4      	beq.n	800aa84 <vTaskSwitchContext+0x24>
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4613      	mov	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4a15      	ldr	r2, [pc, #84]	; (800ab1c <vTaskSwitchContext+0xbc>)
 800aac6:	4413      	add	r3, r2
 800aac8:	60bb      	str	r3, [r7, #8]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	605a      	str	r2, [r3, #4]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	3308      	adds	r3, #8
 800aadc:	429a      	cmp	r2, r3
 800aade:	d104      	bne.n	800aaea <vTaskSwitchContext+0x8a>
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	4a0b      	ldr	r2, [pc, #44]	; (800ab20 <vTaskSwitchContext+0xc0>)
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	4a08      	ldr	r2, [pc, #32]	; (800ab18 <vTaskSwitchContext+0xb8>)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aafa:	4b09      	ldr	r3, [pc, #36]	; (800ab20 <vTaskSwitchContext+0xc0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3354      	adds	r3, #84	; 0x54
 800ab00:	4a08      	ldr	r2, [pc, #32]	; (800ab24 <vTaskSwitchContext+0xc4>)
 800ab02:	6013      	str	r3, [r2, #0]
}
 800ab04:	bf00      	nop
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	2000178c 	.word	0x2000178c
 800ab14:	20001778 	.word	0x20001778
 800ab18:	2000176c 	.word	0x2000176c
 800ab1c:	20001294 	.word	0x20001294
 800ab20:	20001290 	.word	0x20001290
 800ab24:	2000007c 	.word	0x2000007c

0800ab28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	60fb      	str	r3, [r7, #12]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab4e:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <vTaskPlaceOnEventList+0x44>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3318      	adds	r3, #24
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fe fcdf 	bl	800951a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	6838      	ldr	r0, [r7, #0]
 800ab60:	f000 fc82 	bl	800b468 <prvAddCurrentTaskToDelayedList>
}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20001290 	.word	0x20001290

0800ab70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10a      	bne.n	800ab98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	617b      	str	r3, [r7, #20]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab98:	4b0a      	ldr	r3, [pc, #40]	; (800abc4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3318      	adds	r3, #24
 800ab9e:	4619      	mov	r1, r3
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7fe fc96 	bl	80094d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800abac:	f04f 33ff 	mov.w	r3, #4294967295
 800abb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abb2:	6879      	ldr	r1, [r7, #4]
 800abb4:	68b8      	ldr	r0, [r7, #8]
 800abb6:	f000 fc57 	bl	800b468 <prvAddCurrentTaskToDelayedList>
	}
 800abba:	bf00      	nop
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20001290 	.word	0x20001290

0800abc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	60fb      	str	r3, [r7, #12]
}
 800abf0:	bf00      	nop
 800abf2:	e7fe      	b.n	800abf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	3318      	adds	r3, #24
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fe fcc7 	bl	800958c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abfe:	4b1e      	ldr	r3, [pc, #120]	; (800ac78 <xTaskRemoveFromEventList+0xb0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d11d      	bne.n	800ac42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	3304      	adds	r3, #4
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fcbe 	bl	800958c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac14:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <xTaskRemoveFromEventList+0xb4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d903      	bls.n	800ac24 <xTaskRemoveFromEventList+0x5c>
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac20:	4a16      	ldr	r2, [pc, #88]	; (800ac7c <xTaskRemoveFromEventList+0xb4>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4a13      	ldr	r2, [pc, #76]	; (800ac80 <xTaskRemoveFromEventList+0xb8>)
 800ac32:	441a      	add	r2, r3
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	3304      	adds	r3, #4
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7fe fc49 	bl	80094d2 <vListInsertEnd>
 800ac40:	e005      	b.n	800ac4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	3318      	adds	r3, #24
 800ac46:	4619      	mov	r1, r3
 800ac48:	480e      	ldr	r0, [pc, #56]	; (800ac84 <xTaskRemoveFromEventList+0xbc>)
 800ac4a:	f7fe fc42 	bl	80094d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac52:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <xTaskRemoveFromEventList+0xc0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d905      	bls.n	800ac68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac60:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <xTaskRemoveFromEventList+0xc4>)
 800ac62:	2201      	movs	r2, #1
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	e001      	b.n	800ac6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac6c:	697b      	ldr	r3, [r7, #20]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	2000178c 	.word	0x2000178c
 800ac7c:	2000176c 	.word	0x2000176c
 800ac80:	20001294 	.word	0x20001294
 800ac84:	20001724 	.word	0x20001724
 800ac88:	20001290 	.word	0x20001290
 800ac8c:	20001778 	.word	0x20001778

0800ac90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac98:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <vTaskInternalSetTimeOutState+0x24>)
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <vTaskInternalSetTimeOutState+0x28>)
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	605a      	str	r2, [r3, #4]
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	2000177c 	.word	0x2000177c
 800acb8:	20001768 	.word	0x20001768

0800acbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b088      	sub	sp, #32
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	613b      	str	r3, [r7, #16]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10a      	bne.n	800acfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	60fb      	str	r3, [r7, #12]
}
 800acfa:	bf00      	nop
 800acfc:	e7fe      	b.n	800acfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800acfe:	f001 f881 	bl	800be04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad02:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <xTaskCheckForTimeOut+0xbc>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	69ba      	ldr	r2, [r7, #24]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d102      	bne.n	800ad22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	61fb      	str	r3, [r7, #28]
 800ad20:	e023      	b.n	800ad6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <xTaskCheckForTimeOut+0xc0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d007      	beq.n	800ad3e <xTaskCheckForTimeOut+0x82>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	69ba      	ldr	r2, [r7, #24]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d302      	bcc.n	800ad3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	e015      	b.n	800ad6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d20b      	bcs.n	800ad60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	1ad2      	subs	r2, r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff ff9b 	bl	800ac90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	e004      	b.n	800ad6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad66:	2301      	movs	r3, #1
 800ad68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad6a:	f001 f87b 	bl	800be64 <vPortExitCritical>

	return xReturn;
 800ad6e:	69fb      	ldr	r3, [r7, #28]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3720      	adds	r7, #32
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	20001768 	.word	0x20001768
 800ad7c:	2000177c 	.word	0x2000177c

0800ad80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad84:	4b03      	ldr	r3, [pc, #12]	; (800ad94 <vTaskMissedYield+0x14>)
 800ad86:	2201      	movs	r2, #1
 800ad88:	601a      	str	r2, [r3, #0]
}
 800ad8a:	bf00      	nop
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	20001778 	.word	0x20001778

0800ad98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ada0:	f000 f852 	bl	800ae48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ada4:	4b06      	ldr	r3, [pc, #24]	; (800adc0 <prvIdleTask+0x28>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d9f9      	bls.n	800ada0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <prvIdleTask+0x2c>)
 800adae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800adbc:	e7f0      	b.n	800ada0 <prvIdleTask+0x8>
 800adbe:	bf00      	nop
 800adc0:	20001294 	.word	0x20001294
 800adc4:	e000ed04 	.word	0xe000ed04

0800adc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adce:	2300      	movs	r3, #0
 800add0:	607b      	str	r3, [r7, #4]
 800add2:	e00c      	b.n	800adee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4a12      	ldr	r2, [pc, #72]	; (800ae28 <prvInitialiseTaskLists+0x60>)
 800ade0:	4413      	add	r3, r2
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fb48 	bl	8009478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3301      	adds	r3, #1
 800adec:	607b      	str	r3, [r7, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b37      	cmp	r3, #55	; 0x37
 800adf2:	d9ef      	bls.n	800add4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800adf4:	480d      	ldr	r0, [pc, #52]	; (800ae2c <prvInitialiseTaskLists+0x64>)
 800adf6:	f7fe fb3f 	bl	8009478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adfa:	480d      	ldr	r0, [pc, #52]	; (800ae30 <prvInitialiseTaskLists+0x68>)
 800adfc:	f7fe fb3c 	bl	8009478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae00:	480c      	ldr	r0, [pc, #48]	; (800ae34 <prvInitialiseTaskLists+0x6c>)
 800ae02:	f7fe fb39 	bl	8009478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae06:	480c      	ldr	r0, [pc, #48]	; (800ae38 <prvInitialiseTaskLists+0x70>)
 800ae08:	f7fe fb36 	bl	8009478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae0c:	480b      	ldr	r0, [pc, #44]	; (800ae3c <prvInitialiseTaskLists+0x74>)
 800ae0e:	f7fe fb33 	bl	8009478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae12:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <prvInitialiseTaskLists+0x78>)
 800ae14:	4a05      	ldr	r2, [pc, #20]	; (800ae2c <prvInitialiseTaskLists+0x64>)
 800ae16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae18:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <prvInitialiseTaskLists+0x7c>)
 800ae1a:	4a05      	ldr	r2, [pc, #20]	; (800ae30 <prvInitialiseTaskLists+0x68>)
 800ae1c:	601a      	str	r2, [r3, #0]
}
 800ae1e:	bf00      	nop
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20001294 	.word	0x20001294
 800ae2c:	200016f4 	.word	0x200016f4
 800ae30:	20001708 	.word	0x20001708
 800ae34:	20001724 	.word	0x20001724
 800ae38:	20001738 	.word	0x20001738
 800ae3c:	20001750 	.word	0x20001750
 800ae40:	2000171c 	.word	0x2000171c
 800ae44:	20001720 	.word	0x20001720

0800ae48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae4e:	e019      	b.n	800ae84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae50:	f000 ffd8 	bl	800be04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae54:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <prvCheckTasksWaitingTermination+0x50>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fe fb93 	bl	800958c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae66:	4b0d      	ldr	r3, [pc, #52]	; (800ae9c <prvCheckTasksWaitingTermination+0x54>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	4a0b      	ldr	r2, [pc, #44]	; (800ae9c <prvCheckTasksWaitingTermination+0x54>)
 800ae6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae70:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <prvCheckTasksWaitingTermination+0x58>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	4a0a      	ldr	r2, [pc, #40]	; (800aea0 <prvCheckTasksWaitingTermination+0x58>)
 800ae78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae7a:	f000 fff3 	bl	800be64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f810 	bl	800aea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae84:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <prvCheckTasksWaitingTermination+0x58>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e1      	bne.n	800ae50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20001738 	.word	0x20001738
 800ae9c:	20001764 	.word	0x20001764
 800aea0:	2000174c 	.word	0x2000174c

0800aea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3354      	adds	r3, #84	; 0x54
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f002 f987 	bl	800d1c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d108      	bne.n	800aed2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 f98b 	bl	800c1e0 <vPortFree>
				vPortFree( pxTCB );
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f001 f988 	bl	800c1e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aed0:	e018      	b.n	800af04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d103      	bne.n	800aee4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 f97f 	bl	800c1e0 <vPortFree>
	}
 800aee2:	e00f      	b.n	800af04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d00a      	beq.n	800af04 <prvDeleteTCB+0x60>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	60fb      	str	r3, [r7, #12]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <prvDeleteTCB+0x5e>
	}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af12:	4b0c      	ldr	r3, [pc, #48]	; (800af44 <prvResetNextTaskUnblockTime+0x38>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af1c:	4b0a      	ldr	r3, [pc, #40]	; (800af48 <prvResetNextTaskUnblockTime+0x3c>)
 800af1e:	f04f 32ff 	mov.w	r2, #4294967295
 800af22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af24:	e008      	b.n	800af38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af26:	4b07      	ldr	r3, [pc, #28]	; (800af44 <prvResetNextTaskUnblockTime+0x38>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	4a04      	ldr	r2, [pc, #16]	; (800af48 <prvResetNextTaskUnblockTime+0x3c>)
 800af36:	6013      	str	r3, [r2, #0]
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	2000171c 	.word	0x2000171c
 800af48:	20001784 	.word	0x20001784

0800af4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af52:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <xTaskGetSchedulerState+0x34>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af5a:	2301      	movs	r3, #1
 800af5c:	607b      	str	r3, [r7, #4]
 800af5e:	e008      	b.n	800af72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af60:	4b08      	ldr	r3, [pc, #32]	; (800af84 <xTaskGetSchedulerState+0x38>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af68:	2302      	movs	r3, #2
 800af6a:	607b      	str	r3, [r7, #4]
 800af6c:	e001      	b.n	800af72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af6e:	2300      	movs	r3, #0
 800af70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af72:	687b      	ldr	r3, [r7, #4]
	}
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20001770 	.word	0x20001770
 800af84:	2000178c 	.word	0x2000178c

0800af88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af94:	2300      	movs	r3, #0
 800af96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d056      	beq.n	800b04c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af9e:	4b2e      	ldr	r3, [pc, #184]	; (800b058 <xTaskPriorityDisinherit+0xd0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d00a      	beq.n	800afbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	60fb      	str	r3, [r7, #12]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	60bb      	str	r3, [r7, #8]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe0:	1e5a      	subs	r2, r3, #1
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afee:	429a      	cmp	r2, r3
 800aff0:	d02c      	beq.n	800b04c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d128      	bne.n	800b04c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	3304      	adds	r3, #4
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fac4 	bl	800958c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01c:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <xTaskPriorityDisinherit+0xd4>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d903      	bls.n	800b02c <xTaskPriorityDisinherit+0xa4>
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b028:	4a0c      	ldr	r2, [pc, #48]	; (800b05c <xTaskPriorityDisinherit+0xd4>)
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4a09      	ldr	r2, [pc, #36]	; (800b060 <xTaskPriorityDisinherit+0xd8>)
 800b03a:	441a      	add	r2, r3
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	3304      	adds	r3, #4
 800b040:	4619      	mov	r1, r3
 800b042:	4610      	mov	r0, r2
 800b044:	f7fe fa45 	bl	80094d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b048:	2301      	movs	r3, #1
 800b04a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b04c:	697b      	ldr	r3, [r7, #20]
	}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20001290 	.word	0x20001290
 800b05c:	2000176c 	.word	0x2000176c
 800b060:	20001294 	.word	0x20001294

0800b064 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b072:	f000 fec7 	bl	800be04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b076:	4b29      	ldr	r3, [pc, #164]	; (800b11c <xTaskNotifyWait+0xb8>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b02      	cmp	r3, #2
 800b082:	d01c      	beq.n	800b0be <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b084:	4b25      	ldr	r3, [pc, #148]	; (800b11c <xTaskNotifyWait+0xb8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	43d2      	mvns	r2, r2
 800b090:	400a      	ands	r2, r1
 800b092:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b096:	4b21      	ldr	r3, [pc, #132]	; (800b11c <xTaskNotifyWait+0xb8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00b      	beq.n	800b0be <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	6838      	ldr	r0, [r7, #0]
 800b0aa:	f000 f9dd 	bl	800b468 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b0ae:	4b1c      	ldr	r3, [pc, #112]	; (800b120 <xTaskNotifyWait+0xbc>)
 800b0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b0be:	f000 fed1 	bl	800be64 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b0c2:	f000 fe9f 	bl	800be04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d005      	beq.n	800b0d8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b0cc:	4b13      	ldr	r3, [pc, #76]	; (800b11c <xTaskNotifyWait+0xb8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b0d8:	4b10      	ldr	r3, [pc, #64]	; (800b11c <xTaskNotifyWait+0xb8>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d002      	beq.n	800b0ec <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	e00a      	b.n	800b102 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b0ec:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <xTaskNotifyWait+0xb8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	43d2      	mvns	r2, r2
 800b0f8:	400a      	ands	r2, r1
 800b0fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800b0fe:	2301      	movs	r3, #1
 800b100:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b102:	4b06      	ldr	r3, [pc, #24]	; (800b11c <xTaskNotifyWait+0xb8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800b10c:	f000 feaa 	bl	800be64 <vPortExitCritical>

		return xReturn;
 800b110:	697b      	ldr	r3, [r7, #20]
	}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20001290 	.word	0x20001290
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	4613      	mov	r3, r2
 800b132:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b134:	2301      	movs	r3, #1
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10a      	bne.n	800b154 <xTaskGenericNotify+0x30>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	61bb      	str	r3, [r7, #24]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b158:	f000 fe54 	bl	800be04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b172:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	2202      	movs	r2, #2
 800b178:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d82d      	bhi.n	800b1de <xTaskGenericNotify+0xba>
 800b182:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <xTaskGenericNotify+0x64>)
 800b184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b188:	0800b201 	.word	0x0800b201
 800b18c:	0800b19d 	.word	0x0800b19d
 800b190:	0800b1af 	.word	0x0800b1af
 800b194:	0800b1bf 	.word	0x0800b1bf
 800b198:	0800b1c9 	.word	0x0800b1c9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	431a      	orrs	r2, r3
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b1ac:	e02b      	b.n	800b206 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b1bc:	e023      	b.n	800b206 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b1c6:	e01e      	b.n	800b206 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b1c8:	7ffb      	ldrb	r3, [r7, #31]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d004      	beq.n	800b1d8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b1d6:	e016      	b.n	800b206 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b1dc:	e013      	b.n	800b206 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e8:	d00c      	beq.n	800b204 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	617b      	str	r3, [r7, #20]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <xTaskGenericNotify+0xda>
					break;
 800b200:	bf00      	nop
 800b202:	e000      	b.n	800b206 <xTaskGenericNotify+0xe2>

					break;
 800b204:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b206:	7ffb      	ldrb	r3, [r7, #31]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d13a      	bne.n	800b282 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	3304      	adds	r3, #4
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe f9bb 	bl	800958c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21a:	4b1d      	ldr	r3, [pc, #116]	; (800b290 <xTaskGenericNotify+0x16c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d903      	bls.n	800b22a <xTaskGenericNotify+0x106>
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	4a1a      	ldr	r2, [pc, #104]	; (800b290 <xTaskGenericNotify+0x16c>)
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4a17      	ldr	r2, [pc, #92]	; (800b294 <xTaskGenericNotify+0x170>)
 800b238:	441a      	add	r2, r3
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4619      	mov	r1, r3
 800b240:	4610      	mov	r0, r2
 800b242:	f7fe f946 	bl	80094d2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <xTaskGenericNotify+0x140>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	613b      	str	r3, [r7, #16]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b268:	4b0b      	ldr	r3, [pc, #44]	; (800b298 <xTaskGenericNotify+0x174>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	429a      	cmp	r2, r3
 800b270:	d907      	bls.n	800b282 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b272:	4b0a      	ldr	r3, [pc, #40]	; (800b29c <xTaskGenericNotify+0x178>)
 800b274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b282:	f000 fdef 	bl	800be64 <vPortExitCritical>

		return xReturn;
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b288:	4618      	mov	r0, r3
 800b28a:	3728      	adds	r7, #40	; 0x28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	2000176c 	.word	0x2000176c
 800b294:	20001294 	.word	0x20001294
 800b298:	20001290 	.word	0x20001290
 800b29c:	e000ed04 	.word	0xe000ed04

0800b2a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08e      	sub	sp, #56	; 0x38
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	603b      	str	r3, [r7, #0]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10a      	bne.n	800b2d0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2d0:	f000 fe7a 	bl	800bfc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b2d8:	f3ef 8211 	mrs	r2, BASEPRI
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	623a      	str	r2, [r7, #32]
 800b2ee:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b2f0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d004      	beq.n	800b304 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b30a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	2202      	movs	r2, #2
 800b312:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	2b04      	cmp	r3, #4
 800b31a:	d82f      	bhi.n	800b37c <xTaskGenericNotifyFromISR+0xdc>
 800b31c:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <xTaskGenericNotifyFromISR+0x84>)
 800b31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b322:	bf00      	nop
 800b324:	0800b39f 	.word	0x0800b39f
 800b328:	0800b339 	.word	0x0800b339
 800b32c:	0800b34b 	.word	0x0800b34b
 800b330:	0800b35b 	.word	0x0800b35b
 800b334:	0800b365 	.word	0x0800b365
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	431a      	orrs	r2, r3
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b348:	e02c      	b.n	800b3a4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b358:	e024      	b.n	800b3a4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b362:	e01f      	b.n	800b3a4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b364:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d004      	beq.n	800b376 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b374:	e016      	b.n	800b3a4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b376:	2300      	movs	r3, #0
 800b378:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b37a:	e013      	b.n	800b3a4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b386:	d00c      	beq.n	800b3a2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	61bb      	str	r3, [r7, #24]
}
 800b39a:	bf00      	nop
 800b39c:	e7fe      	b.n	800b39c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b39e:	bf00      	nop
 800b3a0:	e000      	b.n	800b3a4 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b3a2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b3a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d146      	bne.n	800b43a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00a      	beq.n	800b3ca <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	617b      	str	r3, [r7, #20]
}
 800b3c6:	bf00      	nop
 800b3c8:	e7fe      	b.n	800b3c8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ca:	4b21      	ldr	r3, [pc, #132]	; (800b450 <xTaskGenericNotifyFromISR+0x1b0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d11d      	bne.n	800b40e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fe f8d8 	bl	800958c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e0:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <xTaskGenericNotifyFromISR+0x1b4>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d903      	bls.n	800b3f0 <xTaskGenericNotifyFromISR+0x150>
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	4a19      	ldr	r2, [pc, #100]	; (800b454 <xTaskGenericNotifyFromISR+0x1b4>)
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4413      	add	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4a16      	ldr	r2, [pc, #88]	; (800b458 <xTaskGenericNotifyFromISR+0x1b8>)
 800b3fe:	441a      	add	r2, r3
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	3304      	adds	r3, #4
 800b404:	4619      	mov	r1, r3
 800b406:	4610      	mov	r0, r2
 800b408:	f7fe f863 	bl	80094d2 <vListInsertEnd>
 800b40c:	e005      	b.n	800b41a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	3318      	adds	r3, #24
 800b412:	4619      	mov	r1, r3
 800b414:	4811      	ldr	r0, [pc, #68]	; (800b45c <xTaskGenericNotifyFromISR+0x1bc>)
 800b416:	f7fe f85c 	bl	80094d2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	4b10      	ldr	r3, [pc, #64]	; (800b460 <xTaskGenericNotifyFromISR+0x1c0>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b424:	429a      	cmp	r2, r3
 800b426:	d908      	bls.n	800b43a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b430:	2201      	movs	r2, #1
 800b432:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b434:	4b0b      	ldr	r3, [pc, #44]	; (800b464 <xTaskGenericNotifyFromISR+0x1c4>)
 800b436:	2201      	movs	r2, #1
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f383 8811 	msr	BASEPRI, r3
}
 800b444:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b448:	4618      	mov	r0, r3
 800b44a:	3738      	adds	r7, #56	; 0x38
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	2000178c 	.word	0x2000178c
 800b454:	2000176c 	.word	0x2000176c
 800b458:	20001294 	.word	0x20001294
 800b45c:	20001724 	.word	0x20001724
 800b460:	20001290 	.word	0x20001290
 800b464:	20001778 	.word	0x20001778

0800b468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b472:	4b21      	ldr	r3, [pc, #132]	; (800b4f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b478:	4b20      	ldr	r3, [pc, #128]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe f884 	bl	800958c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48a:	d10a      	bne.n	800b4a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b492:	4b1a      	ldr	r3, [pc, #104]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4819      	ldr	r0, [pc, #100]	; (800b500 <prvAddCurrentTaskToDelayedList+0x98>)
 800b49c:	f7fe f819 	bl	80094d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4a0:	e026      	b.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4aa:	4b14      	ldr	r3, [pc, #80]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d209      	bcs.n	800b4ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ba:	4b12      	ldr	r3, [pc, #72]	; (800b504 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	f7fe f827 	bl	800951a <vListInsert>
}
 800b4cc:	e010      	b.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ce:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f7fe f81d 	bl	800951a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d202      	bcs.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4ea:	4a08      	ldr	r2, [pc, #32]	; (800b50c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	6013      	str	r3, [r2, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20001768 	.word	0x20001768
 800b4fc:	20001290 	.word	0x20001290
 800b500:	20001750 	.word	0x20001750
 800b504:	20001720 	.word	0x20001720
 800b508:	2000171c 	.word	0x2000171c
 800b50c:	20001784 	.word	0x20001784

0800b510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08a      	sub	sp, #40	; 0x28
 800b514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b51a:	f000 fb07 	bl	800bb2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b51e:	4b1c      	ldr	r3, [pc, #112]	; (800b590 <xTimerCreateTimerTask+0x80>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d021      	beq.n	800b56a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b52e:	1d3a      	adds	r2, r7, #4
 800b530:	f107 0108 	add.w	r1, r7, #8
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fd ff83 	bl	8009444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	9202      	str	r2, [sp, #8]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	2302      	movs	r3, #2
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2300      	movs	r3, #0
 800b54e:	460a      	mov	r2, r1
 800b550:	4910      	ldr	r1, [pc, #64]	; (800b594 <xTimerCreateTimerTask+0x84>)
 800b552:	4811      	ldr	r0, [pc, #68]	; (800b598 <xTimerCreateTimerTask+0x88>)
 800b554:	f7fe fe22 	bl	800a19c <xTaskCreateStatic>
 800b558:	4603      	mov	r3, r0
 800b55a:	4a10      	ldr	r2, [pc, #64]	; (800b59c <xTimerCreateTimerTask+0x8c>)
 800b55c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b55e:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <xTimerCreateTimerTask+0x8c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b566:	2301      	movs	r3, #1
 800b568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	613b      	str	r3, [r7, #16]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b586:	697b      	ldr	r3, [r7, #20]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	200017c0 	.word	0x200017c0
 800b594:	08010a54 	.word	0x08010a54
 800b598:	0800b6d5 	.word	0x0800b6d5
 800b59c:	200017c4 	.word	0x200017c4

0800b5a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	; 0x28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <xTimerGenericCommand+0x2e>
	__asm volatile
 800b5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5bc:	f383 8811 	msr	BASEPRI, r3
 800b5c0:	f3bf 8f6f 	isb	sy
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	623b      	str	r3, [r7, #32]
}
 800b5ca:	bf00      	nop
 800b5cc:	e7fe      	b.n	800b5cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5ce:	4b1a      	ldr	r3, [pc, #104]	; (800b638 <xTimerGenericCommand+0x98>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d02a      	beq.n	800b62c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b05      	cmp	r3, #5
 800b5e6:	dc18      	bgt.n	800b61a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5e8:	f7ff fcb0 	bl	800af4c <xTaskGetSchedulerState>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d109      	bne.n	800b606 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5f2:	4b11      	ldr	r3, [pc, #68]	; (800b638 <xTimerGenericCommand+0x98>)
 800b5f4:	6818      	ldr	r0, [r3, #0]
 800b5f6:	f107 0110 	add.w	r1, r7, #16
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fe:	f7fe f997 	bl	8009930 <xQueueGenericSend>
 800b602:	6278      	str	r0, [r7, #36]	; 0x24
 800b604:	e012      	b.n	800b62c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <xTimerGenericCommand+0x98>)
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	f107 0110 	add.w	r1, r7, #16
 800b60e:	2300      	movs	r3, #0
 800b610:	2200      	movs	r2, #0
 800b612:	f7fe f98d 	bl	8009930 <xQueueGenericSend>
 800b616:	6278      	str	r0, [r7, #36]	; 0x24
 800b618:	e008      	b.n	800b62c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b61a:	4b07      	ldr	r3, [pc, #28]	; (800b638 <xTimerGenericCommand+0x98>)
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	f107 0110 	add.w	r1, r7, #16
 800b622:	2300      	movs	r3, #0
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	f7fe fa81 	bl	8009b2c <xQueueGenericSendFromISR>
 800b62a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3728      	adds	r7, #40	; 0x28
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	200017c0 	.word	0x200017c0

0800b63c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af02      	add	r7, sp, #8
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b646:	4b22      	ldr	r3, [pc, #136]	; (800b6d0 <prvProcessExpiredTimer+0x94>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f7fd ff99 	bl	800958c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d022      	beq.n	800b6ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	699a      	ldr	r2, [r3, #24]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	18d1      	adds	r1, r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	6978      	ldr	r0, [r7, #20]
 800b676:	f000 f8d1 	bl	800b81c <prvInsertTimerInActiveList>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d01f      	beq.n	800b6c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b680:	2300      	movs	r3, #0
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	2300      	movs	r3, #0
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	2100      	movs	r1, #0
 800b68a:	6978      	ldr	r0, [r7, #20]
 800b68c:	f7ff ff88 	bl	800b5a0 <xTimerGenericCommand>
 800b690:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d113      	bne.n	800b6c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	60fb      	str	r3, [r7, #12]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6b4:	f023 0301 	bic.w	r3, r3, #1
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	6978      	ldr	r0, [r7, #20]
 800b6c6:	4798      	blx	r3
}
 800b6c8:	bf00      	nop
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	200017b8 	.word	0x200017b8

0800b6d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6dc:	f107 0308 	add.w	r3, r7, #8
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 f857 	bl	800b794 <prvGetNextExpireTime>
 800b6e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 f803 	bl	800b6f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6f2:	f000 f8d5 	bl	800b8a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6f6:	e7f1      	b.n	800b6dc <prvTimerTask+0x8>

0800b6f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b702:	f7ff f825 	bl	800a750 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b706:	f107 0308 	add.w	r3, r7, #8
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 f866 	bl	800b7dc <prvSampleTimeNow>
 800b710:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d130      	bne.n	800b77a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <prvProcessTimerOrBlockTask+0x3c>
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	429a      	cmp	r2, r3
 800b724:	d806      	bhi.n	800b734 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b726:	f7ff f821 	bl	800a76c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b72a:	68f9      	ldr	r1, [r7, #12]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff ff85 	bl	800b63c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b732:	e024      	b.n	800b77e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d008      	beq.n	800b74c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b73a:	4b13      	ldr	r3, [pc, #76]	; (800b788 <prvProcessTimerOrBlockTask+0x90>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <prvProcessTimerOrBlockTask+0x50>
 800b744:	2301      	movs	r3, #1
 800b746:	e000      	b.n	800b74a <prvProcessTimerOrBlockTask+0x52>
 800b748:	2300      	movs	r3, #0
 800b74a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b74c:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <prvProcessTimerOrBlockTask+0x94>)
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	4619      	mov	r1, r3
 800b75a:	f7fe fceb 	bl	800a134 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b75e:	f7ff f805 	bl	800a76c <xTaskResumeAll>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b768:	4b09      	ldr	r3, [pc, #36]	; (800b790 <prvProcessTimerOrBlockTask+0x98>)
 800b76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	f3bf 8f6f 	isb	sy
}
 800b778:	e001      	b.n	800b77e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b77a:	f7fe fff7 	bl	800a76c <xTaskResumeAll>
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	200017bc 	.word	0x200017bc
 800b78c:	200017c0 	.word	0x200017c0
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b79c:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <prvGetNextExpireTime+0x44>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <prvGetNextExpireTime+0x16>
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	e000      	b.n	800b7ac <prvGetNextExpireTime+0x18>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d105      	bne.n	800b7c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7b8:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <prvGetNextExpireTime+0x44>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	e001      	b.n	800b7c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	200017b8 	.word	0x200017b8

0800b7dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7e4:	f7ff f860 	bl	800a8a8 <xTaskGetTickCount>
 800b7e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7ea:	4b0b      	ldr	r3, [pc, #44]	; (800b818 <prvSampleTimeNow+0x3c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d205      	bcs.n	800b800 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7f4:	f000 f936 	bl	800ba64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	e002      	b.n	800b806 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b806:	4a04      	ldr	r2, [pc, #16]	; (800b818 <prvSampleTimeNow+0x3c>)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b80c:	68fb      	ldr	r3, [r7, #12]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	200017c8 	.word	0x200017c8

0800b81c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d812      	bhi.n	800b868 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	1ad2      	subs	r2, r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d302      	bcc.n	800b856 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b850:	2301      	movs	r3, #1
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	e01b      	b.n	800b88e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b856:	4b10      	ldr	r3, [pc, #64]	; (800b898 <prvInsertTimerInActiveList+0x7c>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3304      	adds	r3, #4
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7fd fe5a 	bl	800951a <vListInsert>
 800b866:	e012      	b.n	800b88e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d206      	bcs.n	800b87e <prvInsertTimerInActiveList+0x62>
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d302      	bcc.n	800b87e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e007      	b.n	800b88e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b87e:	4b07      	ldr	r3, [pc, #28]	; (800b89c <prvInsertTimerInActiveList+0x80>)
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3304      	adds	r3, #4
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7fd fe46 	bl	800951a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b88e:	697b      	ldr	r3, [r7, #20]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	200017bc 	.word	0x200017bc
 800b89c:	200017b8 	.word	0x200017b8

0800b8a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08e      	sub	sp, #56	; 0x38
 800b8a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8a6:	e0ca      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	da18      	bge.n	800b8e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8ae:	1d3b      	adds	r3, r7, #4
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	61fb      	str	r3, [r7, #28]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8d6:	6850      	ldr	r0, [r2, #4]
 800b8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8da:	6892      	ldr	r2, [r2, #8]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f2c0 80aa 	blt.w	800ba3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fd fe47 	bl	800958c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8fe:	463b      	mov	r3, r7
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff ff6b 	bl	800b7dc <prvSampleTimeNow>
 800b906:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b09      	cmp	r3, #9
 800b90c:	f200 8097 	bhi.w	800ba3e <prvProcessReceivedCommands+0x19e>
 800b910:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <prvProcessReceivedCommands+0x78>)
 800b912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b916:	bf00      	nop
 800b918:	0800b941 	.word	0x0800b941
 800b91c:	0800b941 	.word	0x0800b941
 800b920:	0800b941 	.word	0x0800b941
 800b924:	0800b9b5 	.word	0x0800b9b5
 800b928:	0800b9c9 	.word	0x0800b9c9
 800b92c:	0800ba13 	.word	0x0800ba13
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b941 	.word	0x0800b941
 800b938:	0800b9b5 	.word	0x0800b9b5
 800b93c:	0800b9c9 	.word	0x0800b9c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	18d1      	adds	r1, r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b960:	f7ff ff5c 	bl	800b81c <prvInsertTimerInActiveList>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d069      	beq.n	800ba3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d05e      	beq.n	800ba3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	441a      	add	r2, r3
 800b988:	2300      	movs	r3, #0
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	2300      	movs	r3, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b992:	f7ff fe05 	bl	800b5a0 <xTimerGenericCommand>
 800b996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d14f      	bne.n	800ba3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	61bb      	str	r3, [r7, #24]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ba:	f023 0301 	bic.w	r3, r3, #1
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b9c6:	e03a      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ce:	f043 0301 	orr.w	r3, r3, #1
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10a      	bne.n	800b9fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	617b      	str	r3, [r7, #20]
}
 800b9fa:	bf00      	nop
 800b9fc:	e7fe      	b.n	800b9fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	699a      	ldr	r2, [r3, #24]
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	18d1      	adds	r1, r2, r3
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba0c:	f7ff ff06 	bl	800b81c <prvInsertTimerInActiveList>
					break;
 800ba10:	e015      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d103      	bne.n	800ba28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ba20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba22:	f000 fbdd 	bl	800c1e0 <vPortFree>
 800ba26:	e00a      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba2e:	f023 0301 	bic.w	r3, r3, #1
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba3a:	e000      	b.n	800ba3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba3e:	4b08      	ldr	r3, [pc, #32]	; (800ba60 <prvProcessReceivedCommands+0x1c0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	1d39      	adds	r1, r7, #4
 800ba44:	2200      	movs	r2, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe f90c 	bl	8009c64 <xQueueReceive>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f47f af2a 	bne.w	800b8a8 <prvProcessReceivedCommands+0x8>
	}
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop
 800ba58:	3730      	adds	r7, #48	; 0x30
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	200017c0 	.word	0x200017c0

0800ba64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b088      	sub	sp, #32
 800ba68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba6a:	e048      	b.n	800bafe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba6c:	4b2d      	ldr	r3, [pc, #180]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba76:	4b2b      	ldr	r3, [pc, #172]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fd fd81 	bl	800958c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d02e      	beq.n	800bafe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	4413      	add	r3, r2
 800baa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d90e      	bls.n	800bad0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800babe:	4b19      	ldr	r3, [pc, #100]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7fd fd26 	bl	800951a <vListInsert>
 800bace:	e016      	b.n	800bafe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bad0:	2300      	movs	r3, #0
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	2100      	movs	r1, #0
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff fd60 	bl	800b5a0 <xTimerGenericCommand>
 800bae0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	603b      	str	r3, [r7, #0]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1b1      	bne.n	800ba6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb08:	4b06      	ldr	r3, [pc, #24]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb0e:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <prvSwitchTimerLists+0xc4>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a04      	ldr	r2, [pc, #16]	; (800bb24 <prvSwitchTimerLists+0xc0>)
 800bb14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb16:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <prvSwitchTimerLists+0xc4>)
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	6013      	str	r3, [r2, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	200017b8 	.word	0x200017b8
 800bb28:	200017bc 	.word	0x200017bc

0800bb2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb32:	f000 f967 	bl	800be04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb36:	4b15      	ldr	r3, [pc, #84]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d120      	bne.n	800bb80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb3e:	4814      	ldr	r0, [pc, #80]	; (800bb90 <prvCheckForValidListAndQueue+0x64>)
 800bb40:	f7fd fc9a 	bl	8009478 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb44:	4813      	ldr	r0, [pc, #76]	; (800bb94 <prvCheckForValidListAndQueue+0x68>)
 800bb46:	f7fd fc97 	bl	8009478 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <prvCheckForValidListAndQueue+0x6c>)
 800bb4c:	4a10      	ldr	r2, [pc, #64]	; (800bb90 <prvCheckForValidListAndQueue+0x64>)
 800bb4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb50:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <prvCheckForValidListAndQueue+0x70>)
 800bb52:	4a10      	ldr	r2, [pc, #64]	; (800bb94 <prvCheckForValidListAndQueue+0x68>)
 800bb54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb56:	2300      	movs	r3, #0
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	4b11      	ldr	r3, [pc, #68]	; (800bba0 <prvCheckForValidListAndQueue+0x74>)
 800bb5c:	4a11      	ldr	r2, [pc, #68]	; (800bba4 <prvCheckForValidListAndQueue+0x78>)
 800bb5e:	2110      	movs	r1, #16
 800bb60:	200a      	movs	r0, #10
 800bb62:	f7fd fda5 	bl	80096b0 <xQueueGenericCreateStatic>
 800bb66:	4603      	mov	r3, r0
 800bb68:	4a08      	ldr	r2, [pc, #32]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb6c:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb74:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <prvCheckForValidListAndQueue+0x60>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	490b      	ldr	r1, [pc, #44]	; (800bba8 <prvCheckForValidListAndQueue+0x7c>)
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fa86 	bl	800a08c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb80:	f000 f970 	bl	800be64 <vPortExitCritical>
}
 800bb84:	bf00      	nop
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	200017c0 	.word	0x200017c0
 800bb90:	20001790 	.word	0x20001790
 800bb94:	200017a4 	.word	0x200017a4
 800bb98:	200017b8 	.word	0x200017b8
 800bb9c:	200017bc 	.word	0x200017bc
 800bba0:	2000186c 	.word	0x2000186c
 800bba4:	200017cc 	.word	0x200017cc
 800bba8:	08010a5c 	.word	0x08010a5c

0800bbac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3b04      	subs	r3, #4
 800bbbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3b04      	subs	r3, #4
 800bbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f023 0201 	bic.w	r2, r3, #1
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3b04      	subs	r3, #4
 800bbda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbdc:	4a0c      	ldr	r2, [pc, #48]	; (800bc10 <pxPortInitialiseStack+0x64>)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3b14      	subs	r3, #20
 800bbe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3b04      	subs	r3, #4
 800bbf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f06f 0202 	mvn.w	r2, #2
 800bbfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	3b20      	subs	r3, #32
 800bc00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc02:	68fb      	ldr	r3, [r7, #12]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	0800bc15 	.word	0x0800bc15

0800bc14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc1e:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <prvTaskExitError+0x54>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d00a      	beq.n	800bc3e <prvTaskExitError+0x2a>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	60fb      	str	r3, [r7, #12]
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <prvTaskExitError+0x28>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	60bb      	str	r3, [r7, #8]
}
 800bc50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc52:	bf00      	nop
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0fc      	beq.n	800bc54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc5a:	bf00      	nop
 800bc5c:	bf00      	nop
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	20000078 	.word	0x20000078
 800bc6c:	00000000 	.word	0x00000000

0800bc70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc70:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <pxCurrentTCBConst2>)
 800bc72:	6819      	ldr	r1, [r3, #0]
 800bc74:	6808      	ldr	r0, [r1, #0]
 800bc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7a:	f380 8809 	msr	PSP, r0
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f04f 0000 	mov.w	r0, #0
 800bc86:	f380 8811 	msr	BASEPRI, r0
 800bc8a:	4770      	bx	lr
 800bc8c:	f3af 8000 	nop.w

0800bc90 <pxCurrentTCBConst2>:
 800bc90:	20001290 	.word	0x20001290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc98:	4808      	ldr	r0, [pc, #32]	; (800bcbc <prvPortStartFirstTask+0x24>)
 800bc9a:	6800      	ldr	r0, [r0, #0]
 800bc9c:	6800      	ldr	r0, [r0, #0]
 800bc9e:	f380 8808 	msr	MSP, r0
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f380 8814 	msr	CONTROL, r0
 800bcaa:	b662      	cpsie	i
 800bcac:	b661      	cpsie	f
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	df00      	svc	0
 800bcb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcba:	bf00      	nop
 800bcbc:	e000ed08 	.word	0xe000ed08

0800bcc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcc6:	4b46      	ldr	r3, [pc, #280]	; (800bde0 <xPortStartScheduler+0x120>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a46      	ldr	r2, [pc, #280]	; (800bde4 <xPortStartScheduler+0x124>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d10a      	bne.n	800bce6 <xPortStartScheduler+0x26>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	613b      	str	r3, [r7, #16]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bce6:	4b3e      	ldr	r3, [pc, #248]	; (800bde0 <xPortStartScheduler+0x120>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a3f      	ldr	r2, [pc, #252]	; (800bde8 <xPortStartScheduler+0x128>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d10a      	bne.n	800bd06 <xPortStartScheduler+0x46>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	60fb      	str	r3, [r7, #12]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd06:	4b39      	ldr	r3, [pc, #228]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	22ff      	movs	r2, #255	; 0xff
 800bd16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <xPortStartScheduler+0x130>)
 800bd2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd2e:	4b31      	ldr	r3, [pc, #196]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd30:	2207      	movs	r2, #7
 800bd32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd34:	e009      	b.n	800bd4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd36:	4b2f      	ldr	r3, [pc, #188]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	4a2d      	ldr	r2, [pc, #180]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd52:	2b80      	cmp	r3, #128	; 0x80
 800bd54:	d0ef      	beq.n	800bd36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd56:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f1c3 0307 	rsb	r3, r3, #7
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	d00a      	beq.n	800bd78 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	60bb      	str	r3, [r7, #8]
}
 800bd74:	bf00      	nop
 800bd76:	e7fe      	b.n	800bd76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd78:	4b1e      	ldr	r3, [pc, #120]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	021b      	lsls	r3, r3, #8
 800bd7e:	4a1d      	ldr	r2, [pc, #116]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd82:	4b1c      	ldr	r3, [pc, #112]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd8a:	4a1a      	ldr	r2, [pc, #104]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bd8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd96:	4b18      	ldr	r3, [pc, #96]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a17      	ldr	r2, [pc, #92]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bda2:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a14      	ldr	r2, [pc, #80]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bda8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdae:	f000 f8dd 	bl	800bf6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdb2:	4b12      	ldr	r3, [pc, #72]	; (800bdfc <xPortStartScheduler+0x13c>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdb8:	f000 f8fc 	bl	800bfb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdbc:	4b10      	ldr	r3, [pc, #64]	; (800be00 <xPortStartScheduler+0x140>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a0f      	ldr	r2, [pc, #60]	; (800be00 <xPortStartScheduler+0x140>)
 800bdc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdc8:	f7ff ff66 	bl	800bc98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdcc:	f7fe fe48 	bl	800aa60 <vTaskSwitchContext>
	prvTaskExitError();
 800bdd0:	f7ff ff20 	bl	800bc14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	e000ed00 	.word	0xe000ed00
 800bde4:	410fc271 	.word	0x410fc271
 800bde8:	410fc270 	.word	0x410fc270
 800bdec:	e000e400 	.word	0xe000e400
 800bdf0:	200018bc 	.word	0x200018bc
 800bdf4:	200018c0 	.word	0x200018c0
 800bdf8:	e000ed20 	.word	0xe000ed20
 800bdfc:	20000078 	.word	0x20000078
 800be00:	e000ef34 	.word	0xe000ef34

0800be04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	607b      	str	r3, [r7, #4]
}
 800be1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be1e:	4b0f      	ldr	r3, [pc, #60]	; (800be5c <vPortEnterCritical+0x58>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	4a0d      	ldr	r2, [pc, #52]	; (800be5c <vPortEnterCritical+0x58>)
 800be26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be28:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <vPortEnterCritical+0x58>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d10f      	bne.n	800be50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be30:	4b0b      	ldr	r3, [pc, #44]	; (800be60 <vPortEnterCritical+0x5c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <vPortEnterCritical+0x4c>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	603b      	str	r3, [r7, #0]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <vPortEnterCritical+0x4a>
	}
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	20000078 	.word	0x20000078
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be6a:	4b12      	ldr	r3, [pc, #72]	; (800beb4 <vPortExitCritical+0x50>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <vPortExitCritical+0x24>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	607b      	str	r3, [r7, #4]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <vPortExitCritical+0x50>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	4a09      	ldr	r2, [pc, #36]	; (800beb4 <vPortExitCritical+0x50>)
 800be90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be92:	4b08      	ldr	r3, [pc, #32]	; (800beb4 <vPortExitCritical+0x50>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d105      	bne.n	800bea6 <vPortExitCritical+0x42>
 800be9a:	2300      	movs	r3, #0
 800be9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	f383 8811 	msr	BASEPRI, r3
}
 800bea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	20000078 	.word	0x20000078
	...

0800bec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bec0:	f3ef 8009 	mrs	r0, PSP
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	4b15      	ldr	r3, [pc, #84]	; (800bf20 <pxCurrentTCBConst>)
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	f01e 0f10 	tst.w	lr, #16
 800bed0:	bf08      	it	eq
 800bed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beda:	6010      	str	r0, [r2, #0]
 800bedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bee4:	f380 8811 	msr	BASEPRI, r0
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f7fe fdb6 	bl	800aa60 <vTaskSwitchContext>
 800bef4:	f04f 0000 	mov.w	r0, #0
 800bef8:	f380 8811 	msr	BASEPRI, r0
 800befc:	bc09      	pop	{r0, r3}
 800befe:	6819      	ldr	r1, [r3, #0]
 800bf00:	6808      	ldr	r0, [r1, #0]
 800bf02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf06:	f01e 0f10 	tst.w	lr, #16
 800bf0a:	bf08      	it	eq
 800bf0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf10:	f380 8809 	msr	PSP, r0
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w

0800bf20 <pxCurrentTCBConst>:
 800bf20:	20001290 	.word	0x20001290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop

0800bf28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	607b      	str	r3, [r7, #4]
}
 800bf40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf42:	f7fe fcd3 	bl	800a8ec <xTaskIncrementTick>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf4c:	4b06      	ldr	r3, [pc, #24]	; (800bf68 <xPortSysTickHandler+0x40>)
 800bf4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	2300      	movs	r3, #0
 800bf56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f383 8811 	msr	BASEPRI, r3
}
 800bf5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf70:	4b0b      	ldr	r3, [pc, #44]	; (800bfa0 <vPortSetupTimerInterrupt+0x34>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf76:	4b0b      	ldr	r3, [pc, #44]	; (800bfa4 <vPortSetupTimerInterrupt+0x38>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <vPortSetupTimerInterrupt+0x3c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a0a      	ldr	r2, [pc, #40]	; (800bfac <vPortSetupTimerInterrupt+0x40>)
 800bf82:	fba2 2303 	umull	r2, r3, r2, r3
 800bf86:	099b      	lsrs	r3, r3, #6
 800bf88:	4a09      	ldr	r2, [pc, #36]	; (800bfb0 <vPortSetupTimerInterrupt+0x44>)
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf8e:	4b04      	ldr	r3, [pc, #16]	; (800bfa0 <vPortSetupTimerInterrupt+0x34>)
 800bf90:	2207      	movs	r2, #7
 800bf92:	601a      	str	r2, [r3, #0]
}
 800bf94:	bf00      	nop
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	e000e010 	.word	0xe000e010
 800bfa4:	e000e018 	.word	0xe000e018
 800bfa8:	2000006c 	.word	0x2000006c
 800bfac:	10624dd3 	.word	0x10624dd3
 800bfb0:	e000e014 	.word	0xe000e014

0800bfb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfc4 <vPortEnableVFP+0x10>
 800bfb8:	6801      	ldr	r1, [r0, #0]
 800bfba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfbe:	6001      	str	r1, [r0, #0]
 800bfc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfc2:	bf00      	nop
 800bfc4:	e000ed88 	.word	0xe000ed88

0800bfc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfce:	f3ef 8305 	mrs	r3, IPSR
 800bfd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b0f      	cmp	r3, #15
 800bfd8:	d914      	bls.n	800c004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfda:	4a17      	ldr	r2, [pc, #92]	; (800c038 <vPortValidateInterruptPriority+0x70>)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfe4:	4b15      	ldr	r3, [pc, #84]	; (800c03c <vPortValidateInterruptPriority+0x74>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	7afa      	ldrb	r2, [r7, #11]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d20a      	bcs.n	800c004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	607b      	str	r3, [r7, #4]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c004:	4b0e      	ldr	r3, [pc, #56]	; (800c040 <vPortValidateInterruptPriority+0x78>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c00c:	4b0d      	ldr	r3, [pc, #52]	; (800c044 <vPortValidateInterruptPriority+0x7c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	d90a      	bls.n	800c02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	603b      	str	r3, [r7, #0]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <vPortValidateInterruptPriority+0x60>
	}
 800c02a:	bf00      	nop
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	e000e3f0 	.word	0xe000e3f0
 800c03c:	200018bc 	.word	0x200018bc
 800c040:	e000ed0c 	.word	0xe000ed0c
 800c044:	200018c0 	.word	0x200018c0

0800c048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08a      	sub	sp, #40	; 0x28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c050:	2300      	movs	r3, #0
 800c052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c054:	f7fe fb7c 	bl	800a750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c058:	4b5b      	ldr	r3, [pc, #364]	; (800c1c8 <pvPortMalloc+0x180>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c060:	f000 f920 	bl	800c2a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c064:	4b59      	ldr	r3, [pc, #356]	; (800c1cc <pvPortMalloc+0x184>)
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f040 8093 	bne.w	800c198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01d      	beq.n	800c0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c078:	2208      	movs	r2, #8
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4413      	add	r3, r2
 800c07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f003 0307 	and.w	r3, r3, #7
 800c086:	2b00      	cmp	r3, #0
 800c088:	d014      	beq.n	800c0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f023 0307 	bic.w	r3, r3, #7
 800c090:	3308      	adds	r3, #8
 800c092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00a      	beq.n	800c0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	617b      	str	r3, [r7, #20]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d06e      	beq.n	800c198 <pvPortMalloc+0x150>
 800c0ba:	4b45      	ldr	r3, [pc, #276]	; (800c1d0 <pvPortMalloc+0x188>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d869      	bhi.n	800c198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0c4:	4b43      	ldr	r3, [pc, #268]	; (800c1d4 <pvPortMalloc+0x18c>)
 800c0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0c8:	4b42      	ldr	r3, [pc, #264]	; (800c1d4 <pvPortMalloc+0x18c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ce:	e004      	b.n	800c0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d903      	bls.n	800c0ec <pvPortMalloc+0xa4>
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1f1      	bne.n	800c0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0ec:	4b36      	ldr	r3, [pc, #216]	; (800c1c8 <pvPortMalloc+0x180>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d050      	beq.n	800c198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2208      	movs	r2, #8
 800c0fc:	4413      	add	r3, r2
 800c0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	6a3b      	ldr	r3, [r7, #32]
 800c106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	2308      	movs	r3, #8
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	429a      	cmp	r2, r3
 800c116:	d91f      	bls.n	800c158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4413      	add	r3, r2
 800c11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	f003 0307 	and.w	r3, r3, #7
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00a      	beq.n	800c140 <pvPortMalloc+0xf8>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	613b      	str	r3, [r7, #16]
}
 800c13c:	bf00      	nop
 800c13e:	e7fe      	b.n	800c13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	1ad2      	subs	r2, r2, r3
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c152:	69b8      	ldr	r0, [r7, #24]
 800c154:	f000 f908 	bl	800c368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c158:	4b1d      	ldr	r3, [pc, #116]	; (800c1d0 <pvPortMalloc+0x188>)
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	4a1b      	ldr	r2, [pc, #108]	; (800c1d0 <pvPortMalloc+0x188>)
 800c164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c166:	4b1a      	ldr	r3, [pc, #104]	; (800c1d0 <pvPortMalloc+0x188>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	4b1b      	ldr	r3, [pc, #108]	; (800c1d8 <pvPortMalloc+0x190>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d203      	bcs.n	800c17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c172:	4b17      	ldr	r3, [pc, #92]	; (800c1d0 <pvPortMalloc+0x188>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a18      	ldr	r2, [pc, #96]	; (800c1d8 <pvPortMalloc+0x190>)
 800c178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	4b13      	ldr	r3, [pc, #76]	; (800c1cc <pvPortMalloc+0x184>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	431a      	orrs	r2, r3
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	2200      	movs	r2, #0
 800c18c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c18e:	4b13      	ldr	r3, [pc, #76]	; (800c1dc <pvPortMalloc+0x194>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3301      	adds	r3, #1
 800c194:	4a11      	ldr	r2, [pc, #68]	; (800c1dc <pvPortMalloc+0x194>)
 800c196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c198:	f7fe fae8 	bl	800a76c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	f003 0307 	and.w	r3, r3, #7
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00a      	beq.n	800c1bc <pvPortMalloc+0x174>
	__asm volatile
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	60fb      	str	r3, [r7, #12]
}
 800c1b8:	bf00      	nop
 800c1ba:	e7fe      	b.n	800c1ba <pvPortMalloc+0x172>
	return pvReturn;
 800c1bc:	69fb      	ldr	r3, [r7, #28]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3728      	adds	r7, #40	; 0x28
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	200054cc 	.word	0x200054cc
 800c1cc:	200054e0 	.word	0x200054e0
 800c1d0:	200054d0 	.word	0x200054d0
 800c1d4:	200054c4 	.word	0x200054c4
 800c1d8:	200054d4 	.word	0x200054d4
 800c1dc:	200054d8 	.word	0x200054d8

0800c1e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d04d      	beq.n	800c28e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1f2:	2308      	movs	r3, #8
 800c1f4:	425b      	negs	r3, r3
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	4b24      	ldr	r3, [pc, #144]	; (800c298 <vPortFree+0xb8>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4013      	ands	r3, r2
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10a      	bne.n	800c224 <vPortFree+0x44>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	60fb      	str	r3, [r7, #12]
}
 800c220:	bf00      	nop
 800c222:	e7fe      	b.n	800c222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <vPortFree+0x62>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	60bb      	str	r3, [r7, #8]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	4b14      	ldr	r3, [pc, #80]	; (800c298 <vPortFree+0xb8>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4013      	ands	r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d01e      	beq.n	800c28e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d11a      	bne.n	800c28e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	4b0e      	ldr	r3, [pc, #56]	; (800c298 <vPortFree+0xb8>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	43db      	mvns	r3, r3
 800c262:	401a      	ands	r2, r3
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c268:	f7fe fa72 	bl	800a750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	4b0a      	ldr	r3, [pc, #40]	; (800c29c <vPortFree+0xbc>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4413      	add	r3, r2
 800c276:	4a09      	ldr	r2, [pc, #36]	; (800c29c <vPortFree+0xbc>)
 800c278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c27a:	6938      	ldr	r0, [r7, #16]
 800c27c:	f000 f874 	bl	800c368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <vPortFree+0xc0>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	4a06      	ldr	r2, [pc, #24]	; (800c2a0 <vPortFree+0xc0>)
 800c288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c28a:	f7fe fa6f 	bl	800a76c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c28e:	bf00      	nop
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	200054e0 	.word	0x200054e0
 800c29c:	200054d0 	.word	0x200054d0
 800c2a0:	200054dc 	.word	0x200054dc

0800c2a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c2ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2b0:	4b27      	ldr	r3, [pc, #156]	; (800c350 <prvHeapInit+0xac>)
 800c2b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00c      	beq.n	800c2d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3307      	adds	r3, #7
 800c2c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 0307 	bic.w	r3, r3, #7
 800c2ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	4a1f      	ldr	r2, [pc, #124]	; (800c350 <prvHeapInit+0xac>)
 800c2d4:	4413      	add	r3, r2
 800c2d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2dc:	4a1d      	ldr	r2, [pc, #116]	; (800c354 <prvHeapInit+0xb0>)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2e2:	4b1c      	ldr	r3, [pc, #112]	; (800c354 <prvHeapInit+0xb0>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a15      	ldr	r2, [pc, #84]	; (800c358 <prvHeapInit+0xb4>)
 800c304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c306:	4b14      	ldr	r3, [pc, #80]	; (800c358 <prvHeapInit+0xb4>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2200      	movs	r2, #0
 800c30c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c30e:	4b12      	ldr	r3, [pc, #72]	; (800c358 <prvHeapInit+0xb4>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c324:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <prvHeapInit+0xb4>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4a0a      	ldr	r2, [pc, #40]	; (800c35c <prvHeapInit+0xb8>)
 800c332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	4a09      	ldr	r2, [pc, #36]	; (800c360 <prvHeapInit+0xbc>)
 800c33a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c33c:	4b09      	ldr	r3, [pc, #36]	; (800c364 <prvHeapInit+0xc0>)
 800c33e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c342:	601a      	str	r2, [r3, #0]
}
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	200018c4 	.word	0x200018c4
 800c354:	200054c4 	.word	0x200054c4
 800c358:	200054cc 	.word	0x200054cc
 800c35c:	200054d4 	.word	0x200054d4
 800c360:	200054d0 	.word	0x200054d0
 800c364:	200054e0 	.word	0x200054e0

0800c368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c370:	4b28      	ldr	r3, [pc, #160]	; (800c414 <prvInsertBlockIntoFreeList+0xac>)
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	e002      	b.n	800c37c <prvInsertBlockIntoFreeList+0x14>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	429a      	cmp	r2, r3
 800c384:	d8f7      	bhi.n	800c376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	4413      	add	r3, r2
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d108      	bne.n	800c3aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	441a      	add	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	441a      	add	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d118      	bne.n	800c3f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b15      	ldr	r3, [pc, #84]	; (800c418 <prvInsertBlockIntoFreeList+0xb0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d00d      	beq.n	800c3e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	e008      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3e6:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <prvInsertBlockIntoFreeList+0xb0>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	e003      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d002      	beq.n	800c406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c406:	bf00      	nop
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	200054c4 	.word	0x200054c4
 800c418:	200054cc 	.word	0x200054cc

0800c41c <__errno>:
 800c41c:	4b01      	ldr	r3, [pc, #4]	; (800c424 <__errno+0x8>)
 800c41e:	6818      	ldr	r0, [r3, #0]
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	2000007c 	.word	0x2000007c

0800c428 <std>:
 800c428:	2300      	movs	r3, #0
 800c42a:	b510      	push	{r4, lr}
 800c42c:	4604      	mov	r4, r0
 800c42e:	e9c0 3300 	strd	r3, r3, [r0]
 800c432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c436:	6083      	str	r3, [r0, #8]
 800c438:	8181      	strh	r1, [r0, #12]
 800c43a:	6643      	str	r3, [r0, #100]	; 0x64
 800c43c:	81c2      	strh	r2, [r0, #14]
 800c43e:	6183      	str	r3, [r0, #24]
 800c440:	4619      	mov	r1, r3
 800c442:	2208      	movs	r2, #8
 800c444:	305c      	adds	r0, #92	; 0x5c
 800c446:	f000 f91a 	bl	800c67e <memset>
 800c44a:	4b05      	ldr	r3, [pc, #20]	; (800c460 <std+0x38>)
 800c44c:	6263      	str	r3, [r4, #36]	; 0x24
 800c44e:	4b05      	ldr	r3, [pc, #20]	; (800c464 <std+0x3c>)
 800c450:	62a3      	str	r3, [r4, #40]	; 0x28
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <std+0x40>)
 800c454:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <std+0x44>)
 800c458:	6224      	str	r4, [r4, #32]
 800c45a:	6323      	str	r3, [r4, #48]	; 0x30
 800c45c:	bd10      	pop	{r4, pc}
 800c45e:	bf00      	nop
 800c460:	0800d29d 	.word	0x0800d29d
 800c464:	0800d2bf 	.word	0x0800d2bf
 800c468:	0800d2f7 	.word	0x0800d2f7
 800c46c:	0800d31b 	.word	0x0800d31b

0800c470 <_cleanup_r>:
 800c470:	4901      	ldr	r1, [pc, #4]	; (800c478 <_cleanup_r+0x8>)
 800c472:	f000 b8af 	b.w	800c5d4 <_fwalk_reent>
 800c476:	bf00      	nop
 800c478:	0800e2e9 	.word	0x0800e2e9

0800c47c <__sfmoreglue>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	2268      	movs	r2, #104	; 0x68
 800c480:	1e4d      	subs	r5, r1, #1
 800c482:	4355      	muls	r5, r2
 800c484:	460e      	mov	r6, r1
 800c486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c48a:	f000 f921 	bl	800c6d0 <_malloc_r>
 800c48e:	4604      	mov	r4, r0
 800c490:	b140      	cbz	r0, 800c4a4 <__sfmoreglue+0x28>
 800c492:	2100      	movs	r1, #0
 800c494:	e9c0 1600 	strd	r1, r6, [r0]
 800c498:	300c      	adds	r0, #12
 800c49a:	60a0      	str	r0, [r4, #8]
 800c49c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4a0:	f000 f8ed 	bl	800c67e <memset>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}

0800c4a8 <__sfp_lock_acquire>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__sfp_lock_acquire+0x8>)
 800c4aa:	f000 b8d8 	b.w	800c65e <__retarget_lock_acquire_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	200054e5 	.word	0x200054e5

0800c4b4 <__sfp_lock_release>:
 800c4b4:	4801      	ldr	r0, [pc, #4]	; (800c4bc <__sfp_lock_release+0x8>)
 800c4b6:	f000 b8d3 	b.w	800c660 <__retarget_lock_release_recursive>
 800c4ba:	bf00      	nop
 800c4bc:	200054e5 	.word	0x200054e5

0800c4c0 <__sinit_lock_acquire>:
 800c4c0:	4801      	ldr	r0, [pc, #4]	; (800c4c8 <__sinit_lock_acquire+0x8>)
 800c4c2:	f000 b8cc 	b.w	800c65e <__retarget_lock_acquire_recursive>
 800c4c6:	bf00      	nop
 800c4c8:	200054e6 	.word	0x200054e6

0800c4cc <__sinit_lock_release>:
 800c4cc:	4801      	ldr	r0, [pc, #4]	; (800c4d4 <__sinit_lock_release+0x8>)
 800c4ce:	f000 b8c7 	b.w	800c660 <__retarget_lock_release_recursive>
 800c4d2:	bf00      	nop
 800c4d4:	200054e6 	.word	0x200054e6

0800c4d8 <__sinit>:
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	4604      	mov	r4, r0
 800c4dc:	f7ff fff0 	bl	800c4c0 <__sinit_lock_acquire>
 800c4e0:	69a3      	ldr	r3, [r4, #24]
 800c4e2:	b11b      	cbz	r3, 800c4ec <__sinit+0x14>
 800c4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e8:	f7ff bff0 	b.w	800c4cc <__sinit_lock_release>
 800c4ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4f0:	6523      	str	r3, [r4, #80]	; 0x50
 800c4f2:	4b13      	ldr	r3, [pc, #76]	; (800c540 <__sinit+0x68>)
 800c4f4:	4a13      	ldr	r2, [pc, #76]	; (800c544 <__sinit+0x6c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4fa:	42a3      	cmp	r3, r4
 800c4fc:	bf04      	itt	eq
 800c4fe:	2301      	moveq	r3, #1
 800c500:	61a3      	streq	r3, [r4, #24]
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f820 	bl	800c548 <__sfp>
 800c508:	6060      	str	r0, [r4, #4]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f81c 	bl	800c548 <__sfp>
 800c510:	60a0      	str	r0, [r4, #8]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f818 	bl	800c548 <__sfp>
 800c518:	2200      	movs	r2, #0
 800c51a:	60e0      	str	r0, [r4, #12]
 800c51c:	2104      	movs	r1, #4
 800c51e:	6860      	ldr	r0, [r4, #4]
 800c520:	f7ff ff82 	bl	800c428 <std>
 800c524:	68a0      	ldr	r0, [r4, #8]
 800c526:	2201      	movs	r2, #1
 800c528:	2109      	movs	r1, #9
 800c52a:	f7ff ff7d 	bl	800c428 <std>
 800c52e:	68e0      	ldr	r0, [r4, #12]
 800c530:	2202      	movs	r2, #2
 800c532:	2112      	movs	r1, #18
 800c534:	f7ff ff78 	bl	800c428 <std>
 800c538:	2301      	movs	r3, #1
 800c53a:	61a3      	str	r3, [r4, #24]
 800c53c:	e7d2      	b.n	800c4e4 <__sinit+0xc>
 800c53e:	bf00      	nop
 800c540:	08010bcc 	.word	0x08010bcc
 800c544:	0800c471 	.word	0x0800c471

0800c548 <__sfp>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	4607      	mov	r7, r0
 800c54c:	f7ff ffac 	bl	800c4a8 <__sfp_lock_acquire>
 800c550:	4b1e      	ldr	r3, [pc, #120]	; (800c5cc <__sfp+0x84>)
 800c552:	681e      	ldr	r6, [r3, #0]
 800c554:	69b3      	ldr	r3, [r6, #24]
 800c556:	b913      	cbnz	r3, 800c55e <__sfp+0x16>
 800c558:	4630      	mov	r0, r6
 800c55a:	f7ff ffbd 	bl	800c4d8 <__sinit>
 800c55e:	3648      	adds	r6, #72	; 0x48
 800c560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c564:	3b01      	subs	r3, #1
 800c566:	d503      	bpl.n	800c570 <__sfp+0x28>
 800c568:	6833      	ldr	r3, [r6, #0]
 800c56a:	b30b      	cbz	r3, 800c5b0 <__sfp+0x68>
 800c56c:	6836      	ldr	r6, [r6, #0]
 800c56e:	e7f7      	b.n	800c560 <__sfp+0x18>
 800c570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c574:	b9d5      	cbnz	r5, 800c5ac <__sfp+0x64>
 800c576:	4b16      	ldr	r3, [pc, #88]	; (800c5d0 <__sfp+0x88>)
 800c578:	60e3      	str	r3, [r4, #12]
 800c57a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c57e:	6665      	str	r5, [r4, #100]	; 0x64
 800c580:	f000 f86c 	bl	800c65c <__retarget_lock_init_recursive>
 800c584:	f7ff ff96 	bl	800c4b4 <__sfp_lock_release>
 800c588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c58c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c590:	6025      	str	r5, [r4, #0]
 800c592:	61a5      	str	r5, [r4, #24]
 800c594:	2208      	movs	r2, #8
 800c596:	4629      	mov	r1, r5
 800c598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c59c:	f000 f86f 	bl	800c67e <memset>
 800c5a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ac:	3468      	adds	r4, #104	; 0x68
 800c5ae:	e7d9      	b.n	800c564 <__sfp+0x1c>
 800c5b0:	2104      	movs	r1, #4
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	f7ff ff62 	bl	800c47c <__sfmoreglue>
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	6030      	str	r0, [r6, #0]
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d1d5      	bne.n	800c56c <__sfp+0x24>
 800c5c0:	f7ff ff78 	bl	800c4b4 <__sfp_lock_release>
 800c5c4:	230c      	movs	r3, #12
 800c5c6:	603b      	str	r3, [r7, #0]
 800c5c8:	e7ee      	b.n	800c5a8 <__sfp+0x60>
 800c5ca:	bf00      	nop
 800c5cc:	08010bcc 	.word	0x08010bcc
 800c5d0:	ffff0001 	.word	0xffff0001

0800c5d4 <_fwalk_reent>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	4606      	mov	r6, r0
 800c5da:	4688      	mov	r8, r1
 800c5dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5e0:	2700      	movs	r7, #0
 800c5e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5e6:	f1b9 0901 	subs.w	r9, r9, #1
 800c5ea:	d505      	bpl.n	800c5f8 <_fwalk_reent+0x24>
 800c5ec:	6824      	ldr	r4, [r4, #0]
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	d1f7      	bne.n	800c5e2 <_fwalk_reent+0xe>
 800c5f2:	4638      	mov	r0, r7
 800c5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f8:	89ab      	ldrh	r3, [r5, #12]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d907      	bls.n	800c60e <_fwalk_reent+0x3a>
 800c5fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c602:	3301      	adds	r3, #1
 800c604:	d003      	beq.n	800c60e <_fwalk_reent+0x3a>
 800c606:	4629      	mov	r1, r5
 800c608:	4630      	mov	r0, r6
 800c60a:	47c0      	blx	r8
 800c60c:	4307      	orrs	r7, r0
 800c60e:	3568      	adds	r5, #104	; 0x68
 800c610:	e7e9      	b.n	800c5e6 <_fwalk_reent+0x12>
	...

0800c614 <__libc_init_array>:
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	4d0d      	ldr	r5, [pc, #52]	; (800c64c <__libc_init_array+0x38>)
 800c618:	4c0d      	ldr	r4, [pc, #52]	; (800c650 <__libc_init_array+0x3c>)
 800c61a:	1b64      	subs	r4, r4, r5
 800c61c:	10a4      	asrs	r4, r4, #2
 800c61e:	2600      	movs	r6, #0
 800c620:	42a6      	cmp	r6, r4
 800c622:	d109      	bne.n	800c638 <__libc_init_array+0x24>
 800c624:	4d0b      	ldr	r5, [pc, #44]	; (800c654 <__libc_init_array+0x40>)
 800c626:	4c0c      	ldr	r4, [pc, #48]	; (800c658 <__libc_init_array+0x44>)
 800c628:	f004 f84c 	bl	80106c4 <_init>
 800c62c:	1b64      	subs	r4, r4, r5
 800c62e:	10a4      	asrs	r4, r4, #2
 800c630:	2600      	movs	r6, #0
 800c632:	42a6      	cmp	r6, r4
 800c634:	d105      	bne.n	800c642 <__libc_init_array+0x2e>
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63c:	4798      	blx	r3
 800c63e:	3601      	adds	r6, #1
 800c640:	e7ee      	b.n	800c620 <__libc_init_array+0xc>
 800c642:	f855 3b04 	ldr.w	r3, [r5], #4
 800c646:	4798      	blx	r3
 800c648:	3601      	adds	r6, #1
 800c64a:	e7f2      	b.n	800c632 <__libc_init_array+0x1e>
 800c64c:	08011198 	.word	0x08011198
 800c650:	08011198 	.word	0x08011198
 800c654:	08011198 	.word	0x08011198
 800c658:	0801119c 	.word	0x0801119c

0800c65c <__retarget_lock_init_recursive>:
 800c65c:	4770      	bx	lr

0800c65e <__retarget_lock_acquire_recursive>:
 800c65e:	4770      	bx	lr

0800c660 <__retarget_lock_release_recursive>:
 800c660:	4770      	bx	lr

0800c662 <memcpy>:
 800c662:	440a      	add	r2, r1
 800c664:	4291      	cmp	r1, r2
 800c666:	f100 33ff 	add.w	r3, r0, #4294967295
 800c66a:	d100      	bne.n	800c66e <memcpy+0xc>
 800c66c:	4770      	bx	lr
 800c66e:	b510      	push	{r4, lr}
 800c670:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c678:	4291      	cmp	r1, r2
 800c67a:	d1f9      	bne.n	800c670 <memcpy+0xe>
 800c67c:	bd10      	pop	{r4, pc}

0800c67e <memset>:
 800c67e:	4402      	add	r2, r0
 800c680:	4603      	mov	r3, r0
 800c682:	4293      	cmp	r3, r2
 800c684:	d100      	bne.n	800c688 <memset+0xa>
 800c686:	4770      	bx	lr
 800c688:	f803 1b01 	strb.w	r1, [r3], #1
 800c68c:	e7f9      	b.n	800c682 <memset+0x4>
	...

0800c690 <sbrk_aligned>:
 800c690:	b570      	push	{r4, r5, r6, lr}
 800c692:	4e0e      	ldr	r6, [pc, #56]	; (800c6cc <sbrk_aligned+0x3c>)
 800c694:	460c      	mov	r4, r1
 800c696:	6831      	ldr	r1, [r6, #0]
 800c698:	4605      	mov	r5, r0
 800c69a:	b911      	cbnz	r1, 800c6a2 <sbrk_aligned+0x12>
 800c69c:	f000 fdee 	bl	800d27c <_sbrk_r>
 800c6a0:	6030      	str	r0, [r6, #0]
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f000 fde9 	bl	800d27c <_sbrk_r>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d00a      	beq.n	800c6c4 <sbrk_aligned+0x34>
 800c6ae:	1cc4      	adds	r4, r0, #3
 800c6b0:	f024 0403 	bic.w	r4, r4, #3
 800c6b4:	42a0      	cmp	r0, r4
 800c6b6:	d007      	beq.n	800c6c8 <sbrk_aligned+0x38>
 800c6b8:	1a21      	subs	r1, r4, r0
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f000 fdde 	bl	800d27c <_sbrk_r>
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	d101      	bne.n	800c6c8 <sbrk_aligned+0x38>
 800c6c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	200054ec 	.word	0x200054ec

0800c6d0 <_malloc_r>:
 800c6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d4:	1ccd      	adds	r5, r1, #3
 800c6d6:	f025 0503 	bic.w	r5, r5, #3
 800c6da:	3508      	adds	r5, #8
 800c6dc:	2d0c      	cmp	r5, #12
 800c6de:	bf38      	it	cc
 800c6e0:	250c      	movcc	r5, #12
 800c6e2:	2d00      	cmp	r5, #0
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	db01      	blt.n	800c6ec <_malloc_r+0x1c>
 800c6e8:	42a9      	cmp	r1, r5
 800c6ea:	d905      	bls.n	800c6f8 <_malloc_r+0x28>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	2600      	movs	r6, #0
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f8:	4e2e      	ldr	r6, [pc, #184]	; (800c7b4 <_malloc_r+0xe4>)
 800c6fa:	f001 feb5 	bl	800e468 <__malloc_lock>
 800c6fe:	6833      	ldr	r3, [r6, #0]
 800c700:	461c      	mov	r4, r3
 800c702:	bb34      	cbnz	r4, 800c752 <_malloc_r+0x82>
 800c704:	4629      	mov	r1, r5
 800c706:	4638      	mov	r0, r7
 800c708:	f7ff ffc2 	bl	800c690 <sbrk_aligned>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	4604      	mov	r4, r0
 800c710:	d14d      	bne.n	800c7ae <_malloc_r+0xde>
 800c712:	6834      	ldr	r4, [r6, #0]
 800c714:	4626      	mov	r6, r4
 800c716:	2e00      	cmp	r6, #0
 800c718:	d140      	bne.n	800c79c <_malloc_r+0xcc>
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	4631      	mov	r1, r6
 800c71e:	4638      	mov	r0, r7
 800c720:	eb04 0803 	add.w	r8, r4, r3
 800c724:	f000 fdaa 	bl	800d27c <_sbrk_r>
 800c728:	4580      	cmp	r8, r0
 800c72a:	d13a      	bne.n	800c7a2 <_malloc_r+0xd2>
 800c72c:	6821      	ldr	r1, [r4, #0]
 800c72e:	3503      	adds	r5, #3
 800c730:	1a6d      	subs	r5, r5, r1
 800c732:	f025 0503 	bic.w	r5, r5, #3
 800c736:	3508      	adds	r5, #8
 800c738:	2d0c      	cmp	r5, #12
 800c73a:	bf38      	it	cc
 800c73c:	250c      	movcc	r5, #12
 800c73e:	4629      	mov	r1, r5
 800c740:	4638      	mov	r0, r7
 800c742:	f7ff ffa5 	bl	800c690 <sbrk_aligned>
 800c746:	3001      	adds	r0, #1
 800c748:	d02b      	beq.n	800c7a2 <_malloc_r+0xd2>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	442b      	add	r3, r5
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	e00e      	b.n	800c770 <_malloc_r+0xa0>
 800c752:	6822      	ldr	r2, [r4, #0]
 800c754:	1b52      	subs	r2, r2, r5
 800c756:	d41e      	bmi.n	800c796 <_malloc_r+0xc6>
 800c758:	2a0b      	cmp	r2, #11
 800c75a:	d916      	bls.n	800c78a <_malloc_r+0xba>
 800c75c:	1961      	adds	r1, r4, r5
 800c75e:	42a3      	cmp	r3, r4
 800c760:	6025      	str	r5, [r4, #0]
 800c762:	bf18      	it	ne
 800c764:	6059      	strne	r1, [r3, #4]
 800c766:	6863      	ldr	r3, [r4, #4]
 800c768:	bf08      	it	eq
 800c76a:	6031      	streq	r1, [r6, #0]
 800c76c:	5162      	str	r2, [r4, r5]
 800c76e:	604b      	str	r3, [r1, #4]
 800c770:	4638      	mov	r0, r7
 800c772:	f104 060b 	add.w	r6, r4, #11
 800c776:	f001 fe7d 	bl	800e474 <__malloc_unlock>
 800c77a:	f026 0607 	bic.w	r6, r6, #7
 800c77e:	1d23      	adds	r3, r4, #4
 800c780:	1af2      	subs	r2, r6, r3
 800c782:	d0b6      	beq.n	800c6f2 <_malloc_r+0x22>
 800c784:	1b9b      	subs	r3, r3, r6
 800c786:	50a3      	str	r3, [r4, r2]
 800c788:	e7b3      	b.n	800c6f2 <_malloc_r+0x22>
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	bf0c      	ite	eq
 800c790:	6032      	streq	r2, [r6, #0]
 800c792:	605a      	strne	r2, [r3, #4]
 800c794:	e7ec      	b.n	800c770 <_malloc_r+0xa0>
 800c796:	4623      	mov	r3, r4
 800c798:	6864      	ldr	r4, [r4, #4]
 800c79a:	e7b2      	b.n	800c702 <_malloc_r+0x32>
 800c79c:	4634      	mov	r4, r6
 800c79e:	6876      	ldr	r6, [r6, #4]
 800c7a0:	e7b9      	b.n	800c716 <_malloc_r+0x46>
 800c7a2:	230c      	movs	r3, #12
 800c7a4:	603b      	str	r3, [r7, #0]
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f001 fe64 	bl	800e474 <__malloc_unlock>
 800c7ac:	e7a1      	b.n	800c6f2 <_malloc_r+0x22>
 800c7ae:	6025      	str	r5, [r4, #0]
 800c7b0:	e7de      	b.n	800c770 <_malloc_r+0xa0>
 800c7b2:	bf00      	nop
 800c7b4:	200054e8 	.word	0x200054e8

0800c7b8 <__cvt>:
 800c7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7bc:	ec55 4b10 	vmov	r4, r5, d0
 800c7c0:	2d00      	cmp	r5, #0
 800c7c2:	460e      	mov	r6, r1
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	462b      	mov	r3, r5
 800c7c8:	bfbb      	ittet	lt
 800c7ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c7ce:	461d      	movlt	r5, r3
 800c7d0:	2300      	movge	r3, #0
 800c7d2:	232d      	movlt	r3, #45	; 0x2d
 800c7d4:	700b      	strb	r3, [r1, #0]
 800c7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c7dc:	4691      	mov	r9, r2
 800c7de:	f023 0820 	bic.w	r8, r3, #32
 800c7e2:	bfbc      	itt	lt
 800c7e4:	4622      	movlt	r2, r4
 800c7e6:	4614      	movlt	r4, r2
 800c7e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7ec:	d005      	beq.n	800c7fa <__cvt+0x42>
 800c7ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c7f2:	d100      	bne.n	800c7f6 <__cvt+0x3e>
 800c7f4:	3601      	adds	r6, #1
 800c7f6:	2102      	movs	r1, #2
 800c7f8:	e000      	b.n	800c7fc <__cvt+0x44>
 800c7fa:	2103      	movs	r1, #3
 800c7fc:	ab03      	add	r3, sp, #12
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	ab02      	add	r3, sp, #8
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	ec45 4b10 	vmov	d0, r4, r5
 800c808:	4653      	mov	r3, sl
 800c80a:	4632      	mov	r2, r6
 800c80c:	f000 fef8 	bl	800d600 <_dtoa_r>
 800c810:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c814:	4607      	mov	r7, r0
 800c816:	d102      	bne.n	800c81e <__cvt+0x66>
 800c818:	f019 0f01 	tst.w	r9, #1
 800c81c:	d022      	beq.n	800c864 <__cvt+0xac>
 800c81e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c822:	eb07 0906 	add.w	r9, r7, r6
 800c826:	d110      	bne.n	800c84a <__cvt+0x92>
 800c828:	783b      	ldrb	r3, [r7, #0]
 800c82a:	2b30      	cmp	r3, #48	; 0x30
 800c82c:	d10a      	bne.n	800c844 <__cvt+0x8c>
 800c82e:	2200      	movs	r2, #0
 800c830:	2300      	movs	r3, #0
 800c832:	4620      	mov	r0, r4
 800c834:	4629      	mov	r1, r5
 800c836:	f7f4 f947 	bl	8000ac8 <__aeabi_dcmpeq>
 800c83a:	b918      	cbnz	r0, 800c844 <__cvt+0x8c>
 800c83c:	f1c6 0601 	rsb	r6, r6, #1
 800c840:	f8ca 6000 	str.w	r6, [sl]
 800c844:	f8da 3000 	ldr.w	r3, [sl]
 800c848:	4499      	add	r9, r3
 800c84a:	2200      	movs	r2, #0
 800c84c:	2300      	movs	r3, #0
 800c84e:	4620      	mov	r0, r4
 800c850:	4629      	mov	r1, r5
 800c852:	f7f4 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 800c856:	b108      	cbz	r0, 800c85c <__cvt+0xa4>
 800c858:	f8cd 900c 	str.w	r9, [sp, #12]
 800c85c:	2230      	movs	r2, #48	; 0x30
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	454b      	cmp	r3, r9
 800c862:	d307      	bcc.n	800c874 <__cvt+0xbc>
 800c864:	9b03      	ldr	r3, [sp, #12]
 800c866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c868:	1bdb      	subs	r3, r3, r7
 800c86a:	4638      	mov	r0, r7
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	b004      	add	sp, #16
 800c870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c874:	1c59      	adds	r1, r3, #1
 800c876:	9103      	str	r1, [sp, #12]
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	e7f0      	b.n	800c85e <__cvt+0xa6>

0800c87c <__exponent>:
 800c87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c87e:	4603      	mov	r3, r0
 800c880:	2900      	cmp	r1, #0
 800c882:	bfb8      	it	lt
 800c884:	4249      	neglt	r1, r1
 800c886:	f803 2b02 	strb.w	r2, [r3], #2
 800c88a:	bfb4      	ite	lt
 800c88c:	222d      	movlt	r2, #45	; 0x2d
 800c88e:	222b      	movge	r2, #43	; 0x2b
 800c890:	2909      	cmp	r1, #9
 800c892:	7042      	strb	r2, [r0, #1]
 800c894:	dd2a      	ble.n	800c8ec <__exponent+0x70>
 800c896:	f10d 0407 	add.w	r4, sp, #7
 800c89a:	46a4      	mov	ip, r4
 800c89c:	270a      	movs	r7, #10
 800c89e:	46a6      	mov	lr, r4
 800c8a0:	460a      	mov	r2, r1
 800c8a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c8a6:	fb07 1516 	mls	r5, r7, r6, r1
 800c8aa:	3530      	adds	r5, #48	; 0x30
 800c8ac:	2a63      	cmp	r2, #99	; 0x63
 800c8ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800c8b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	dcf1      	bgt.n	800c89e <__exponent+0x22>
 800c8ba:	3130      	adds	r1, #48	; 0x30
 800c8bc:	f1ae 0502 	sub.w	r5, lr, #2
 800c8c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c8c4:	1c44      	adds	r4, r0, #1
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	4561      	cmp	r1, ip
 800c8ca:	d30a      	bcc.n	800c8e2 <__exponent+0x66>
 800c8cc:	f10d 0209 	add.w	r2, sp, #9
 800c8d0:	eba2 020e 	sub.w	r2, r2, lr
 800c8d4:	4565      	cmp	r5, ip
 800c8d6:	bf88      	it	hi
 800c8d8:	2200      	movhi	r2, #0
 800c8da:	4413      	add	r3, r2
 800c8dc:	1a18      	subs	r0, r3, r0
 800c8de:	b003      	add	sp, #12
 800c8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c8ea:	e7ed      	b.n	800c8c8 <__exponent+0x4c>
 800c8ec:	2330      	movs	r3, #48	; 0x30
 800c8ee:	3130      	adds	r1, #48	; 0x30
 800c8f0:	7083      	strb	r3, [r0, #2]
 800c8f2:	70c1      	strb	r1, [r0, #3]
 800c8f4:	1d03      	adds	r3, r0, #4
 800c8f6:	e7f1      	b.n	800c8dc <__exponent+0x60>

0800c8f8 <_printf_float>:
 800c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	ed2d 8b02 	vpush	{d8}
 800c900:	b08d      	sub	sp, #52	; 0x34
 800c902:	460c      	mov	r4, r1
 800c904:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c908:	4616      	mov	r6, r2
 800c90a:	461f      	mov	r7, r3
 800c90c:	4605      	mov	r5, r0
 800c90e:	f001 fd27 	bl	800e360 <_localeconv_r>
 800c912:	f8d0 a000 	ldr.w	sl, [r0]
 800c916:	4650      	mov	r0, sl
 800c918:	f7f3 fc5a 	bl	80001d0 <strlen>
 800c91c:	2300      	movs	r3, #0
 800c91e:	930a      	str	r3, [sp, #40]	; 0x28
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	9305      	str	r3, [sp, #20]
 800c924:	f8d8 3000 	ldr.w	r3, [r8]
 800c928:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c92c:	3307      	adds	r3, #7
 800c92e:	f023 0307 	bic.w	r3, r3, #7
 800c932:	f103 0208 	add.w	r2, r3, #8
 800c936:	f8c8 2000 	str.w	r2, [r8]
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c942:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c946:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c94a:	9307      	str	r3, [sp, #28]
 800c94c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c950:	ee08 0a10 	vmov	s16, r0
 800c954:	4b9f      	ldr	r3, [pc, #636]	; (800cbd4 <_printf_float+0x2dc>)
 800c956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c95a:	f04f 32ff 	mov.w	r2, #4294967295
 800c95e:	f7f4 f8e5 	bl	8000b2c <__aeabi_dcmpun>
 800c962:	bb88      	cbnz	r0, 800c9c8 <_printf_float+0xd0>
 800c964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c968:	4b9a      	ldr	r3, [pc, #616]	; (800cbd4 <_printf_float+0x2dc>)
 800c96a:	f04f 32ff 	mov.w	r2, #4294967295
 800c96e:	f7f4 f8bf 	bl	8000af0 <__aeabi_dcmple>
 800c972:	bb48      	cbnz	r0, 800c9c8 <_printf_float+0xd0>
 800c974:	2200      	movs	r2, #0
 800c976:	2300      	movs	r3, #0
 800c978:	4640      	mov	r0, r8
 800c97a:	4649      	mov	r1, r9
 800c97c:	f7f4 f8ae 	bl	8000adc <__aeabi_dcmplt>
 800c980:	b110      	cbz	r0, 800c988 <_printf_float+0x90>
 800c982:	232d      	movs	r3, #45	; 0x2d
 800c984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c988:	4b93      	ldr	r3, [pc, #588]	; (800cbd8 <_printf_float+0x2e0>)
 800c98a:	4894      	ldr	r0, [pc, #592]	; (800cbdc <_printf_float+0x2e4>)
 800c98c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c990:	bf94      	ite	ls
 800c992:	4698      	movls	r8, r3
 800c994:	4680      	movhi	r8, r0
 800c996:	2303      	movs	r3, #3
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	9b05      	ldr	r3, [sp, #20]
 800c99c:	f023 0204 	bic.w	r2, r3, #4
 800c9a0:	6022      	str	r2, [r4, #0]
 800c9a2:	f04f 0900 	mov.w	r9, #0
 800c9a6:	9700      	str	r7, [sp, #0]
 800c9a8:	4633      	mov	r3, r6
 800c9aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f000 f9d8 	bl	800cd64 <_printf_common>
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	f040 8090 	bne.w	800cada <_printf_float+0x1e2>
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	b00d      	add	sp, #52	; 0x34
 800c9c0:	ecbd 8b02 	vpop	{d8}
 800c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c8:	4642      	mov	r2, r8
 800c9ca:	464b      	mov	r3, r9
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	f7f4 f8ac 	bl	8000b2c <__aeabi_dcmpun>
 800c9d4:	b140      	cbz	r0, 800c9e8 <_printf_float+0xf0>
 800c9d6:	464b      	mov	r3, r9
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfbc      	itt	lt
 800c9dc:	232d      	movlt	r3, #45	; 0x2d
 800c9de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c9e2:	487f      	ldr	r0, [pc, #508]	; (800cbe0 <_printf_float+0x2e8>)
 800c9e4:	4b7f      	ldr	r3, [pc, #508]	; (800cbe4 <_printf_float+0x2ec>)
 800c9e6:	e7d1      	b.n	800c98c <_printf_float+0x94>
 800c9e8:	6863      	ldr	r3, [r4, #4]
 800c9ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c9ee:	9206      	str	r2, [sp, #24]
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	d13f      	bne.n	800ca74 <_printf_float+0x17c>
 800c9f4:	2306      	movs	r3, #6
 800c9f6:	6063      	str	r3, [r4, #4]
 800c9f8:	9b05      	ldr	r3, [sp, #20]
 800c9fa:	6861      	ldr	r1, [r4, #4]
 800c9fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca00:	2300      	movs	r3, #0
 800ca02:	9303      	str	r3, [sp, #12]
 800ca04:	ab0a      	add	r3, sp, #40	; 0x28
 800ca06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca0a:	ab09      	add	r3, sp, #36	; 0x24
 800ca0c:	ec49 8b10 	vmov	d0, r8, r9
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	6022      	str	r2, [r4, #0]
 800ca14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f7ff fecd 	bl	800c7b8 <__cvt>
 800ca1e:	9b06      	ldr	r3, [sp, #24]
 800ca20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca22:	2b47      	cmp	r3, #71	; 0x47
 800ca24:	4680      	mov	r8, r0
 800ca26:	d108      	bne.n	800ca3a <_printf_float+0x142>
 800ca28:	1cc8      	adds	r0, r1, #3
 800ca2a:	db02      	blt.n	800ca32 <_printf_float+0x13a>
 800ca2c:	6863      	ldr	r3, [r4, #4]
 800ca2e:	4299      	cmp	r1, r3
 800ca30:	dd41      	ble.n	800cab6 <_printf_float+0x1be>
 800ca32:	f1ab 0b02 	sub.w	fp, fp, #2
 800ca36:	fa5f fb8b 	uxtb.w	fp, fp
 800ca3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca3e:	d820      	bhi.n	800ca82 <_printf_float+0x18a>
 800ca40:	3901      	subs	r1, #1
 800ca42:	465a      	mov	r2, fp
 800ca44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca48:	9109      	str	r1, [sp, #36]	; 0x24
 800ca4a:	f7ff ff17 	bl	800c87c <__exponent>
 800ca4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca50:	1813      	adds	r3, r2, r0
 800ca52:	2a01      	cmp	r2, #1
 800ca54:	4681      	mov	r9, r0
 800ca56:	6123      	str	r3, [r4, #16]
 800ca58:	dc02      	bgt.n	800ca60 <_printf_float+0x168>
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	07d2      	lsls	r2, r2, #31
 800ca5e:	d501      	bpl.n	800ca64 <_printf_float+0x16c>
 800ca60:	3301      	adds	r3, #1
 800ca62:	6123      	str	r3, [r4, #16]
 800ca64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d09c      	beq.n	800c9a6 <_printf_float+0xae>
 800ca6c:	232d      	movs	r3, #45	; 0x2d
 800ca6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca72:	e798      	b.n	800c9a6 <_printf_float+0xae>
 800ca74:	9a06      	ldr	r2, [sp, #24]
 800ca76:	2a47      	cmp	r2, #71	; 0x47
 800ca78:	d1be      	bne.n	800c9f8 <_printf_float+0x100>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1bc      	bne.n	800c9f8 <_printf_float+0x100>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e7b9      	b.n	800c9f6 <_printf_float+0xfe>
 800ca82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca86:	d118      	bne.n	800caba <_printf_float+0x1c2>
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	6863      	ldr	r3, [r4, #4]
 800ca8c:	dd0b      	ble.n	800caa6 <_printf_float+0x1ae>
 800ca8e:	6121      	str	r1, [r4, #16]
 800ca90:	b913      	cbnz	r3, 800ca98 <_printf_float+0x1a0>
 800ca92:	6822      	ldr	r2, [r4, #0]
 800ca94:	07d0      	lsls	r0, r2, #31
 800ca96:	d502      	bpl.n	800ca9e <_printf_float+0x1a6>
 800ca98:	3301      	adds	r3, #1
 800ca9a:	440b      	add	r3, r1
 800ca9c:	6123      	str	r3, [r4, #16]
 800ca9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800caa0:	f04f 0900 	mov.w	r9, #0
 800caa4:	e7de      	b.n	800ca64 <_printf_float+0x16c>
 800caa6:	b913      	cbnz	r3, 800caae <_printf_float+0x1b6>
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	07d2      	lsls	r2, r2, #31
 800caac:	d501      	bpl.n	800cab2 <_printf_float+0x1ba>
 800caae:	3302      	adds	r3, #2
 800cab0:	e7f4      	b.n	800ca9c <_printf_float+0x1a4>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e7f2      	b.n	800ca9c <_printf_float+0x1a4>
 800cab6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800caba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cabc:	4299      	cmp	r1, r3
 800cabe:	db05      	blt.n	800cacc <_printf_float+0x1d4>
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	6121      	str	r1, [r4, #16]
 800cac4:	07d8      	lsls	r0, r3, #31
 800cac6:	d5ea      	bpl.n	800ca9e <_printf_float+0x1a6>
 800cac8:	1c4b      	adds	r3, r1, #1
 800caca:	e7e7      	b.n	800ca9c <_printf_float+0x1a4>
 800cacc:	2900      	cmp	r1, #0
 800cace:	bfd4      	ite	le
 800cad0:	f1c1 0202 	rsble	r2, r1, #2
 800cad4:	2201      	movgt	r2, #1
 800cad6:	4413      	add	r3, r2
 800cad8:	e7e0      	b.n	800ca9c <_printf_float+0x1a4>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	055a      	lsls	r2, r3, #21
 800cade:	d407      	bmi.n	800caf0 <_printf_float+0x1f8>
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	4642      	mov	r2, r8
 800cae4:	4631      	mov	r1, r6
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	d12c      	bne.n	800cb48 <_printf_float+0x250>
 800caee:	e764      	b.n	800c9ba <_printf_float+0xc2>
 800caf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800caf4:	f240 80e0 	bls.w	800ccb8 <_printf_float+0x3c0>
 800caf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cafc:	2200      	movs	r2, #0
 800cafe:	2300      	movs	r3, #0
 800cb00:	f7f3 ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d034      	beq.n	800cb72 <_printf_float+0x27a>
 800cb08:	4a37      	ldr	r2, [pc, #220]	; (800cbe8 <_printf_float+0x2f0>)
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4628      	mov	r0, r5
 800cb10:	47b8      	blx	r7
 800cb12:	3001      	adds	r0, #1
 800cb14:	f43f af51 	beq.w	800c9ba <_printf_float+0xc2>
 800cb18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	db02      	blt.n	800cb26 <_printf_float+0x22e>
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	07d8      	lsls	r0, r3, #31
 800cb24:	d510      	bpl.n	800cb48 <_printf_float+0x250>
 800cb26:	ee18 3a10 	vmov	r3, s16
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	4631      	mov	r1, r6
 800cb2e:	4628      	mov	r0, r5
 800cb30:	47b8      	blx	r7
 800cb32:	3001      	adds	r0, #1
 800cb34:	f43f af41 	beq.w	800c9ba <_printf_float+0xc2>
 800cb38:	f04f 0800 	mov.w	r8, #0
 800cb3c:	f104 091a 	add.w	r9, r4, #26
 800cb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb42:	3b01      	subs	r3, #1
 800cb44:	4543      	cmp	r3, r8
 800cb46:	dc09      	bgt.n	800cb5c <_printf_float+0x264>
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	079b      	lsls	r3, r3, #30
 800cb4c:	f100 8105 	bmi.w	800cd5a <_printf_float+0x462>
 800cb50:	68e0      	ldr	r0, [r4, #12]
 800cb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb54:	4298      	cmp	r0, r3
 800cb56:	bfb8      	it	lt
 800cb58:	4618      	movlt	r0, r3
 800cb5a:	e730      	b.n	800c9be <_printf_float+0xc6>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	464a      	mov	r2, r9
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	f43f af27 	beq.w	800c9ba <_printf_float+0xc2>
 800cb6c:	f108 0801 	add.w	r8, r8, #1
 800cb70:	e7e6      	b.n	800cb40 <_printf_float+0x248>
 800cb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	dc39      	bgt.n	800cbec <_printf_float+0x2f4>
 800cb78:	4a1b      	ldr	r2, [pc, #108]	; (800cbe8 <_printf_float+0x2f0>)
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b8      	blx	r7
 800cb82:	3001      	adds	r0, #1
 800cb84:	f43f af19 	beq.w	800c9ba <_printf_float+0xc2>
 800cb88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	d102      	bne.n	800cb96 <_printf_float+0x29e>
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	07d9      	lsls	r1, r3, #31
 800cb94:	d5d8      	bpl.n	800cb48 <_printf_float+0x250>
 800cb96:	ee18 3a10 	vmov	r3, s16
 800cb9a:	4652      	mov	r2, sl
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	4628      	mov	r0, r5
 800cba0:	47b8      	blx	r7
 800cba2:	3001      	adds	r0, #1
 800cba4:	f43f af09 	beq.w	800c9ba <_printf_float+0xc2>
 800cba8:	f04f 0900 	mov.w	r9, #0
 800cbac:	f104 0a1a 	add.w	sl, r4, #26
 800cbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb2:	425b      	negs	r3, r3
 800cbb4:	454b      	cmp	r3, r9
 800cbb6:	dc01      	bgt.n	800cbbc <_printf_float+0x2c4>
 800cbb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbba:	e792      	b.n	800cae2 <_printf_float+0x1ea>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	4652      	mov	r2, sl
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b8      	blx	r7
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	f43f aef7 	beq.w	800c9ba <_printf_float+0xc2>
 800cbcc:	f109 0901 	add.w	r9, r9, #1
 800cbd0:	e7ee      	b.n	800cbb0 <_printf_float+0x2b8>
 800cbd2:	bf00      	nop
 800cbd4:	7fefffff 	.word	0x7fefffff
 800cbd8:	08010bd0 	.word	0x08010bd0
 800cbdc:	08010bd4 	.word	0x08010bd4
 800cbe0:	08010bdc 	.word	0x08010bdc
 800cbe4:	08010bd8 	.word	0x08010bd8
 800cbe8:	08010be0 	.word	0x08010be0
 800cbec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	bfa8      	it	ge
 800cbf4:	461a      	movge	r2, r3
 800cbf6:	2a00      	cmp	r2, #0
 800cbf8:	4691      	mov	r9, r2
 800cbfa:	dc37      	bgt.n	800cc6c <_printf_float+0x374>
 800cbfc:	f04f 0b00 	mov.w	fp, #0
 800cc00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc04:	f104 021a 	add.w	r2, r4, #26
 800cc08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc0a:	9305      	str	r3, [sp, #20]
 800cc0c:	eba3 0309 	sub.w	r3, r3, r9
 800cc10:	455b      	cmp	r3, fp
 800cc12:	dc33      	bgt.n	800cc7c <_printf_float+0x384>
 800cc14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	db3b      	blt.n	800cc94 <_printf_float+0x39c>
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	07da      	lsls	r2, r3, #31
 800cc20:	d438      	bmi.n	800cc94 <_printf_float+0x39c>
 800cc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc24:	9a05      	ldr	r2, [sp, #20]
 800cc26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc28:	1a9a      	subs	r2, r3, r2
 800cc2a:	eba3 0901 	sub.w	r9, r3, r1
 800cc2e:	4591      	cmp	r9, r2
 800cc30:	bfa8      	it	ge
 800cc32:	4691      	movge	r9, r2
 800cc34:	f1b9 0f00 	cmp.w	r9, #0
 800cc38:	dc35      	bgt.n	800cca6 <_printf_float+0x3ae>
 800cc3a:	f04f 0800 	mov.w	r8, #0
 800cc3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc42:	f104 0a1a 	add.w	sl, r4, #26
 800cc46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc4a:	1a9b      	subs	r3, r3, r2
 800cc4c:	eba3 0309 	sub.w	r3, r3, r9
 800cc50:	4543      	cmp	r3, r8
 800cc52:	f77f af79 	ble.w	800cb48 <_printf_float+0x250>
 800cc56:	2301      	movs	r3, #1
 800cc58:	4652      	mov	r2, sl
 800cc5a:	4631      	mov	r1, r6
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b8      	blx	r7
 800cc60:	3001      	adds	r0, #1
 800cc62:	f43f aeaa 	beq.w	800c9ba <_printf_float+0xc2>
 800cc66:	f108 0801 	add.w	r8, r8, #1
 800cc6a:	e7ec      	b.n	800cc46 <_printf_float+0x34e>
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	4631      	mov	r1, r6
 800cc70:	4642      	mov	r2, r8
 800cc72:	4628      	mov	r0, r5
 800cc74:	47b8      	blx	r7
 800cc76:	3001      	adds	r0, #1
 800cc78:	d1c0      	bne.n	800cbfc <_printf_float+0x304>
 800cc7a:	e69e      	b.n	800c9ba <_printf_float+0xc2>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4628      	mov	r0, r5
 800cc82:	9205      	str	r2, [sp, #20]
 800cc84:	47b8      	blx	r7
 800cc86:	3001      	adds	r0, #1
 800cc88:	f43f ae97 	beq.w	800c9ba <_printf_float+0xc2>
 800cc8c:	9a05      	ldr	r2, [sp, #20]
 800cc8e:	f10b 0b01 	add.w	fp, fp, #1
 800cc92:	e7b9      	b.n	800cc08 <_printf_float+0x310>
 800cc94:	ee18 3a10 	vmov	r3, s16
 800cc98:	4652      	mov	r2, sl
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b8      	blx	r7
 800cca0:	3001      	adds	r0, #1
 800cca2:	d1be      	bne.n	800cc22 <_printf_float+0x32a>
 800cca4:	e689      	b.n	800c9ba <_printf_float+0xc2>
 800cca6:	9a05      	ldr	r2, [sp, #20]
 800cca8:	464b      	mov	r3, r9
 800ccaa:	4442      	add	r2, r8
 800ccac:	4631      	mov	r1, r6
 800ccae:	4628      	mov	r0, r5
 800ccb0:	47b8      	blx	r7
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	d1c1      	bne.n	800cc3a <_printf_float+0x342>
 800ccb6:	e680      	b.n	800c9ba <_printf_float+0xc2>
 800ccb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccba:	2a01      	cmp	r2, #1
 800ccbc:	dc01      	bgt.n	800ccc2 <_printf_float+0x3ca>
 800ccbe:	07db      	lsls	r3, r3, #31
 800ccc0:	d538      	bpl.n	800cd34 <_printf_float+0x43c>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	4642      	mov	r2, r8
 800ccc6:	4631      	mov	r1, r6
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b8      	blx	r7
 800cccc:	3001      	adds	r0, #1
 800ccce:	f43f ae74 	beq.w	800c9ba <_printf_float+0xc2>
 800ccd2:	ee18 3a10 	vmov	r3, s16
 800ccd6:	4652      	mov	r2, sl
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4628      	mov	r0, r5
 800ccdc:	47b8      	blx	r7
 800ccde:	3001      	adds	r0, #1
 800cce0:	f43f ae6b 	beq.w	800c9ba <_printf_float+0xc2>
 800cce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cce8:	2200      	movs	r2, #0
 800ccea:	2300      	movs	r3, #0
 800ccec:	f7f3 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccf0:	b9d8      	cbnz	r0, 800cd2a <_printf_float+0x432>
 800ccf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf4:	f108 0201 	add.w	r2, r8, #1
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	47b8      	blx	r7
 800cd00:	3001      	adds	r0, #1
 800cd02:	d10e      	bne.n	800cd22 <_printf_float+0x42a>
 800cd04:	e659      	b.n	800c9ba <_printf_float+0xc2>
 800cd06:	2301      	movs	r3, #1
 800cd08:	4652      	mov	r2, sl
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	47b8      	blx	r7
 800cd10:	3001      	adds	r0, #1
 800cd12:	f43f ae52 	beq.w	800c9ba <_printf_float+0xc2>
 800cd16:	f108 0801 	add.w	r8, r8, #1
 800cd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	4543      	cmp	r3, r8
 800cd20:	dcf1      	bgt.n	800cd06 <_printf_float+0x40e>
 800cd22:	464b      	mov	r3, r9
 800cd24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd28:	e6dc      	b.n	800cae4 <_printf_float+0x1ec>
 800cd2a:	f04f 0800 	mov.w	r8, #0
 800cd2e:	f104 0a1a 	add.w	sl, r4, #26
 800cd32:	e7f2      	b.n	800cd1a <_printf_float+0x422>
 800cd34:	2301      	movs	r3, #1
 800cd36:	4642      	mov	r2, r8
 800cd38:	e7df      	b.n	800ccfa <_printf_float+0x402>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	464a      	mov	r2, r9
 800cd3e:	4631      	mov	r1, r6
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b8      	blx	r7
 800cd44:	3001      	adds	r0, #1
 800cd46:	f43f ae38 	beq.w	800c9ba <_printf_float+0xc2>
 800cd4a:	f108 0801 	add.w	r8, r8, #1
 800cd4e:	68e3      	ldr	r3, [r4, #12]
 800cd50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd52:	1a5b      	subs	r3, r3, r1
 800cd54:	4543      	cmp	r3, r8
 800cd56:	dcf0      	bgt.n	800cd3a <_printf_float+0x442>
 800cd58:	e6fa      	b.n	800cb50 <_printf_float+0x258>
 800cd5a:	f04f 0800 	mov.w	r8, #0
 800cd5e:	f104 0919 	add.w	r9, r4, #25
 800cd62:	e7f4      	b.n	800cd4e <_printf_float+0x456>

0800cd64 <_printf_common>:
 800cd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd68:	4616      	mov	r6, r2
 800cd6a:	4699      	mov	r9, r3
 800cd6c:	688a      	ldr	r2, [r1, #8]
 800cd6e:	690b      	ldr	r3, [r1, #16]
 800cd70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	bfb8      	it	lt
 800cd78:	4613      	movlt	r3, r2
 800cd7a:	6033      	str	r3, [r6, #0]
 800cd7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd80:	4607      	mov	r7, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	b10a      	cbz	r2, 800cd8a <_printf_common+0x26>
 800cd86:	3301      	adds	r3, #1
 800cd88:	6033      	str	r3, [r6, #0]
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	0699      	lsls	r1, r3, #26
 800cd8e:	bf42      	ittt	mi
 800cd90:	6833      	ldrmi	r3, [r6, #0]
 800cd92:	3302      	addmi	r3, #2
 800cd94:	6033      	strmi	r3, [r6, #0]
 800cd96:	6825      	ldr	r5, [r4, #0]
 800cd98:	f015 0506 	ands.w	r5, r5, #6
 800cd9c:	d106      	bne.n	800cdac <_printf_common+0x48>
 800cd9e:	f104 0a19 	add.w	sl, r4, #25
 800cda2:	68e3      	ldr	r3, [r4, #12]
 800cda4:	6832      	ldr	r2, [r6, #0]
 800cda6:	1a9b      	subs	r3, r3, r2
 800cda8:	42ab      	cmp	r3, r5
 800cdaa:	dc26      	bgt.n	800cdfa <_printf_common+0x96>
 800cdac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdb0:	1e13      	subs	r3, r2, #0
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	bf18      	it	ne
 800cdb6:	2301      	movne	r3, #1
 800cdb8:	0692      	lsls	r2, r2, #26
 800cdba:	d42b      	bmi.n	800ce14 <_printf_common+0xb0>
 800cdbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	47c0      	blx	r8
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d01e      	beq.n	800ce08 <_printf_common+0xa4>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	68e5      	ldr	r5, [r4, #12]
 800cdce:	6832      	ldr	r2, [r6, #0]
 800cdd0:	f003 0306 	and.w	r3, r3, #6
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	bf08      	it	eq
 800cdd8:	1aad      	subeq	r5, r5, r2
 800cdda:	68a3      	ldr	r3, [r4, #8]
 800cddc:	6922      	ldr	r2, [r4, #16]
 800cdde:	bf0c      	ite	eq
 800cde0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cde4:	2500      	movne	r5, #0
 800cde6:	4293      	cmp	r3, r2
 800cde8:	bfc4      	itt	gt
 800cdea:	1a9b      	subgt	r3, r3, r2
 800cdec:	18ed      	addgt	r5, r5, r3
 800cdee:	2600      	movs	r6, #0
 800cdf0:	341a      	adds	r4, #26
 800cdf2:	42b5      	cmp	r5, r6
 800cdf4:	d11a      	bne.n	800ce2c <_printf_common+0xc8>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e008      	b.n	800ce0c <_printf_common+0xa8>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4652      	mov	r2, sl
 800cdfe:	4649      	mov	r1, r9
 800ce00:	4638      	mov	r0, r7
 800ce02:	47c0      	blx	r8
 800ce04:	3001      	adds	r0, #1
 800ce06:	d103      	bne.n	800ce10 <_printf_common+0xac>
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce10:	3501      	adds	r5, #1
 800ce12:	e7c6      	b.n	800cda2 <_printf_common+0x3e>
 800ce14:	18e1      	adds	r1, r4, r3
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	2030      	movs	r0, #48	; 0x30
 800ce1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce1e:	4422      	add	r2, r4
 800ce20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce28:	3302      	adds	r3, #2
 800ce2a:	e7c7      	b.n	800cdbc <_printf_common+0x58>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	4622      	mov	r2, r4
 800ce30:	4649      	mov	r1, r9
 800ce32:	4638      	mov	r0, r7
 800ce34:	47c0      	blx	r8
 800ce36:	3001      	adds	r0, #1
 800ce38:	d0e6      	beq.n	800ce08 <_printf_common+0xa4>
 800ce3a:	3601      	adds	r6, #1
 800ce3c:	e7d9      	b.n	800cdf2 <_printf_common+0x8e>
	...

0800ce40 <_printf_i>:
 800ce40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce44:	7e0f      	ldrb	r7, [r1, #24]
 800ce46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce48:	2f78      	cmp	r7, #120	; 0x78
 800ce4a:	4691      	mov	r9, r2
 800ce4c:	4680      	mov	r8, r0
 800ce4e:	460c      	mov	r4, r1
 800ce50:	469a      	mov	sl, r3
 800ce52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce56:	d807      	bhi.n	800ce68 <_printf_i+0x28>
 800ce58:	2f62      	cmp	r7, #98	; 0x62
 800ce5a:	d80a      	bhi.n	800ce72 <_printf_i+0x32>
 800ce5c:	2f00      	cmp	r7, #0
 800ce5e:	f000 80d8 	beq.w	800d012 <_printf_i+0x1d2>
 800ce62:	2f58      	cmp	r7, #88	; 0x58
 800ce64:	f000 80a3 	beq.w	800cfae <_printf_i+0x16e>
 800ce68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce70:	e03a      	b.n	800cee8 <_printf_i+0xa8>
 800ce72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce76:	2b15      	cmp	r3, #21
 800ce78:	d8f6      	bhi.n	800ce68 <_printf_i+0x28>
 800ce7a:	a101      	add	r1, pc, #4	; (adr r1, 800ce80 <_printf_i+0x40>)
 800ce7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce80:	0800ced9 	.word	0x0800ced9
 800ce84:	0800ceed 	.word	0x0800ceed
 800ce88:	0800ce69 	.word	0x0800ce69
 800ce8c:	0800ce69 	.word	0x0800ce69
 800ce90:	0800ce69 	.word	0x0800ce69
 800ce94:	0800ce69 	.word	0x0800ce69
 800ce98:	0800ceed 	.word	0x0800ceed
 800ce9c:	0800ce69 	.word	0x0800ce69
 800cea0:	0800ce69 	.word	0x0800ce69
 800cea4:	0800ce69 	.word	0x0800ce69
 800cea8:	0800ce69 	.word	0x0800ce69
 800ceac:	0800cff9 	.word	0x0800cff9
 800ceb0:	0800cf1d 	.word	0x0800cf1d
 800ceb4:	0800cfdb 	.word	0x0800cfdb
 800ceb8:	0800ce69 	.word	0x0800ce69
 800cebc:	0800ce69 	.word	0x0800ce69
 800cec0:	0800d01b 	.word	0x0800d01b
 800cec4:	0800ce69 	.word	0x0800ce69
 800cec8:	0800cf1d 	.word	0x0800cf1d
 800cecc:	0800ce69 	.word	0x0800ce69
 800ced0:	0800ce69 	.word	0x0800ce69
 800ced4:	0800cfe3 	.word	0x0800cfe3
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	1d1a      	adds	r2, r3, #4
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	602a      	str	r2, [r5, #0]
 800cee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cee8:	2301      	movs	r3, #1
 800ceea:	e0a3      	b.n	800d034 <_printf_i+0x1f4>
 800ceec:	6820      	ldr	r0, [r4, #0]
 800ceee:	6829      	ldr	r1, [r5, #0]
 800cef0:	0606      	lsls	r6, r0, #24
 800cef2:	f101 0304 	add.w	r3, r1, #4
 800cef6:	d50a      	bpl.n	800cf0e <_printf_i+0xce>
 800cef8:	680e      	ldr	r6, [r1, #0]
 800cefa:	602b      	str	r3, [r5, #0]
 800cefc:	2e00      	cmp	r6, #0
 800cefe:	da03      	bge.n	800cf08 <_printf_i+0xc8>
 800cf00:	232d      	movs	r3, #45	; 0x2d
 800cf02:	4276      	negs	r6, r6
 800cf04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf08:	485e      	ldr	r0, [pc, #376]	; (800d084 <_printf_i+0x244>)
 800cf0a:	230a      	movs	r3, #10
 800cf0c:	e019      	b.n	800cf42 <_printf_i+0x102>
 800cf0e:	680e      	ldr	r6, [r1, #0]
 800cf10:	602b      	str	r3, [r5, #0]
 800cf12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf16:	bf18      	it	ne
 800cf18:	b236      	sxthne	r6, r6
 800cf1a:	e7ef      	b.n	800cefc <_printf_i+0xbc>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	6820      	ldr	r0, [r4, #0]
 800cf20:	1d19      	adds	r1, r3, #4
 800cf22:	6029      	str	r1, [r5, #0]
 800cf24:	0601      	lsls	r1, r0, #24
 800cf26:	d501      	bpl.n	800cf2c <_printf_i+0xec>
 800cf28:	681e      	ldr	r6, [r3, #0]
 800cf2a:	e002      	b.n	800cf32 <_printf_i+0xf2>
 800cf2c:	0646      	lsls	r6, r0, #25
 800cf2e:	d5fb      	bpl.n	800cf28 <_printf_i+0xe8>
 800cf30:	881e      	ldrh	r6, [r3, #0]
 800cf32:	4854      	ldr	r0, [pc, #336]	; (800d084 <_printf_i+0x244>)
 800cf34:	2f6f      	cmp	r7, #111	; 0x6f
 800cf36:	bf0c      	ite	eq
 800cf38:	2308      	moveq	r3, #8
 800cf3a:	230a      	movne	r3, #10
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf42:	6865      	ldr	r5, [r4, #4]
 800cf44:	60a5      	str	r5, [r4, #8]
 800cf46:	2d00      	cmp	r5, #0
 800cf48:	bfa2      	ittt	ge
 800cf4a:	6821      	ldrge	r1, [r4, #0]
 800cf4c:	f021 0104 	bicge.w	r1, r1, #4
 800cf50:	6021      	strge	r1, [r4, #0]
 800cf52:	b90e      	cbnz	r6, 800cf58 <_printf_i+0x118>
 800cf54:	2d00      	cmp	r5, #0
 800cf56:	d04d      	beq.n	800cff4 <_printf_i+0x1b4>
 800cf58:	4615      	mov	r5, r2
 800cf5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf5e:	fb03 6711 	mls	r7, r3, r1, r6
 800cf62:	5dc7      	ldrb	r7, [r0, r7]
 800cf64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf68:	4637      	mov	r7, r6
 800cf6a:	42bb      	cmp	r3, r7
 800cf6c:	460e      	mov	r6, r1
 800cf6e:	d9f4      	bls.n	800cf5a <_printf_i+0x11a>
 800cf70:	2b08      	cmp	r3, #8
 800cf72:	d10b      	bne.n	800cf8c <_printf_i+0x14c>
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	07de      	lsls	r6, r3, #31
 800cf78:	d508      	bpl.n	800cf8c <_printf_i+0x14c>
 800cf7a:	6923      	ldr	r3, [r4, #16]
 800cf7c:	6861      	ldr	r1, [r4, #4]
 800cf7e:	4299      	cmp	r1, r3
 800cf80:	bfde      	ittt	le
 800cf82:	2330      	movle	r3, #48	; 0x30
 800cf84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf8c:	1b52      	subs	r2, r2, r5
 800cf8e:	6122      	str	r2, [r4, #16]
 800cf90:	f8cd a000 	str.w	sl, [sp]
 800cf94:	464b      	mov	r3, r9
 800cf96:	aa03      	add	r2, sp, #12
 800cf98:	4621      	mov	r1, r4
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	f7ff fee2 	bl	800cd64 <_printf_common>
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d14c      	bne.n	800d03e <_printf_i+0x1fe>
 800cfa4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa8:	b004      	add	sp, #16
 800cfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfae:	4835      	ldr	r0, [pc, #212]	; (800d084 <_printf_i+0x244>)
 800cfb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cfb4:	6829      	ldr	r1, [r5, #0]
 800cfb6:	6823      	ldr	r3, [r4, #0]
 800cfb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfbc:	6029      	str	r1, [r5, #0]
 800cfbe:	061d      	lsls	r5, r3, #24
 800cfc0:	d514      	bpl.n	800cfec <_printf_i+0x1ac>
 800cfc2:	07df      	lsls	r7, r3, #31
 800cfc4:	bf44      	itt	mi
 800cfc6:	f043 0320 	orrmi.w	r3, r3, #32
 800cfca:	6023      	strmi	r3, [r4, #0]
 800cfcc:	b91e      	cbnz	r6, 800cfd6 <_printf_i+0x196>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	f023 0320 	bic.w	r3, r3, #32
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	2310      	movs	r3, #16
 800cfd8:	e7b0      	b.n	800cf3c <_printf_i+0xfc>
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	f043 0320 	orr.w	r3, r3, #32
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	2378      	movs	r3, #120	; 0x78
 800cfe4:	4828      	ldr	r0, [pc, #160]	; (800d088 <_printf_i+0x248>)
 800cfe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfea:	e7e3      	b.n	800cfb4 <_printf_i+0x174>
 800cfec:	0659      	lsls	r1, r3, #25
 800cfee:	bf48      	it	mi
 800cff0:	b2b6      	uxthmi	r6, r6
 800cff2:	e7e6      	b.n	800cfc2 <_printf_i+0x182>
 800cff4:	4615      	mov	r5, r2
 800cff6:	e7bb      	b.n	800cf70 <_printf_i+0x130>
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	6826      	ldr	r6, [r4, #0]
 800cffc:	6961      	ldr	r1, [r4, #20]
 800cffe:	1d18      	adds	r0, r3, #4
 800d000:	6028      	str	r0, [r5, #0]
 800d002:	0635      	lsls	r5, r6, #24
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	d501      	bpl.n	800d00c <_printf_i+0x1cc>
 800d008:	6019      	str	r1, [r3, #0]
 800d00a:	e002      	b.n	800d012 <_printf_i+0x1d2>
 800d00c:	0670      	lsls	r0, r6, #25
 800d00e:	d5fb      	bpl.n	800d008 <_printf_i+0x1c8>
 800d010:	8019      	strh	r1, [r3, #0]
 800d012:	2300      	movs	r3, #0
 800d014:	6123      	str	r3, [r4, #16]
 800d016:	4615      	mov	r5, r2
 800d018:	e7ba      	b.n	800cf90 <_printf_i+0x150>
 800d01a:	682b      	ldr	r3, [r5, #0]
 800d01c:	1d1a      	adds	r2, r3, #4
 800d01e:	602a      	str	r2, [r5, #0]
 800d020:	681d      	ldr	r5, [r3, #0]
 800d022:	6862      	ldr	r2, [r4, #4]
 800d024:	2100      	movs	r1, #0
 800d026:	4628      	mov	r0, r5
 800d028:	f7f3 f8da 	bl	80001e0 <memchr>
 800d02c:	b108      	cbz	r0, 800d032 <_printf_i+0x1f2>
 800d02e:	1b40      	subs	r0, r0, r5
 800d030:	6060      	str	r0, [r4, #4]
 800d032:	6863      	ldr	r3, [r4, #4]
 800d034:	6123      	str	r3, [r4, #16]
 800d036:	2300      	movs	r3, #0
 800d038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d03c:	e7a8      	b.n	800cf90 <_printf_i+0x150>
 800d03e:	6923      	ldr	r3, [r4, #16]
 800d040:	462a      	mov	r2, r5
 800d042:	4649      	mov	r1, r9
 800d044:	4640      	mov	r0, r8
 800d046:	47d0      	blx	sl
 800d048:	3001      	adds	r0, #1
 800d04a:	d0ab      	beq.n	800cfa4 <_printf_i+0x164>
 800d04c:	6823      	ldr	r3, [r4, #0]
 800d04e:	079b      	lsls	r3, r3, #30
 800d050:	d413      	bmi.n	800d07a <_printf_i+0x23a>
 800d052:	68e0      	ldr	r0, [r4, #12]
 800d054:	9b03      	ldr	r3, [sp, #12]
 800d056:	4298      	cmp	r0, r3
 800d058:	bfb8      	it	lt
 800d05a:	4618      	movlt	r0, r3
 800d05c:	e7a4      	b.n	800cfa8 <_printf_i+0x168>
 800d05e:	2301      	movs	r3, #1
 800d060:	4632      	mov	r2, r6
 800d062:	4649      	mov	r1, r9
 800d064:	4640      	mov	r0, r8
 800d066:	47d0      	blx	sl
 800d068:	3001      	adds	r0, #1
 800d06a:	d09b      	beq.n	800cfa4 <_printf_i+0x164>
 800d06c:	3501      	adds	r5, #1
 800d06e:	68e3      	ldr	r3, [r4, #12]
 800d070:	9903      	ldr	r1, [sp, #12]
 800d072:	1a5b      	subs	r3, r3, r1
 800d074:	42ab      	cmp	r3, r5
 800d076:	dcf2      	bgt.n	800d05e <_printf_i+0x21e>
 800d078:	e7eb      	b.n	800d052 <_printf_i+0x212>
 800d07a:	2500      	movs	r5, #0
 800d07c:	f104 0619 	add.w	r6, r4, #25
 800d080:	e7f5      	b.n	800d06e <_printf_i+0x22e>
 800d082:	bf00      	nop
 800d084:	08010be2 	.word	0x08010be2
 800d088:	08010bf3 	.word	0x08010bf3

0800d08c <iprintf>:
 800d08c:	b40f      	push	{r0, r1, r2, r3}
 800d08e:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <iprintf+0x2c>)
 800d090:	b513      	push	{r0, r1, r4, lr}
 800d092:	681c      	ldr	r4, [r3, #0]
 800d094:	b124      	cbz	r4, 800d0a0 <iprintf+0x14>
 800d096:	69a3      	ldr	r3, [r4, #24]
 800d098:	b913      	cbnz	r3, 800d0a0 <iprintf+0x14>
 800d09a:	4620      	mov	r0, r4
 800d09c:	f7ff fa1c 	bl	800c4d8 <__sinit>
 800d0a0:	ab05      	add	r3, sp, #20
 800d0a2:	9a04      	ldr	r2, [sp, #16]
 800d0a4:	68a1      	ldr	r1, [r4, #8]
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f001 fdf9 	bl	800eca0 <_vfiprintf_r>
 800d0ae:	b002      	add	sp, #8
 800d0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b4:	b004      	add	sp, #16
 800d0b6:	4770      	bx	lr
 800d0b8:	2000007c 	.word	0x2000007c

0800d0bc <_puts_r>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	460e      	mov	r6, r1
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	b118      	cbz	r0, 800d0cc <_puts_r+0x10>
 800d0c4:	6983      	ldr	r3, [r0, #24]
 800d0c6:	b90b      	cbnz	r3, 800d0cc <_puts_r+0x10>
 800d0c8:	f7ff fa06 	bl	800c4d8 <__sinit>
 800d0cc:	69ab      	ldr	r3, [r5, #24]
 800d0ce:	68ac      	ldr	r4, [r5, #8]
 800d0d0:	b913      	cbnz	r3, 800d0d8 <_puts_r+0x1c>
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f7ff fa00 	bl	800c4d8 <__sinit>
 800d0d8:	4b2c      	ldr	r3, [pc, #176]	; (800d18c <_puts_r+0xd0>)
 800d0da:	429c      	cmp	r4, r3
 800d0dc:	d120      	bne.n	800d120 <_puts_r+0x64>
 800d0de:	686c      	ldr	r4, [r5, #4]
 800d0e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0e2:	07db      	lsls	r3, r3, #31
 800d0e4:	d405      	bmi.n	800d0f2 <_puts_r+0x36>
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	0598      	lsls	r0, r3, #22
 800d0ea:	d402      	bmi.n	800d0f2 <_puts_r+0x36>
 800d0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0ee:	f7ff fab6 	bl	800c65e <__retarget_lock_acquire_recursive>
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	0719      	lsls	r1, r3, #28
 800d0f6:	d51d      	bpl.n	800d134 <_puts_r+0x78>
 800d0f8:	6923      	ldr	r3, [r4, #16]
 800d0fa:	b1db      	cbz	r3, 800d134 <_puts_r+0x78>
 800d0fc:	3e01      	subs	r6, #1
 800d0fe:	68a3      	ldr	r3, [r4, #8]
 800d100:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d104:	3b01      	subs	r3, #1
 800d106:	60a3      	str	r3, [r4, #8]
 800d108:	bb39      	cbnz	r1, 800d15a <_puts_r+0x9e>
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	da38      	bge.n	800d180 <_puts_r+0xc4>
 800d10e:	4622      	mov	r2, r4
 800d110:	210a      	movs	r1, #10
 800d112:	4628      	mov	r0, r5
 800d114:	f000 f906 	bl	800d324 <__swbuf_r>
 800d118:	3001      	adds	r0, #1
 800d11a:	d011      	beq.n	800d140 <_puts_r+0x84>
 800d11c:	250a      	movs	r5, #10
 800d11e:	e011      	b.n	800d144 <_puts_r+0x88>
 800d120:	4b1b      	ldr	r3, [pc, #108]	; (800d190 <_puts_r+0xd4>)
 800d122:	429c      	cmp	r4, r3
 800d124:	d101      	bne.n	800d12a <_puts_r+0x6e>
 800d126:	68ac      	ldr	r4, [r5, #8]
 800d128:	e7da      	b.n	800d0e0 <_puts_r+0x24>
 800d12a:	4b1a      	ldr	r3, [pc, #104]	; (800d194 <_puts_r+0xd8>)
 800d12c:	429c      	cmp	r4, r3
 800d12e:	bf08      	it	eq
 800d130:	68ec      	ldreq	r4, [r5, #12]
 800d132:	e7d5      	b.n	800d0e0 <_puts_r+0x24>
 800d134:	4621      	mov	r1, r4
 800d136:	4628      	mov	r0, r5
 800d138:	f000 f958 	bl	800d3ec <__swsetup_r>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d0dd      	beq.n	800d0fc <_puts_r+0x40>
 800d140:	f04f 35ff 	mov.w	r5, #4294967295
 800d144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d146:	07da      	lsls	r2, r3, #31
 800d148:	d405      	bmi.n	800d156 <_puts_r+0x9a>
 800d14a:	89a3      	ldrh	r3, [r4, #12]
 800d14c:	059b      	lsls	r3, r3, #22
 800d14e:	d402      	bmi.n	800d156 <_puts_r+0x9a>
 800d150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d152:	f7ff fa85 	bl	800c660 <__retarget_lock_release_recursive>
 800d156:	4628      	mov	r0, r5
 800d158:	bd70      	pop	{r4, r5, r6, pc}
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	da04      	bge.n	800d168 <_puts_r+0xac>
 800d15e:	69a2      	ldr	r2, [r4, #24]
 800d160:	429a      	cmp	r2, r3
 800d162:	dc06      	bgt.n	800d172 <_puts_r+0xb6>
 800d164:	290a      	cmp	r1, #10
 800d166:	d004      	beq.n	800d172 <_puts_r+0xb6>
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	6022      	str	r2, [r4, #0]
 800d16e:	7019      	strb	r1, [r3, #0]
 800d170:	e7c5      	b.n	800d0fe <_puts_r+0x42>
 800d172:	4622      	mov	r2, r4
 800d174:	4628      	mov	r0, r5
 800d176:	f000 f8d5 	bl	800d324 <__swbuf_r>
 800d17a:	3001      	adds	r0, #1
 800d17c:	d1bf      	bne.n	800d0fe <_puts_r+0x42>
 800d17e:	e7df      	b.n	800d140 <_puts_r+0x84>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	250a      	movs	r5, #10
 800d184:	1c5a      	adds	r2, r3, #1
 800d186:	6022      	str	r2, [r4, #0]
 800d188:	701d      	strb	r5, [r3, #0]
 800d18a:	e7db      	b.n	800d144 <_puts_r+0x88>
 800d18c:	08010b8c 	.word	0x08010b8c
 800d190:	08010bac 	.word	0x08010bac
 800d194:	08010b6c 	.word	0x08010b6c

0800d198 <puts>:
 800d198:	4b02      	ldr	r3, [pc, #8]	; (800d1a4 <puts+0xc>)
 800d19a:	4601      	mov	r1, r0
 800d19c:	6818      	ldr	r0, [r3, #0]
 800d19e:	f7ff bf8d 	b.w	800d0bc <_puts_r>
 800d1a2:	bf00      	nop
 800d1a4:	2000007c 	.word	0x2000007c

0800d1a8 <cleanup_glue>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	6809      	ldr	r1, [r1, #0]
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	b109      	cbz	r1, 800d1b6 <cleanup_glue+0xe>
 800d1b2:	f7ff fff9 	bl	800d1a8 <cleanup_glue>
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1be:	f001 bcf9 	b.w	800ebb4 <_free_r>
	...

0800d1c4 <_reclaim_reent>:
 800d1c4:	4b2c      	ldr	r3, [pc, #176]	; (800d278 <_reclaim_reent+0xb4>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4283      	cmp	r3, r0
 800d1ca:	b570      	push	{r4, r5, r6, lr}
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	d051      	beq.n	800d274 <_reclaim_reent+0xb0>
 800d1d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d1d2:	b143      	cbz	r3, 800d1e6 <_reclaim_reent+0x22>
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d14a      	bne.n	800d270 <_reclaim_reent+0xac>
 800d1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1dc:	6819      	ldr	r1, [r3, #0]
 800d1de:	b111      	cbz	r1, 800d1e6 <_reclaim_reent+0x22>
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f001 fce7 	bl	800ebb4 <_free_r>
 800d1e6:	6961      	ldr	r1, [r4, #20]
 800d1e8:	b111      	cbz	r1, 800d1f0 <_reclaim_reent+0x2c>
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f001 fce2 	bl	800ebb4 <_free_r>
 800d1f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d1f2:	b111      	cbz	r1, 800d1fa <_reclaim_reent+0x36>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f001 fcdd 	bl	800ebb4 <_free_r>
 800d1fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d1fc:	b111      	cbz	r1, 800d204 <_reclaim_reent+0x40>
 800d1fe:	4620      	mov	r0, r4
 800d200:	f001 fcd8 	bl	800ebb4 <_free_r>
 800d204:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d206:	b111      	cbz	r1, 800d20e <_reclaim_reent+0x4a>
 800d208:	4620      	mov	r0, r4
 800d20a:	f001 fcd3 	bl	800ebb4 <_free_r>
 800d20e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d210:	b111      	cbz	r1, 800d218 <_reclaim_reent+0x54>
 800d212:	4620      	mov	r0, r4
 800d214:	f001 fcce 	bl	800ebb4 <_free_r>
 800d218:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d21a:	b111      	cbz	r1, 800d222 <_reclaim_reent+0x5e>
 800d21c:	4620      	mov	r0, r4
 800d21e:	f001 fcc9 	bl	800ebb4 <_free_r>
 800d222:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d224:	b111      	cbz	r1, 800d22c <_reclaim_reent+0x68>
 800d226:	4620      	mov	r0, r4
 800d228:	f001 fcc4 	bl	800ebb4 <_free_r>
 800d22c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d22e:	b111      	cbz	r1, 800d236 <_reclaim_reent+0x72>
 800d230:	4620      	mov	r0, r4
 800d232:	f001 fcbf 	bl	800ebb4 <_free_r>
 800d236:	69a3      	ldr	r3, [r4, #24]
 800d238:	b1e3      	cbz	r3, 800d274 <_reclaim_reent+0xb0>
 800d23a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d23c:	4620      	mov	r0, r4
 800d23e:	4798      	blx	r3
 800d240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d242:	b1b9      	cbz	r1, 800d274 <_reclaim_reent+0xb0>
 800d244:	4620      	mov	r0, r4
 800d246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d24a:	f7ff bfad 	b.w	800d1a8 <cleanup_glue>
 800d24e:	5949      	ldr	r1, [r1, r5]
 800d250:	b941      	cbnz	r1, 800d264 <_reclaim_reent+0xa0>
 800d252:	3504      	adds	r5, #4
 800d254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d256:	2d80      	cmp	r5, #128	; 0x80
 800d258:	68d9      	ldr	r1, [r3, #12]
 800d25a:	d1f8      	bne.n	800d24e <_reclaim_reent+0x8a>
 800d25c:	4620      	mov	r0, r4
 800d25e:	f001 fca9 	bl	800ebb4 <_free_r>
 800d262:	e7ba      	b.n	800d1da <_reclaim_reent+0x16>
 800d264:	680e      	ldr	r6, [r1, #0]
 800d266:	4620      	mov	r0, r4
 800d268:	f001 fca4 	bl	800ebb4 <_free_r>
 800d26c:	4631      	mov	r1, r6
 800d26e:	e7ef      	b.n	800d250 <_reclaim_reent+0x8c>
 800d270:	2500      	movs	r5, #0
 800d272:	e7ef      	b.n	800d254 <_reclaim_reent+0x90>
 800d274:	bd70      	pop	{r4, r5, r6, pc}
 800d276:	bf00      	nop
 800d278:	2000007c 	.word	0x2000007c

0800d27c <_sbrk_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	4d06      	ldr	r5, [pc, #24]	; (800d298 <_sbrk_r+0x1c>)
 800d280:	2300      	movs	r3, #0
 800d282:	4604      	mov	r4, r0
 800d284:	4608      	mov	r0, r1
 800d286:	602b      	str	r3, [r5, #0]
 800d288:	f7f5 fea4 	bl	8002fd4 <_sbrk>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_sbrk_r+0x1a>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_sbrk_r+0x1a>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	200054f0 	.word	0x200054f0

0800d29c <__sread>:
 800d29c:	b510      	push	{r4, lr}
 800d29e:	460c      	mov	r4, r1
 800d2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a4:	f001 fe2c 	bl	800ef00 <_read_r>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	bfab      	itete	ge
 800d2ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2ae:	89a3      	ldrhlt	r3, [r4, #12]
 800d2b0:	181b      	addge	r3, r3, r0
 800d2b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2b6:	bfac      	ite	ge
 800d2b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2ba:	81a3      	strhlt	r3, [r4, #12]
 800d2bc:	bd10      	pop	{r4, pc}

0800d2be <__swrite>:
 800d2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c2:	461f      	mov	r7, r3
 800d2c4:	898b      	ldrh	r3, [r1, #12]
 800d2c6:	05db      	lsls	r3, r3, #23
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	d505      	bpl.n	800d2dc <__swrite+0x1e>
 800d2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d4:	2302      	movs	r3, #2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f001 f846 	bl	800e368 <_lseek_r>
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2e6:	81a3      	strh	r3, [r4, #12]
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	463b      	mov	r3, r7
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f2:	f000 b869 	b.w	800d3c8 <_write_r>

0800d2f6 <__sseek>:
 800d2f6:	b510      	push	{r4, lr}
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2fe:	f001 f833 	bl	800e368 <_lseek_r>
 800d302:	1c43      	adds	r3, r0, #1
 800d304:	89a3      	ldrh	r3, [r4, #12]
 800d306:	bf15      	itete	ne
 800d308:	6560      	strne	r0, [r4, #84]	; 0x54
 800d30a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d30e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d312:	81a3      	strheq	r3, [r4, #12]
 800d314:	bf18      	it	ne
 800d316:	81a3      	strhne	r3, [r4, #12]
 800d318:	bd10      	pop	{r4, pc}

0800d31a <__sclose>:
 800d31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d31e:	f000 b8d3 	b.w	800d4c8 <_close_r>
	...

0800d324 <__swbuf_r>:
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d326:	460e      	mov	r6, r1
 800d328:	4614      	mov	r4, r2
 800d32a:	4605      	mov	r5, r0
 800d32c:	b118      	cbz	r0, 800d336 <__swbuf_r+0x12>
 800d32e:	6983      	ldr	r3, [r0, #24]
 800d330:	b90b      	cbnz	r3, 800d336 <__swbuf_r+0x12>
 800d332:	f7ff f8d1 	bl	800c4d8 <__sinit>
 800d336:	4b21      	ldr	r3, [pc, #132]	; (800d3bc <__swbuf_r+0x98>)
 800d338:	429c      	cmp	r4, r3
 800d33a:	d12b      	bne.n	800d394 <__swbuf_r+0x70>
 800d33c:	686c      	ldr	r4, [r5, #4]
 800d33e:	69a3      	ldr	r3, [r4, #24]
 800d340:	60a3      	str	r3, [r4, #8]
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	071a      	lsls	r2, r3, #28
 800d346:	d52f      	bpl.n	800d3a8 <__swbuf_r+0x84>
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	b36b      	cbz	r3, 800d3a8 <__swbuf_r+0x84>
 800d34c:	6923      	ldr	r3, [r4, #16]
 800d34e:	6820      	ldr	r0, [r4, #0]
 800d350:	1ac0      	subs	r0, r0, r3
 800d352:	6963      	ldr	r3, [r4, #20]
 800d354:	b2f6      	uxtb	r6, r6
 800d356:	4283      	cmp	r3, r0
 800d358:	4637      	mov	r7, r6
 800d35a:	dc04      	bgt.n	800d366 <__swbuf_r+0x42>
 800d35c:	4621      	mov	r1, r4
 800d35e:	4628      	mov	r0, r5
 800d360:	f000 ffc2 	bl	800e2e8 <_fflush_r>
 800d364:	bb30      	cbnz	r0, 800d3b4 <__swbuf_r+0x90>
 800d366:	68a3      	ldr	r3, [r4, #8]
 800d368:	3b01      	subs	r3, #1
 800d36a:	60a3      	str	r3, [r4, #8]
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	6022      	str	r2, [r4, #0]
 800d372:	701e      	strb	r6, [r3, #0]
 800d374:	6963      	ldr	r3, [r4, #20]
 800d376:	3001      	adds	r0, #1
 800d378:	4283      	cmp	r3, r0
 800d37a:	d004      	beq.n	800d386 <__swbuf_r+0x62>
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	07db      	lsls	r3, r3, #31
 800d380:	d506      	bpl.n	800d390 <__swbuf_r+0x6c>
 800d382:	2e0a      	cmp	r6, #10
 800d384:	d104      	bne.n	800d390 <__swbuf_r+0x6c>
 800d386:	4621      	mov	r1, r4
 800d388:	4628      	mov	r0, r5
 800d38a:	f000 ffad 	bl	800e2e8 <_fflush_r>
 800d38e:	b988      	cbnz	r0, 800d3b4 <__swbuf_r+0x90>
 800d390:	4638      	mov	r0, r7
 800d392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d394:	4b0a      	ldr	r3, [pc, #40]	; (800d3c0 <__swbuf_r+0x9c>)
 800d396:	429c      	cmp	r4, r3
 800d398:	d101      	bne.n	800d39e <__swbuf_r+0x7a>
 800d39a:	68ac      	ldr	r4, [r5, #8]
 800d39c:	e7cf      	b.n	800d33e <__swbuf_r+0x1a>
 800d39e:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <__swbuf_r+0xa0>)
 800d3a0:	429c      	cmp	r4, r3
 800d3a2:	bf08      	it	eq
 800d3a4:	68ec      	ldreq	r4, [r5, #12]
 800d3a6:	e7ca      	b.n	800d33e <__swbuf_r+0x1a>
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	f000 f81e 	bl	800d3ec <__swsetup_r>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d0cb      	beq.n	800d34c <__swbuf_r+0x28>
 800d3b4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3b8:	e7ea      	b.n	800d390 <__swbuf_r+0x6c>
 800d3ba:	bf00      	nop
 800d3bc:	08010b8c 	.word	0x08010b8c
 800d3c0:	08010bac 	.word	0x08010bac
 800d3c4:	08010b6c 	.word	0x08010b6c

0800d3c8 <_write_r>:
 800d3c8:	b538      	push	{r3, r4, r5, lr}
 800d3ca:	4d07      	ldr	r5, [pc, #28]	; (800d3e8 <_write_r+0x20>)
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	4608      	mov	r0, r1
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	602a      	str	r2, [r5, #0]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	f7f5 fb28 	bl	8002a2c <_write>
 800d3dc:	1c43      	adds	r3, r0, #1
 800d3de:	d102      	bne.n	800d3e6 <_write_r+0x1e>
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	b103      	cbz	r3, 800d3e6 <_write_r+0x1e>
 800d3e4:	6023      	str	r3, [r4, #0]
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	200054f0 	.word	0x200054f0

0800d3ec <__swsetup_r>:
 800d3ec:	4b32      	ldr	r3, [pc, #200]	; (800d4b8 <__swsetup_r+0xcc>)
 800d3ee:	b570      	push	{r4, r5, r6, lr}
 800d3f0:	681d      	ldr	r5, [r3, #0]
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	b125      	cbz	r5, 800d402 <__swsetup_r+0x16>
 800d3f8:	69ab      	ldr	r3, [r5, #24]
 800d3fa:	b913      	cbnz	r3, 800d402 <__swsetup_r+0x16>
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	f7ff f86b 	bl	800c4d8 <__sinit>
 800d402:	4b2e      	ldr	r3, [pc, #184]	; (800d4bc <__swsetup_r+0xd0>)
 800d404:	429c      	cmp	r4, r3
 800d406:	d10f      	bne.n	800d428 <__swsetup_r+0x3c>
 800d408:	686c      	ldr	r4, [r5, #4]
 800d40a:	89a3      	ldrh	r3, [r4, #12]
 800d40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d410:	0719      	lsls	r1, r3, #28
 800d412:	d42c      	bmi.n	800d46e <__swsetup_r+0x82>
 800d414:	06dd      	lsls	r5, r3, #27
 800d416:	d411      	bmi.n	800d43c <__swsetup_r+0x50>
 800d418:	2309      	movs	r3, #9
 800d41a:	6033      	str	r3, [r6, #0]
 800d41c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d420:	81a3      	strh	r3, [r4, #12]
 800d422:	f04f 30ff 	mov.w	r0, #4294967295
 800d426:	e03e      	b.n	800d4a6 <__swsetup_r+0xba>
 800d428:	4b25      	ldr	r3, [pc, #148]	; (800d4c0 <__swsetup_r+0xd4>)
 800d42a:	429c      	cmp	r4, r3
 800d42c:	d101      	bne.n	800d432 <__swsetup_r+0x46>
 800d42e:	68ac      	ldr	r4, [r5, #8]
 800d430:	e7eb      	b.n	800d40a <__swsetup_r+0x1e>
 800d432:	4b24      	ldr	r3, [pc, #144]	; (800d4c4 <__swsetup_r+0xd8>)
 800d434:	429c      	cmp	r4, r3
 800d436:	bf08      	it	eq
 800d438:	68ec      	ldreq	r4, [r5, #12]
 800d43a:	e7e6      	b.n	800d40a <__swsetup_r+0x1e>
 800d43c:	0758      	lsls	r0, r3, #29
 800d43e:	d512      	bpl.n	800d466 <__swsetup_r+0x7a>
 800d440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d442:	b141      	cbz	r1, 800d456 <__swsetup_r+0x6a>
 800d444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d448:	4299      	cmp	r1, r3
 800d44a:	d002      	beq.n	800d452 <__swsetup_r+0x66>
 800d44c:	4630      	mov	r0, r6
 800d44e:	f001 fbb1 	bl	800ebb4 <_free_r>
 800d452:	2300      	movs	r3, #0
 800d454:	6363      	str	r3, [r4, #52]	; 0x34
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	2300      	movs	r3, #0
 800d460:	6063      	str	r3, [r4, #4]
 800d462:	6923      	ldr	r3, [r4, #16]
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f043 0308 	orr.w	r3, r3, #8
 800d46c:	81a3      	strh	r3, [r4, #12]
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	b94b      	cbnz	r3, 800d486 <__swsetup_r+0x9a>
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d47c:	d003      	beq.n	800d486 <__swsetup_r+0x9a>
 800d47e:	4621      	mov	r1, r4
 800d480:	4630      	mov	r0, r6
 800d482:	f000 ffa9 	bl	800e3d8 <__smakebuf_r>
 800d486:	89a0      	ldrh	r0, [r4, #12]
 800d488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d48c:	f010 0301 	ands.w	r3, r0, #1
 800d490:	d00a      	beq.n	800d4a8 <__swsetup_r+0xbc>
 800d492:	2300      	movs	r3, #0
 800d494:	60a3      	str	r3, [r4, #8]
 800d496:	6963      	ldr	r3, [r4, #20]
 800d498:	425b      	negs	r3, r3
 800d49a:	61a3      	str	r3, [r4, #24]
 800d49c:	6923      	ldr	r3, [r4, #16]
 800d49e:	b943      	cbnz	r3, 800d4b2 <__swsetup_r+0xc6>
 800d4a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4a4:	d1ba      	bne.n	800d41c <__swsetup_r+0x30>
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
 800d4a8:	0781      	lsls	r1, r0, #30
 800d4aa:	bf58      	it	pl
 800d4ac:	6963      	ldrpl	r3, [r4, #20]
 800d4ae:	60a3      	str	r3, [r4, #8]
 800d4b0:	e7f4      	b.n	800d49c <__swsetup_r+0xb0>
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	e7f7      	b.n	800d4a6 <__swsetup_r+0xba>
 800d4b6:	bf00      	nop
 800d4b8:	2000007c 	.word	0x2000007c
 800d4bc:	08010b8c 	.word	0x08010b8c
 800d4c0:	08010bac 	.word	0x08010bac
 800d4c4:	08010b6c 	.word	0x08010b6c

0800d4c8 <_close_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4d06      	ldr	r5, [pc, #24]	; (800d4e4 <_close_r+0x1c>)
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	602b      	str	r3, [r5, #0]
 800d4d4:	f7f5 fd49 	bl	8002f6a <_close>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d102      	bne.n	800d4e2 <_close_r+0x1a>
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	b103      	cbz	r3, 800d4e2 <_close_r+0x1a>
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	200054f0 	.word	0x200054f0

0800d4e8 <quorem>:
 800d4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	6903      	ldr	r3, [r0, #16]
 800d4ee:	690c      	ldr	r4, [r1, #16]
 800d4f0:	42a3      	cmp	r3, r4
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	f2c0 8081 	blt.w	800d5fa <quorem+0x112>
 800d4f8:	3c01      	subs	r4, #1
 800d4fa:	f101 0814 	add.w	r8, r1, #20
 800d4fe:	f100 0514 	add.w	r5, r0, #20
 800d502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d50c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d510:	3301      	adds	r3, #1
 800d512:	429a      	cmp	r2, r3
 800d514:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d518:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d51c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d520:	d331      	bcc.n	800d586 <quorem+0x9e>
 800d522:	f04f 0e00 	mov.w	lr, #0
 800d526:	4640      	mov	r0, r8
 800d528:	46ac      	mov	ip, r5
 800d52a:	46f2      	mov	sl, lr
 800d52c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d530:	b293      	uxth	r3, r2
 800d532:	fb06 e303 	mla	r3, r6, r3, lr
 800d536:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	ebaa 0303 	sub.w	r3, sl, r3
 800d540:	f8dc a000 	ldr.w	sl, [ip]
 800d544:	0c12      	lsrs	r2, r2, #16
 800d546:	fa13 f38a 	uxtah	r3, r3, sl
 800d54a:	fb06 e202 	mla	r2, r6, r2, lr
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	9b00      	ldr	r3, [sp, #0]
 800d552:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d556:	b292      	uxth	r2, r2
 800d558:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d55c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d560:	f8bd 3000 	ldrh.w	r3, [sp]
 800d564:	4581      	cmp	r9, r0
 800d566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d56a:	f84c 3b04 	str.w	r3, [ip], #4
 800d56e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d572:	d2db      	bcs.n	800d52c <quorem+0x44>
 800d574:	f855 300b 	ldr.w	r3, [r5, fp]
 800d578:	b92b      	cbnz	r3, 800d586 <quorem+0x9e>
 800d57a:	9b01      	ldr	r3, [sp, #4]
 800d57c:	3b04      	subs	r3, #4
 800d57e:	429d      	cmp	r5, r3
 800d580:	461a      	mov	r2, r3
 800d582:	d32e      	bcc.n	800d5e2 <quorem+0xfa>
 800d584:	613c      	str	r4, [r7, #16]
 800d586:	4638      	mov	r0, r7
 800d588:	f001 f9fc 	bl	800e984 <__mcmp>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	db24      	blt.n	800d5da <quorem+0xf2>
 800d590:	3601      	adds	r6, #1
 800d592:	4628      	mov	r0, r5
 800d594:	f04f 0c00 	mov.w	ip, #0
 800d598:	f858 2b04 	ldr.w	r2, [r8], #4
 800d59c:	f8d0 e000 	ldr.w	lr, [r0]
 800d5a0:	b293      	uxth	r3, r2
 800d5a2:	ebac 0303 	sub.w	r3, ip, r3
 800d5a6:	0c12      	lsrs	r2, r2, #16
 800d5a8:	fa13 f38e 	uxtah	r3, r3, lr
 800d5ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d5b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5ba:	45c1      	cmp	r9, r8
 800d5bc:	f840 3b04 	str.w	r3, [r0], #4
 800d5c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5c4:	d2e8      	bcs.n	800d598 <quorem+0xb0>
 800d5c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5ce:	b922      	cbnz	r2, 800d5da <quorem+0xf2>
 800d5d0:	3b04      	subs	r3, #4
 800d5d2:	429d      	cmp	r5, r3
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	d30a      	bcc.n	800d5ee <quorem+0x106>
 800d5d8:	613c      	str	r4, [r7, #16]
 800d5da:	4630      	mov	r0, r6
 800d5dc:	b003      	add	sp, #12
 800d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e2:	6812      	ldr	r2, [r2, #0]
 800d5e4:	3b04      	subs	r3, #4
 800d5e6:	2a00      	cmp	r2, #0
 800d5e8:	d1cc      	bne.n	800d584 <quorem+0x9c>
 800d5ea:	3c01      	subs	r4, #1
 800d5ec:	e7c7      	b.n	800d57e <quorem+0x96>
 800d5ee:	6812      	ldr	r2, [r2, #0]
 800d5f0:	3b04      	subs	r3, #4
 800d5f2:	2a00      	cmp	r2, #0
 800d5f4:	d1f0      	bne.n	800d5d8 <quorem+0xf0>
 800d5f6:	3c01      	subs	r4, #1
 800d5f8:	e7eb      	b.n	800d5d2 <quorem+0xea>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	e7ee      	b.n	800d5dc <quorem+0xf4>
	...

0800d600 <_dtoa_r>:
 800d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	ed2d 8b04 	vpush	{d8-d9}
 800d608:	ec57 6b10 	vmov	r6, r7, d0
 800d60c:	b093      	sub	sp, #76	; 0x4c
 800d60e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d610:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d614:	9106      	str	r1, [sp, #24]
 800d616:	ee10 aa10 	vmov	sl, s0
 800d61a:	4604      	mov	r4, r0
 800d61c:	9209      	str	r2, [sp, #36]	; 0x24
 800d61e:	930c      	str	r3, [sp, #48]	; 0x30
 800d620:	46bb      	mov	fp, r7
 800d622:	b975      	cbnz	r5, 800d642 <_dtoa_r+0x42>
 800d624:	2010      	movs	r0, #16
 800d626:	f000 ff17 	bl	800e458 <malloc>
 800d62a:	4602      	mov	r2, r0
 800d62c:	6260      	str	r0, [r4, #36]	; 0x24
 800d62e:	b920      	cbnz	r0, 800d63a <_dtoa_r+0x3a>
 800d630:	4ba7      	ldr	r3, [pc, #668]	; (800d8d0 <_dtoa_r+0x2d0>)
 800d632:	21ea      	movs	r1, #234	; 0xea
 800d634:	48a7      	ldr	r0, [pc, #668]	; (800d8d4 <_dtoa_r+0x2d4>)
 800d636:	f001 fc75 	bl	800ef24 <__assert_func>
 800d63a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d63e:	6005      	str	r5, [r0, #0]
 800d640:	60c5      	str	r5, [r0, #12]
 800d642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d644:	6819      	ldr	r1, [r3, #0]
 800d646:	b151      	cbz	r1, 800d65e <_dtoa_r+0x5e>
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	604a      	str	r2, [r1, #4]
 800d64c:	2301      	movs	r3, #1
 800d64e:	4093      	lsls	r3, r2
 800d650:	608b      	str	r3, [r1, #8]
 800d652:	4620      	mov	r0, r4
 800d654:	f000 ff54 	bl	800e500 <_Bfree>
 800d658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d65a:	2200      	movs	r2, #0
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	1e3b      	subs	r3, r7, #0
 800d660:	bfaa      	itet	ge
 800d662:	2300      	movge	r3, #0
 800d664:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d668:	f8c8 3000 	strge.w	r3, [r8]
 800d66c:	4b9a      	ldr	r3, [pc, #616]	; (800d8d8 <_dtoa_r+0x2d8>)
 800d66e:	bfbc      	itt	lt
 800d670:	2201      	movlt	r2, #1
 800d672:	f8c8 2000 	strlt.w	r2, [r8]
 800d676:	ea33 030b 	bics.w	r3, r3, fp
 800d67a:	d11b      	bne.n	800d6b4 <_dtoa_r+0xb4>
 800d67c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d67e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d688:	4333      	orrs	r3, r6
 800d68a:	f000 8592 	beq.w	800e1b2 <_dtoa_r+0xbb2>
 800d68e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d690:	b963      	cbnz	r3, 800d6ac <_dtoa_r+0xac>
 800d692:	4b92      	ldr	r3, [pc, #584]	; (800d8dc <_dtoa_r+0x2dc>)
 800d694:	e022      	b.n	800d6dc <_dtoa_r+0xdc>
 800d696:	4b92      	ldr	r3, [pc, #584]	; (800d8e0 <_dtoa_r+0x2e0>)
 800d698:	9301      	str	r3, [sp, #4]
 800d69a:	3308      	adds	r3, #8
 800d69c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d69e:	6013      	str	r3, [r2, #0]
 800d6a0:	9801      	ldr	r0, [sp, #4]
 800d6a2:	b013      	add	sp, #76	; 0x4c
 800d6a4:	ecbd 8b04 	vpop	{d8-d9}
 800d6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ac:	4b8b      	ldr	r3, [pc, #556]	; (800d8dc <_dtoa_r+0x2dc>)
 800d6ae:	9301      	str	r3, [sp, #4]
 800d6b0:	3303      	adds	r3, #3
 800d6b2:	e7f3      	b.n	800d69c <_dtoa_r+0x9c>
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	4659      	mov	r1, fp
 800d6bc:	f7f3 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6c0:	ec4b ab19 	vmov	d9, sl, fp
 800d6c4:	4680      	mov	r8, r0
 800d6c6:	b158      	cbz	r0, 800d6e0 <_dtoa_r+0xe0>
 800d6c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f000 856b 	beq.w	800e1ac <_dtoa_r+0xbac>
 800d6d6:	4883      	ldr	r0, [pc, #524]	; (800d8e4 <_dtoa_r+0x2e4>)
 800d6d8:	6018      	str	r0, [r3, #0]
 800d6da:	1e43      	subs	r3, r0, #1
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	e7df      	b.n	800d6a0 <_dtoa_r+0xa0>
 800d6e0:	ec4b ab10 	vmov	d0, sl, fp
 800d6e4:	aa10      	add	r2, sp, #64	; 0x40
 800d6e6:	a911      	add	r1, sp, #68	; 0x44
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f001 f9f1 	bl	800ead0 <__d2b>
 800d6ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d6f2:	ee08 0a10 	vmov	s16, r0
 800d6f6:	2d00      	cmp	r5, #0
 800d6f8:	f000 8084 	beq.w	800d804 <_dtoa_r+0x204>
 800d6fc:	ee19 3a90 	vmov	r3, s19
 800d700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d704:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d708:	4656      	mov	r6, sl
 800d70a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d70e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d712:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d716:	4b74      	ldr	r3, [pc, #464]	; (800d8e8 <_dtoa_r+0x2e8>)
 800d718:	2200      	movs	r2, #0
 800d71a:	4630      	mov	r0, r6
 800d71c:	4639      	mov	r1, r7
 800d71e:	f7f2 fdb3 	bl	8000288 <__aeabi_dsub>
 800d722:	a365      	add	r3, pc, #404	; (adr r3, 800d8b8 <_dtoa_r+0x2b8>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	f7f2 ff66 	bl	80005f8 <__aeabi_dmul>
 800d72c:	a364      	add	r3, pc, #400	; (adr r3, 800d8c0 <_dtoa_r+0x2c0>)
 800d72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d732:	f7f2 fdab 	bl	800028c <__adddf3>
 800d736:	4606      	mov	r6, r0
 800d738:	4628      	mov	r0, r5
 800d73a:	460f      	mov	r7, r1
 800d73c:	f7f2 fef2 	bl	8000524 <__aeabi_i2d>
 800d740:	a361      	add	r3, pc, #388	; (adr r3, 800d8c8 <_dtoa_r+0x2c8>)
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	f7f2 ff57 	bl	80005f8 <__aeabi_dmul>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4630      	mov	r0, r6
 800d750:	4639      	mov	r1, r7
 800d752:	f7f2 fd9b 	bl	800028c <__adddf3>
 800d756:	4606      	mov	r6, r0
 800d758:	460f      	mov	r7, r1
 800d75a:	f7f3 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800d75e:	2200      	movs	r2, #0
 800d760:	9000      	str	r0, [sp, #0]
 800d762:	2300      	movs	r3, #0
 800d764:	4630      	mov	r0, r6
 800d766:	4639      	mov	r1, r7
 800d768:	f7f3 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800d76c:	b150      	cbz	r0, 800d784 <_dtoa_r+0x184>
 800d76e:	9800      	ldr	r0, [sp, #0]
 800d770:	f7f2 fed8 	bl	8000524 <__aeabi_i2d>
 800d774:	4632      	mov	r2, r6
 800d776:	463b      	mov	r3, r7
 800d778:	f7f3 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d77c:	b910      	cbnz	r0, 800d784 <_dtoa_r+0x184>
 800d77e:	9b00      	ldr	r3, [sp, #0]
 800d780:	3b01      	subs	r3, #1
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	9b00      	ldr	r3, [sp, #0]
 800d786:	2b16      	cmp	r3, #22
 800d788:	d85a      	bhi.n	800d840 <_dtoa_r+0x240>
 800d78a:	9a00      	ldr	r2, [sp, #0]
 800d78c:	4b57      	ldr	r3, [pc, #348]	; (800d8ec <_dtoa_r+0x2ec>)
 800d78e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	ec51 0b19 	vmov	r0, r1, d9
 800d79a:	f7f3 f99f 	bl	8000adc <__aeabi_dcmplt>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d050      	beq.n	800d844 <_dtoa_r+0x244>
 800d7a2:	9b00      	ldr	r3, [sp, #0]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7ae:	1b5d      	subs	r5, r3, r5
 800d7b0:	1e6b      	subs	r3, r5, #1
 800d7b2:	9305      	str	r3, [sp, #20]
 800d7b4:	bf45      	ittet	mi
 800d7b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d7ba:	9304      	strmi	r3, [sp, #16]
 800d7bc:	2300      	movpl	r3, #0
 800d7be:	2300      	movmi	r3, #0
 800d7c0:	bf4c      	ite	mi
 800d7c2:	9305      	strmi	r3, [sp, #20]
 800d7c4:	9304      	strpl	r3, [sp, #16]
 800d7c6:	9b00      	ldr	r3, [sp, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	db3d      	blt.n	800d848 <_dtoa_r+0x248>
 800d7cc:	9b05      	ldr	r3, [sp, #20]
 800d7ce:	9a00      	ldr	r2, [sp, #0]
 800d7d0:	920a      	str	r2, [sp, #40]	; 0x28
 800d7d2:	4413      	add	r3, r2
 800d7d4:	9305      	str	r3, [sp, #20]
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	9307      	str	r3, [sp, #28]
 800d7da:	9b06      	ldr	r3, [sp, #24]
 800d7dc:	2b09      	cmp	r3, #9
 800d7de:	f200 8089 	bhi.w	800d8f4 <_dtoa_r+0x2f4>
 800d7e2:	2b05      	cmp	r3, #5
 800d7e4:	bfc4      	itt	gt
 800d7e6:	3b04      	subgt	r3, #4
 800d7e8:	9306      	strgt	r3, [sp, #24]
 800d7ea:	9b06      	ldr	r3, [sp, #24]
 800d7ec:	f1a3 0302 	sub.w	r3, r3, #2
 800d7f0:	bfcc      	ite	gt
 800d7f2:	2500      	movgt	r5, #0
 800d7f4:	2501      	movle	r5, #1
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	f200 8087 	bhi.w	800d90a <_dtoa_r+0x30a>
 800d7fc:	e8df f003 	tbb	[pc, r3]
 800d800:	59383a2d 	.word	0x59383a2d
 800d804:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d808:	441d      	add	r5, r3
 800d80a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d80e:	2b20      	cmp	r3, #32
 800d810:	bfc1      	itttt	gt
 800d812:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d816:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d81a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d81e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d822:	bfda      	itte	le
 800d824:	f1c3 0320 	rsble	r3, r3, #32
 800d828:	fa06 f003 	lslle.w	r0, r6, r3
 800d82c:	4318      	orrgt	r0, r3
 800d82e:	f7f2 fe69 	bl	8000504 <__aeabi_ui2d>
 800d832:	2301      	movs	r3, #1
 800d834:	4606      	mov	r6, r0
 800d836:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d83a:	3d01      	subs	r5, #1
 800d83c:	930e      	str	r3, [sp, #56]	; 0x38
 800d83e:	e76a      	b.n	800d716 <_dtoa_r+0x116>
 800d840:	2301      	movs	r3, #1
 800d842:	e7b2      	b.n	800d7aa <_dtoa_r+0x1aa>
 800d844:	900b      	str	r0, [sp, #44]	; 0x2c
 800d846:	e7b1      	b.n	800d7ac <_dtoa_r+0x1ac>
 800d848:	9b04      	ldr	r3, [sp, #16]
 800d84a:	9a00      	ldr	r2, [sp, #0]
 800d84c:	1a9b      	subs	r3, r3, r2
 800d84e:	9304      	str	r3, [sp, #16]
 800d850:	4253      	negs	r3, r2
 800d852:	9307      	str	r3, [sp, #28]
 800d854:	2300      	movs	r3, #0
 800d856:	930a      	str	r3, [sp, #40]	; 0x28
 800d858:	e7bf      	b.n	800d7da <_dtoa_r+0x1da>
 800d85a:	2300      	movs	r3, #0
 800d85c:	9308      	str	r3, [sp, #32]
 800d85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d860:	2b00      	cmp	r3, #0
 800d862:	dc55      	bgt.n	800d910 <_dtoa_r+0x310>
 800d864:	2301      	movs	r3, #1
 800d866:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d86a:	461a      	mov	r2, r3
 800d86c:	9209      	str	r2, [sp, #36]	; 0x24
 800d86e:	e00c      	b.n	800d88a <_dtoa_r+0x28a>
 800d870:	2301      	movs	r3, #1
 800d872:	e7f3      	b.n	800d85c <_dtoa_r+0x25c>
 800d874:	2300      	movs	r3, #0
 800d876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d878:	9308      	str	r3, [sp, #32]
 800d87a:	9b00      	ldr	r3, [sp, #0]
 800d87c:	4413      	add	r3, r2
 800d87e:	9302      	str	r3, [sp, #8]
 800d880:	3301      	adds	r3, #1
 800d882:	2b01      	cmp	r3, #1
 800d884:	9303      	str	r3, [sp, #12]
 800d886:	bfb8      	it	lt
 800d888:	2301      	movlt	r3, #1
 800d88a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d88c:	2200      	movs	r2, #0
 800d88e:	6042      	str	r2, [r0, #4]
 800d890:	2204      	movs	r2, #4
 800d892:	f102 0614 	add.w	r6, r2, #20
 800d896:	429e      	cmp	r6, r3
 800d898:	6841      	ldr	r1, [r0, #4]
 800d89a:	d93d      	bls.n	800d918 <_dtoa_r+0x318>
 800d89c:	4620      	mov	r0, r4
 800d89e:	f000 fdef 	bl	800e480 <_Balloc>
 800d8a2:	9001      	str	r0, [sp, #4]
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d13b      	bne.n	800d920 <_dtoa_r+0x320>
 800d8a8:	4b11      	ldr	r3, [pc, #68]	; (800d8f0 <_dtoa_r+0x2f0>)
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d8b0:	e6c0      	b.n	800d634 <_dtoa_r+0x34>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e7df      	b.n	800d876 <_dtoa_r+0x276>
 800d8b6:	bf00      	nop
 800d8b8:	636f4361 	.word	0x636f4361
 800d8bc:	3fd287a7 	.word	0x3fd287a7
 800d8c0:	8b60c8b3 	.word	0x8b60c8b3
 800d8c4:	3fc68a28 	.word	0x3fc68a28
 800d8c8:	509f79fb 	.word	0x509f79fb
 800d8cc:	3fd34413 	.word	0x3fd34413
 800d8d0:	08010c11 	.word	0x08010c11
 800d8d4:	08010c28 	.word	0x08010c28
 800d8d8:	7ff00000 	.word	0x7ff00000
 800d8dc:	08010c0d 	.word	0x08010c0d
 800d8e0:	08010c04 	.word	0x08010c04
 800d8e4:	08010be1 	.word	0x08010be1
 800d8e8:	3ff80000 	.word	0x3ff80000
 800d8ec:	08010d18 	.word	0x08010d18
 800d8f0:	08010c83 	.word	0x08010c83
 800d8f4:	2501      	movs	r5, #1
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9306      	str	r3, [sp, #24]
 800d8fa:	9508      	str	r5, [sp, #32]
 800d8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d900:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d904:	2200      	movs	r2, #0
 800d906:	2312      	movs	r3, #18
 800d908:	e7b0      	b.n	800d86c <_dtoa_r+0x26c>
 800d90a:	2301      	movs	r3, #1
 800d90c:	9308      	str	r3, [sp, #32]
 800d90e:	e7f5      	b.n	800d8fc <_dtoa_r+0x2fc>
 800d910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d912:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d916:	e7b8      	b.n	800d88a <_dtoa_r+0x28a>
 800d918:	3101      	adds	r1, #1
 800d91a:	6041      	str	r1, [r0, #4]
 800d91c:	0052      	lsls	r2, r2, #1
 800d91e:	e7b8      	b.n	800d892 <_dtoa_r+0x292>
 800d920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d922:	9a01      	ldr	r2, [sp, #4]
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	9b03      	ldr	r3, [sp, #12]
 800d928:	2b0e      	cmp	r3, #14
 800d92a:	f200 809d 	bhi.w	800da68 <_dtoa_r+0x468>
 800d92e:	2d00      	cmp	r5, #0
 800d930:	f000 809a 	beq.w	800da68 <_dtoa_r+0x468>
 800d934:	9b00      	ldr	r3, [sp, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	dd32      	ble.n	800d9a0 <_dtoa_r+0x3a0>
 800d93a:	4ab7      	ldr	r2, [pc, #732]	; (800dc18 <_dtoa_r+0x618>)
 800d93c:	f003 030f 	and.w	r3, r3, #15
 800d940:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d944:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d948:	9b00      	ldr	r3, [sp, #0]
 800d94a:	05d8      	lsls	r0, r3, #23
 800d94c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d950:	d516      	bpl.n	800d980 <_dtoa_r+0x380>
 800d952:	4bb2      	ldr	r3, [pc, #712]	; (800dc1c <_dtoa_r+0x61c>)
 800d954:	ec51 0b19 	vmov	r0, r1, d9
 800d958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d95c:	f7f2 ff76 	bl	800084c <__aeabi_ddiv>
 800d960:	f007 070f 	and.w	r7, r7, #15
 800d964:	4682      	mov	sl, r0
 800d966:	468b      	mov	fp, r1
 800d968:	2503      	movs	r5, #3
 800d96a:	4eac      	ldr	r6, [pc, #688]	; (800dc1c <_dtoa_r+0x61c>)
 800d96c:	b957      	cbnz	r7, 800d984 <_dtoa_r+0x384>
 800d96e:	4642      	mov	r2, r8
 800d970:	464b      	mov	r3, r9
 800d972:	4650      	mov	r0, sl
 800d974:	4659      	mov	r1, fp
 800d976:	f7f2 ff69 	bl	800084c <__aeabi_ddiv>
 800d97a:	4682      	mov	sl, r0
 800d97c:	468b      	mov	fp, r1
 800d97e:	e028      	b.n	800d9d2 <_dtoa_r+0x3d2>
 800d980:	2502      	movs	r5, #2
 800d982:	e7f2      	b.n	800d96a <_dtoa_r+0x36a>
 800d984:	07f9      	lsls	r1, r7, #31
 800d986:	d508      	bpl.n	800d99a <_dtoa_r+0x39a>
 800d988:	4640      	mov	r0, r8
 800d98a:	4649      	mov	r1, r9
 800d98c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d990:	f7f2 fe32 	bl	80005f8 <__aeabi_dmul>
 800d994:	3501      	adds	r5, #1
 800d996:	4680      	mov	r8, r0
 800d998:	4689      	mov	r9, r1
 800d99a:	107f      	asrs	r7, r7, #1
 800d99c:	3608      	adds	r6, #8
 800d99e:	e7e5      	b.n	800d96c <_dtoa_r+0x36c>
 800d9a0:	f000 809b 	beq.w	800dada <_dtoa_r+0x4da>
 800d9a4:	9b00      	ldr	r3, [sp, #0]
 800d9a6:	4f9d      	ldr	r7, [pc, #628]	; (800dc1c <_dtoa_r+0x61c>)
 800d9a8:	425e      	negs	r6, r3
 800d9aa:	4b9b      	ldr	r3, [pc, #620]	; (800dc18 <_dtoa_r+0x618>)
 800d9ac:	f006 020f 	and.w	r2, r6, #15
 800d9b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	ec51 0b19 	vmov	r0, r1, d9
 800d9bc:	f7f2 fe1c 	bl	80005f8 <__aeabi_dmul>
 800d9c0:	1136      	asrs	r6, r6, #4
 800d9c2:	4682      	mov	sl, r0
 800d9c4:	468b      	mov	fp, r1
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	2502      	movs	r5, #2
 800d9ca:	2e00      	cmp	r6, #0
 800d9cc:	d17a      	bne.n	800dac4 <_dtoa_r+0x4c4>
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1d3      	bne.n	800d97a <_dtoa_r+0x37a>
 800d9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 8082 	beq.w	800dade <_dtoa_r+0x4de>
 800d9da:	4b91      	ldr	r3, [pc, #580]	; (800dc20 <_dtoa_r+0x620>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	4650      	mov	r0, sl
 800d9e0:	4659      	mov	r1, fp
 800d9e2:	f7f3 f87b 	bl	8000adc <__aeabi_dcmplt>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d079      	beq.n	800dade <_dtoa_r+0x4de>
 800d9ea:	9b03      	ldr	r3, [sp, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d076      	beq.n	800dade <_dtoa_r+0x4de>
 800d9f0:	9b02      	ldr	r3, [sp, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	dd36      	ble.n	800da64 <_dtoa_r+0x464>
 800d9f6:	9b00      	ldr	r3, [sp, #0]
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	4659      	mov	r1, fp
 800d9fc:	1e5f      	subs	r7, r3, #1
 800d9fe:	2200      	movs	r2, #0
 800da00:	4b88      	ldr	r3, [pc, #544]	; (800dc24 <_dtoa_r+0x624>)
 800da02:	f7f2 fdf9 	bl	80005f8 <__aeabi_dmul>
 800da06:	9e02      	ldr	r6, [sp, #8]
 800da08:	4682      	mov	sl, r0
 800da0a:	468b      	mov	fp, r1
 800da0c:	3501      	adds	r5, #1
 800da0e:	4628      	mov	r0, r5
 800da10:	f7f2 fd88 	bl	8000524 <__aeabi_i2d>
 800da14:	4652      	mov	r2, sl
 800da16:	465b      	mov	r3, fp
 800da18:	f7f2 fdee 	bl	80005f8 <__aeabi_dmul>
 800da1c:	4b82      	ldr	r3, [pc, #520]	; (800dc28 <_dtoa_r+0x628>)
 800da1e:	2200      	movs	r2, #0
 800da20:	f7f2 fc34 	bl	800028c <__adddf3>
 800da24:	46d0      	mov	r8, sl
 800da26:	46d9      	mov	r9, fp
 800da28:	4682      	mov	sl, r0
 800da2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800da2e:	2e00      	cmp	r6, #0
 800da30:	d158      	bne.n	800dae4 <_dtoa_r+0x4e4>
 800da32:	4b7e      	ldr	r3, [pc, #504]	; (800dc2c <_dtoa_r+0x62c>)
 800da34:	2200      	movs	r2, #0
 800da36:	4640      	mov	r0, r8
 800da38:	4649      	mov	r1, r9
 800da3a:	f7f2 fc25 	bl	8000288 <__aeabi_dsub>
 800da3e:	4652      	mov	r2, sl
 800da40:	465b      	mov	r3, fp
 800da42:	4680      	mov	r8, r0
 800da44:	4689      	mov	r9, r1
 800da46:	f7f3 f867 	bl	8000b18 <__aeabi_dcmpgt>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	f040 8295 	bne.w	800df7a <_dtoa_r+0x97a>
 800da50:	4652      	mov	r2, sl
 800da52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	f7f3 f83f 	bl	8000adc <__aeabi_dcmplt>
 800da5e:	2800      	cmp	r0, #0
 800da60:	f040 8289 	bne.w	800df76 <_dtoa_r+0x976>
 800da64:	ec5b ab19 	vmov	sl, fp, d9
 800da68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f2c0 8148 	blt.w	800dd00 <_dtoa_r+0x700>
 800da70:	9a00      	ldr	r2, [sp, #0]
 800da72:	2a0e      	cmp	r2, #14
 800da74:	f300 8144 	bgt.w	800dd00 <_dtoa_r+0x700>
 800da78:	4b67      	ldr	r3, [pc, #412]	; (800dc18 <_dtoa_r+0x618>)
 800da7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da84:	2b00      	cmp	r3, #0
 800da86:	f280 80d5 	bge.w	800dc34 <_dtoa_r+0x634>
 800da8a:	9b03      	ldr	r3, [sp, #12]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f300 80d1 	bgt.w	800dc34 <_dtoa_r+0x634>
 800da92:	f040 826f 	bne.w	800df74 <_dtoa_r+0x974>
 800da96:	4b65      	ldr	r3, [pc, #404]	; (800dc2c <_dtoa_r+0x62c>)
 800da98:	2200      	movs	r2, #0
 800da9a:	4640      	mov	r0, r8
 800da9c:	4649      	mov	r1, r9
 800da9e:	f7f2 fdab 	bl	80005f8 <__aeabi_dmul>
 800daa2:	4652      	mov	r2, sl
 800daa4:	465b      	mov	r3, fp
 800daa6:	f7f3 f82d 	bl	8000b04 <__aeabi_dcmpge>
 800daaa:	9e03      	ldr	r6, [sp, #12]
 800daac:	4637      	mov	r7, r6
 800daae:	2800      	cmp	r0, #0
 800dab0:	f040 8245 	bne.w	800df3e <_dtoa_r+0x93e>
 800dab4:	9d01      	ldr	r5, [sp, #4]
 800dab6:	2331      	movs	r3, #49	; 0x31
 800dab8:	f805 3b01 	strb.w	r3, [r5], #1
 800dabc:	9b00      	ldr	r3, [sp, #0]
 800dabe:	3301      	adds	r3, #1
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	e240      	b.n	800df46 <_dtoa_r+0x946>
 800dac4:	07f2      	lsls	r2, r6, #31
 800dac6:	d505      	bpl.n	800dad4 <_dtoa_r+0x4d4>
 800dac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dacc:	f7f2 fd94 	bl	80005f8 <__aeabi_dmul>
 800dad0:	3501      	adds	r5, #1
 800dad2:	2301      	movs	r3, #1
 800dad4:	1076      	asrs	r6, r6, #1
 800dad6:	3708      	adds	r7, #8
 800dad8:	e777      	b.n	800d9ca <_dtoa_r+0x3ca>
 800dada:	2502      	movs	r5, #2
 800dadc:	e779      	b.n	800d9d2 <_dtoa_r+0x3d2>
 800dade:	9f00      	ldr	r7, [sp, #0]
 800dae0:	9e03      	ldr	r6, [sp, #12]
 800dae2:	e794      	b.n	800da0e <_dtoa_r+0x40e>
 800dae4:	9901      	ldr	r1, [sp, #4]
 800dae6:	4b4c      	ldr	r3, [pc, #304]	; (800dc18 <_dtoa_r+0x618>)
 800dae8:	4431      	add	r1, r6
 800daea:	910d      	str	r1, [sp, #52]	; 0x34
 800daec:	9908      	ldr	r1, [sp, #32]
 800daee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800daf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800daf6:	2900      	cmp	r1, #0
 800daf8:	d043      	beq.n	800db82 <_dtoa_r+0x582>
 800dafa:	494d      	ldr	r1, [pc, #308]	; (800dc30 <_dtoa_r+0x630>)
 800dafc:	2000      	movs	r0, #0
 800dafe:	f7f2 fea5 	bl	800084c <__aeabi_ddiv>
 800db02:	4652      	mov	r2, sl
 800db04:	465b      	mov	r3, fp
 800db06:	f7f2 fbbf 	bl	8000288 <__aeabi_dsub>
 800db0a:	9d01      	ldr	r5, [sp, #4]
 800db0c:	4682      	mov	sl, r0
 800db0e:	468b      	mov	fp, r1
 800db10:	4649      	mov	r1, r9
 800db12:	4640      	mov	r0, r8
 800db14:	f7f3 f820 	bl	8000b58 <__aeabi_d2iz>
 800db18:	4606      	mov	r6, r0
 800db1a:	f7f2 fd03 	bl	8000524 <__aeabi_i2d>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4640      	mov	r0, r8
 800db24:	4649      	mov	r1, r9
 800db26:	f7f2 fbaf 	bl	8000288 <__aeabi_dsub>
 800db2a:	3630      	adds	r6, #48	; 0x30
 800db2c:	f805 6b01 	strb.w	r6, [r5], #1
 800db30:	4652      	mov	r2, sl
 800db32:	465b      	mov	r3, fp
 800db34:	4680      	mov	r8, r0
 800db36:	4689      	mov	r9, r1
 800db38:	f7f2 ffd0 	bl	8000adc <__aeabi_dcmplt>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d163      	bne.n	800dc08 <_dtoa_r+0x608>
 800db40:	4642      	mov	r2, r8
 800db42:	464b      	mov	r3, r9
 800db44:	4936      	ldr	r1, [pc, #216]	; (800dc20 <_dtoa_r+0x620>)
 800db46:	2000      	movs	r0, #0
 800db48:	f7f2 fb9e 	bl	8000288 <__aeabi_dsub>
 800db4c:	4652      	mov	r2, sl
 800db4e:	465b      	mov	r3, fp
 800db50:	f7f2 ffc4 	bl	8000adc <__aeabi_dcmplt>
 800db54:	2800      	cmp	r0, #0
 800db56:	f040 80b5 	bne.w	800dcc4 <_dtoa_r+0x6c4>
 800db5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db5c:	429d      	cmp	r5, r3
 800db5e:	d081      	beq.n	800da64 <_dtoa_r+0x464>
 800db60:	4b30      	ldr	r3, [pc, #192]	; (800dc24 <_dtoa_r+0x624>)
 800db62:	2200      	movs	r2, #0
 800db64:	4650      	mov	r0, sl
 800db66:	4659      	mov	r1, fp
 800db68:	f7f2 fd46 	bl	80005f8 <__aeabi_dmul>
 800db6c:	4b2d      	ldr	r3, [pc, #180]	; (800dc24 <_dtoa_r+0x624>)
 800db6e:	4682      	mov	sl, r0
 800db70:	468b      	mov	fp, r1
 800db72:	4640      	mov	r0, r8
 800db74:	4649      	mov	r1, r9
 800db76:	2200      	movs	r2, #0
 800db78:	f7f2 fd3e 	bl	80005f8 <__aeabi_dmul>
 800db7c:	4680      	mov	r8, r0
 800db7e:	4689      	mov	r9, r1
 800db80:	e7c6      	b.n	800db10 <_dtoa_r+0x510>
 800db82:	4650      	mov	r0, sl
 800db84:	4659      	mov	r1, fp
 800db86:	f7f2 fd37 	bl	80005f8 <__aeabi_dmul>
 800db8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db8c:	9d01      	ldr	r5, [sp, #4]
 800db8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db90:	4682      	mov	sl, r0
 800db92:	468b      	mov	fp, r1
 800db94:	4649      	mov	r1, r9
 800db96:	4640      	mov	r0, r8
 800db98:	f7f2 ffde 	bl	8000b58 <__aeabi_d2iz>
 800db9c:	4606      	mov	r6, r0
 800db9e:	f7f2 fcc1 	bl	8000524 <__aeabi_i2d>
 800dba2:	3630      	adds	r6, #48	; 0x30
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	4640      	mov	r0, r8
 800dbaa:	4649      	mov	r1, r9
 800dbac:	f7f2 fb6c 	bl	8000288 <__aeabi_dsub>
 800dbb0:	f805 6b01 	strb.w	r6, [r5], #1
 800dbb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbb6:	429d      	cmp	r5, r3
 800dbb8:	4680      	mov	r8, r0
 800dbba:	4689      	mov	r9, r1
 800dbbc:	f04f 0200 	mov.w	r2, #0
 800dbc0:	d124      	bne.n	800dc0c <_dtoa_r+0x60c>
 800dbc2:	4b1b      	ldr	r3, [pc, #108]	; (800dc30 <_dtoa_r+0x630>)
 800dbc4:	4650      	mov	r0, sl
 800dbc6:	4659      	mov	r1, fp
 800dbc8:	f7f2 fb60 	bl	800028c <__adddf3>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	460b      	mov	r3, r1
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	4649      	mov	r1, r9
 800dbd4:	f7f2 ffa0 	bl	8000b18 <__aeabi_dcmpgt>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d173      	bne.n	800dcc4 <_dtoa_r+0x6c4>
 800dbdc:	4652      	mov	r2, sl
 800dbde:	465b      	mov	r3, fp
 800dbe0:	4913      	ldr	r1, [pc, #76]	; (800dc30 <_dtoa_r+0x630>)
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	f7f2 fb50 	bl	8000288 <__aeabi_dsub>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4640      	mov	r0, r8
 800dbee:	4649      	mov	r1, r9
 800dbf0:	f7f2 ff74 	bl	8000adc <__aeabi_dcmplt>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	f43f af35 	beq.w	800da64 <_dtoa_r+0x464>
 800dbfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbfc:	1e6b      	subs	r3, r5, #1
 800dbfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc04:	2b30      	cmp	r3, #48	; 0x30
 800dc06:	d0f8      	beq.n	800dbfa <_dtoa_r+0x5fa>
 800dc08:	9700      	str	r7, [sp, #0]
 800dc0a:	e049      	b.n	800dca0 <_dtoa_r+0x6a0>
 800dc0c:	4b05      	ldr	r3, [pc, #20]	; (800dc24 <_dtoa_r+0x624>)
 800dc0e:	f7f2 fcf3 	bl	80005f8 <__aeabi_dmul>
 800dc12:	4680      	mov	r8, r0
 800dc14:	4689      	mov	r9, r1
 800dc16:	e7bd      	b.n	800db94 <_dtoa_r+0x594>
 800dc18:	08010d18 	.word	0x08010d18
 800dc1c:	08010cf0 	.word	0x08010cf0
 800dc20:	3ff00000 	.word	0x3ff00000
 800dc24:	40240000 	.word	0x40240000
 800dc28:	401c0000 	.word	0x401c0000
 800dc2c:	40140000 	.word	0x40140000
 800dc30:	3fe00000 	.word	0x3fe00000
 800dc34:	9d01      	ldr	r5, [sp, #4]
 800dc36:	4656      	mov	r6, sl
 800dc38:	465f      	mov	r7, fp
 800dc3a:	4642      	mov	r2, r8
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	4630      	mov	r0, r6
 800dc40:	4639      	mov	r1, r7
 800dc42:	f7f2 fe03 	bl	800084c <__aeabi_ddiv>
 800dc46:	f7f2 ff87 	bl	8000b58 <__aeabi_d2iz>
 800dc4a:	4682      	mov	sl, r0
 800dc4c:	f7f2 fc6a 	bl	8000524 <__aeabi_i2d>
 800dc50:	4642      	mov	r2, r8
 800dc52:	464b      	mov	r3, r9
 800dc54:	f7f2 fcd0 	bl	80005f8 <__aeabi_dmul>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	4639      	mov	r1, r7
 800dc60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc64:	f7f2 fb10 	bl	8000288 <__aeabi_dsub>
 800dc68:	f805 6b01 	strb.w	r6, [r5], #1
 800dc6c:	9e01      	ldr	r6, [sp, #4]
 800dc6e:	9f03      	ldr	r7, [sp, #12]
 800dc70:	1bae      	subs	r6, r5, r6
 800dc72:	42b7      	cmp	r7, r6
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	d135      	bne.n	800dce6 <_dtoa_r+0x6e6>
 800dc7a:	f7f2 fb07 	bl	800028c <__adddf3>
 800dc7e:	4642      	mov	r2, r8
 800dc80:	464b      	mov	r3, r9
 800dc82:	4606      	mov	r6, r0
 800dc84:	460f      	mov	r7, r1
 800dc86:	f7f2 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 800dc8a:	b9d0      	cbnz	r0, 800dcc2 <_dtoa_r+0x6c2>
 800dc8c:	4642      	mov	r2, r8
 800dc8e:	464b      	mov	r3, r9
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc98:	b110      	cbz	r0, 800dca0 <_dtoa_r+0x6a0>
 800dc9a:	f01a 0f01 	tst.w	sl, #1
 800dc9e:	d110      	bne.n	800dcc2 <_dtoa_r+0x6c2>
 800dca0:	4620      	mov	r0, r4
 800dca2:	ee18 1a10 	vmov	r1, s16
 800dca6:	f000 fc2b 	bl	800e500 <_Bfree>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	9800      	ldr	r0, [sp, #0]
 800dcae:	702b      	strb	r3, [r5, #0]
 800dcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	6018      	str	r0, [r3, #0]
 800dcb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f43f acf1 	beq.w	800d6a0 <_dtoa_r+0xa0>
 800dcbe:	601d      	str	r5, [r3, #0]
 800dcc0:	e4ee      	b.n	800d6a0 <_dtoa_r+0xa0>
 800dcc2:	9f00      	ldr	r7, [sp, #0]
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	461d      	mov	r5, r3
 800dcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dccc:	2a39      	cmp	r2, #57	; 0x39
 800dcce:	d106      	bne.n	800dcde <_dtoa_r+0x6de>
 800dcd0:	9a01      	ldr	r2, [sp, #4]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d1f7      	bne.n	800dcc6 <_dtoa_r+0x6c6>
 800dcd6:	9901      	ldr	r1, [sp, #4]
 800dcd8:	2230      	movs	r2, #48	; 0x30
 800dcda:	3701      	adds	r7, #1
 800dcdc:	700a      	strb	r2, [r1, #0]
 800dcde:	781a      	ldrb	r2, [r3, #0]
 800dce0:	3201      	adds	r2, #1
 800dce2:	701a      	strb	r2, [r3, #0]
 800dce4:	e790      	b.n	800dc08 <_dtoa_r+0x608>
 800dce6:	4ba6      	ldr	r3, [pc, #664]	; (800df80 <_dtoa_r+0x980>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	f7f2 fc85 	bl	80005f8 <__aeabi_dmul>
 800dcee:	2200      	movs	r2, #0
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	f7f2 fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d09d      	beq.n	800dc3a <_dtoa_r+0x63a>
 800dcfe:	e7cf      	b.n	800dca0 <_dtoa_r+0x6a0>
 800dd00:	9a08      	ldr	r2, [sp, #32]
 800dd02:	2a00      	cmp	r2, #0
 800dd04:	f000 80d7 	beq.w	800deb6 <_dtoa_r+0x8b6>
 800dd08:	9a06      	ldr	r2, [sp, #24]
 800dd0a:	2a01      	cmp	r2, #1
 800dd0c:	f300 80ba 	bgt.w	800de84 <_dtoa_r+0x884>
 800dd10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd12:	2a00      	cmp	r2, #0
 800dd14:	f000 80b2 	beq.w	800de7c <_dtoa_r+0x87c>
 800dd18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd1c:	9e07      	ldr	r6, [sp, #28]
 800dd1e:	9d04      	ldr	r5, [sp, #16]
 800dd20:	9a04      	ldr	r2, [sp, #16]
 800dd22:	441a      	add	r2, r3
 800dd24:	9204      	str	r2, [sp, #16]
 800dd26:	9a05      	ldr	r2, [sp, #20]
 800dd28:	2101      	movs	r1, #1
 800dd2a:	441a      	add	r2, r3
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	9205      	str	r2, [sp, #20]
 800dd30:	f000 fc9e 	bl	800e670 <__i2b>
 800dd34:	4607      	mov	r7, r0
 800dd36:	2d00      	cmp	r5, #0
 800dd38:	dd0c      	ble.n	800dd54 <_dtoa_r+0x754>
 800dd3a:	9b05      	ldr	r3, [sp, #20]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	dd09      	ble.n	800dd54 <_dtoa_r+0x754>
 800dd40:	42ab      	cmp	r3, r5
 800dd42:	9a04      	ldr	r2, [sp, #16]
 800dd44:	bfa8      	it	ge
 800dd46:	462b      	movge	r3, r5
 800dd48:	1ad2      	subs	r2, r2, r3
 800dd4a:	9204      	str	r2, [sp, #16]
 800dd4c:	9a05      	ldr	r2, [sp, #20]
 800dd4e:	1aed      	subs	r5, r5, r3
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	9305      	str	r3, [sp, #20]
 800dd54:	9b07      	ldr	r3, [sp, #28]
 800dd56:	b31b      	cbz	r3, 800dda0 <_dtoa_r+0x7a0>
 800dd58:	9b08      	ldr	r3, [sp, #32]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f000 80af 	beq.w	800debe <_dtoa_r+0x8be>
 800dd60:	2e00      	cmp	r6, #0
 800dd62:	dd13      	ble.n	800dd8c <_dtoa_r+0x78c>
 800dd64:	4639      	mov	r1, r7
 800dd66:	4632      	mov	r2, r6
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f000 fd41 	bl	800e7f0 <__pow5mult>
 800dd6e:	ee18 2a10 	vmov	r2, s16
 800dd72:	4601      	mov	r1, r0
 800dd74:	4607      	mov	r7, r0
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 fc90 	bl	800e69c <__multiply>
 800dd7c:	ee18 1a10 	vmov	r1, s16
 800dd80:	4680      	mov	r8, r0
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 fbbc 	bl	800e500 <_Bfree>
 800dd88:	ee08 8a10 	vmov	s16, r8
 800dd8c:	9b07      	ldr	r3, [sp, #28]
 800dd8e:	1b9a      	subs	r2, r3, r6
 800dd90:	d006      	beq.n	800dda0 <_dtoa_r+0x7a0>
 800dd92:	ee18 1a10 	vmov	r1, s16
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 fd2a 	bl	800e7f0 <__pow5mult>
 800dd9c:	ee08 0a10 	vmov	s16, r0
 800dda0:	2101      	movs	r1, #1
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 fc64 	bl	800e670 <__i2b>
 800dda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	4606      	mov	r6, r0
 800ddae:	f340 8088 	ble.w	800dec2 <_dtoa_r+0x8c2>
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 fd1a 	bl	800e7f0 <__pow5mult>
 800ddbc:	9b06      	ldr	r3, [sp, #24]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	4606      	mov	r6, r0
 800ddc2:	f340 8081 	ble.w	800dec8 <_dtoa_r+0x8c8>
 800ddc6:	f04f 0800 	mov.w	r8, #0
 800ddca:	6933      	ldr	r3, [r6, #16]
 800ddcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ddd0:	6918      	ldr	r0, [r3, #16]
 800ddd2:	f000 fbfd 	bl	800e5d0 <__hi0bits>
 800ddd6:	f1c0 0020 	rsb	r0, r0, #32
 800ddda:	9b05      	ldr	r3, [sp, #20]
 800dddc:	4418      	add	r0, r3
 800ddde:	f010 001f 	ands.w	r0, r0, #31
 800dde2:	f000 8092 	beq.w	800df0a <_dtoa_r+0x90a>
 800dde6:	f1c0 0320 	rsb	r3, r0, #32
 800ddea:	2b04      	cmp	r3, #4
 800ddec:	f340 808a 	ble.w	800df04 <_dtoa_r+0x904>
 800ddf0:	f1c0 001c 	rsb	r0, r0, #28
 800ddf4:	9b04      	ldr	r3, [sp, #16]
 800ddf6:	4403      	add	r3, r0
 800ddf8:	9304      	str	r3, [sp, #16]
 800ddfa:	9b05      	ldr	r3, [sp, #20]
 800ddfc:	4403      	add	r3, r0
 800ddfe:	4405      	add	r5, r0
 800de00:	9305      	str	r3, [sp, #20]
 800de02:	9b04      	ldr	r3, [sp, #16]
 800de04:	2b00      	cmp	r3, #0
 800de06:	dd07      	ble.n	800de18 <_dtoa_r+0x818>
 800de08:	ee18 1a10 	vmov	r1, s16
 800de0c:	461a      	mov	r2, r3
 800de0e:	4620      	mov	r0, r4
 800de10:	f000 fd48 	bl	800e8a4 <__lshift>
 800de14:	ee08 0a10 	vmov	s16, r0
 800de18:	9b05      	ldr	r3, [sp, #20]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	dd05      	ble.n	800de2a <_dtoa_r+0x82a>
 800de1e:	4631      	mov	r1, r6
 800de20:	461a      	mov	r2, r3
 800de22:	4620      	mov	r0, r4
 800de24:	f000 fd3e 	bl	800e8a4 <__lshift>
 800de28:	4606      	mov	r6, r0
 800de2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d06e      	beq.n	800df0e <_dtoa_r+0x90e>
 800de30:	ee18 0a10 	vmov	r0, s16
 800de34:	4631      	mov	r1, r6
 800de36:	f000 fda5 	bl	800e984 <__mcmp>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	da67      	bge.n	800df0e <_dtoa_r+0x90e>
 800de3e:	9b00      	ldr	r3, [sp, #0]
 800de40:	3b01      	subs	r3, #1
 800de42:	ee18 1a10 	vmov	r1, s16
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	220a      	movs	r2, #10
 800de4a:	2300      	movs	r3, #0
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 fb79 	bl	800e544 <__multadd>
 800de52:	9b08      	ldr	r3, [sp, #32]
 800de54:	ee08 0a10 	vmov	s16, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 81b1 	beq.w	800e1c0 <_dtoa_r+0xbc0>
 800de5e:	2300      	movs	r3, #0
 800de60:	4639      	mov	r1, r7
 800de62:	220a      	movs	r2, #10
 800de64:	4620      	mov	r0, r4
 800de66:	f000 fb6d 	bl	800e544 <__multadd>
 800de6a:	9b02      	ldr	r3, [sp, #8]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	4607      	mov	r7, r0
 800de70:	f300 808e 	bgt.w	800df90 <_dtoa_r+0x990>
 800de74:	9b06      	ldr	r3, [sp, #24]
 800de76:	2b02      	cmp	r3, #2
 800de78:	dc51      	bgt.n	800df1e <_dtoa_r+0x91e>
 800de7a:	e089      	b.n	800df90 <_dtoa_r+0x990>
 800de7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de82:	e74b      	b.n	800dd1c <_dtoa_r+0x71c>
 800de84:	9b03      	ldr	r3, [sp, #12]
 800de86:	1e5e      	subs	r6, r3, #1
 800de88:	9b07      	ldr	r3, [sp, #28]
 800de8a:	42b3      	cmp	r3, r6
 800de8c:	bfbf      	itttt	lt
 800de8e:	9b07      	ldrlt	r3, [sp, #28]
 800de90:	9607      	strlt	r6, [sp, #28]
 800de92:	1af2      	sublt	r2, r6, r3
 800de94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de96:	bfb6      	itet	lt
 800de98:	189b      	addlt	r3, r3, r2
 800de9a:	1b9e      	subge	r6, r3, r6
 800de9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800de9e:	9b03      	ldr	r3, [sp, #12]
 800dea0:	bfb8      	it	lt
 800dea2:	2600      	movlt	r6, #0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	bfb7      	itett	lt
 800dea8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800deac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800deb0:	1a9d      	sublt	r5, r3, r2
 800deb2:	2300      	movlt	r3, #0
 800deb4:	e734      	b.n	800dd20 <_dtoa_r+0x720>
 800deb6:	9e07      	ldr	r6, [sp, #28]
 800deb8:	9d04      	ldr	r5, [sp, #16]
 800deba:	9f08      	ldr	r7, [sp, #32]
 800debc:	e73b      	b.n	800dd36 <_dtoa_r+0x736>
 800debe:	9a07      	ldr	r2, [sp, #28]
 800dec0:	e767      	b.n	800dd92 <_dtoa_r+0x792>
 800dec2:	9b06      	ldr	r3, [sp, #24]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	dc18      	bgt.n	800defa <_dtoa_r+0x8fa>
 800dec8:	f1ba 0f00 	cmp.w	sl, #0
 800decc:	d115      	bne.n	800defa <_dtoa_r+0x8fa>
 800dece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ded2:	b993      	cbnz	r3, 800defa <_dtoa_r+0x8fa>
 800ded4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ded8:	0d1b      	lsrs	r3, r3, #20
 800deda:	051b      	lsls	r3, r3, #20
 800dedc:	b183      	cbz	r3, 800df00 <_dtoa_r+0x900>
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	3301      	adds	r3, #1
 800dee2:	9304      	str	r3, [sp, #16]
 800dee4:	9b05      	ldr	r3, [sp, #20]
 800dee6:	3301      	adds	r3, #1
 800dee8:	9305      	str	r3, [sp, #20]
 800deea:	f04f 0801 	mov.w	r8, #1
 800deee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def0:	2b00      	cmp	r3, #0
 800def2:	f47f af6a 	bne.w	800ddca <_dtoa_r+0x7ca>
 800def6:	2001      	movs	r0, #1
 800def8:	e76f      	b.n	800ddda <_dtoa_r+0x7da>
 800defa:	f04f 0800 	mov.w	r8, #0
 800defe:	e7f6      	b.n	800deee <_dtoa_r+0x8ee>
 800df00:	4698      	mov	r8, r3
 800df02:	e7f4      	b.n	800deee <_dtoa_r+0x8ee>
 800df04:	f43f af7d 	beq.w	800de02 <_dtoa_r+0x802>
 800df08:	4618      	mov	r0, r3
 800df0a:	301c      	adds	r0, #28
 800df0c:	e772      	b.n	800ddf4 <_dtoa_r+0x7f4>
 800df0e:	9b03      	ldr	r3, [sp, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	dc37      	bgt.n	800df84 <_dtoa_r+0x984>
 800df14:	9b06      	ldr	r3, [sp, #24]
 800df16:	2b02      	cmp	r3, #2
 800df18:	dd34      	ble.n	800df84 <_dtoa_r+0x984>
 800df1a:	9b03      	ldr	r3, [sp, #12]
 800df1c:	9302      	str	r3, [sp, #8]
 800df1e:	9b02      	ldr	r3, [sp, #8]
 800df20:	b96b      	cbnz	r3, 800df3e <_dtoa_r+0x93e>
 800df22:	4631      	mov	r1, r6
 800df24:	2205      	movs	r2, #5
 800df26:	4620      	mov	r0, r4
 800df28:	f000 fb0c 	bl	800e544 <__multadd>
 800df2c:	4601      	mov	r1, r0
 800df2e:	4606      	mov	r6, r0
 800df30:	ee18 0a10 	vmov	r0, s16
 800df34:	f000 fd26 	bl	800e984 <__mcmp>
 800df38:	2800      	cmp	r0, #0
 800df3a:	f73f adbb 	bgt.w	800dab4 <_dtoa_r+0x4b4>
 800df3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df40:	9d01      	ldr	r5, [sp, #4]
 800df42:	43db      	mvns	r3, r3
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	f04f 0800 	mov.w	r8, #0
 800df4a:	4631      	mov	r1, r6
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 fad7 	bl	800e500 <_Bfree>
 800df52:	2f00      	cmp	r7, #0
 800df54:	f43f aea4 	beq.w	800dca0 <_dtoa_r+0x6a0>
 800df58:	f1b8 0f00 	cmp.w	r8, #0
 800df5c:	d005      	beq.n	800df6a <_dtoa_r+0x96a>
 800df5e:	45b8      	cmp	r8, r7
 800df60:	d003      	beq.n	800df6a <_dtoa_r+0x96a>
 800df62:	4641      	mov	r1, r8
 800df64:	4620      	mov	r0, r4
 800df66:	f000 facb 	bl	800e500 <_Bfree>
 800df6a:	4639      	mov	r1, r7
 800df6c:	4620      	mov	r0, r4
 800df6e:	f000 fac7 	bl	800e500 <_Bfree>
 800df72:	e695      	b.n	800dca0 <_dtoa_r+0x6a0>
 800df74:	2600      	movs	r6, #0
 800df76:	4637      	mov	r7, r6
 800df78:	e7e1      	b.n	800df3e <_dtoa_r+0x93e>
 800df7a:	9700      	str	r7, [sp, #0]
 800df7c:	4637      	mov	r7, r6
 800df7e:	e599      	b.n	800dab4 <_dtoa_r+0x4b4>
 800df80:	40240000 	.word	0x40240000
 800df84:	9b08      	ldr	r3, [sp, #32]
 800df86:	2b00      	cmp	r3, #0
 800df88:	f000 80ca 	beq.w	800e120 <_dtoa_r+0xb20>
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	9302      	str	r3, [sp, #8]
 800df90:	2d00      	cmp	r5, #0
 800df92:	dd05      	ble.n	800dfa0 <_dtoa_r+0x9a0>
 800df94:	4639      	mov	r1, r7
 800df96:	462a      	mov	r2, r5
 800df98:	4620      	mov	r0, r4
 800df9a:	f000 fc83 	bl	800e8a4 <__lshift>
 800df9e:	4607      	mov	r7, r0
 800dfa0:	f1b8 0f00 	cmp.w	r8, #0
 800dfa4:	d05b      	beq.n	800e05e <_dtoa_r+0xa5e>
 800dfa6:	6879      	ldr	r1, [r7, #4]
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 fa69 	bl	800e480 <_Balloc>
 800dfae:	4605      	mov	r5, r0
 800dfb0:	b928      	cbnz	r0, 800dfbe <_dtoa_r+0x9be>
 800dfb2:	4b87      	ldr	r3, [pc, #540]	; (800e1d0 <_dtoa_r+0xbd0>)
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dfba:	f7ff bb3b 	b.w	800d634 <_dtoa_r+0x34>
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	3202      	adds	r2, #2
 800dfc2:	0092      	lsls	r2, r2, #2
 800dfc4:	f107 010c 	add.w	r1, r7, #12
 800dfc8:	300c      	adds	r0, #12
 800dfca:	f7fe fb4a 	bl	800c662 <memcpy>
 800dfce:	2201      	movs	r2, #1
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f000 fc66 	bl	800e8a4 <__lshift>
 800dfd8:	9b01      	ldr	r3, [sp, #4]
 800dfda:	f103 0901 	add.w	r9, r3, #1
 800dfde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	9305      	str	r3, [sp, #20]
 800dfe6:	f00a 0301 	and.w	r3, sl, #1
 800dfea:	46b8      	mov	r8, r7
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	4607      	mov	r7, r0
 800dff0:	4631      	mov	r1, r6
 800dff2:	ee18 0a10 	vmov	r0, s16
 800dff6:	f7ff fa77 	bl	800d4e8 <quorem>
 800dffa:	4641      	mov	r1, r8
 800dffc:	9002      	str	r0, [sp, #8]
 800dffe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e002:	ee18 0a10 	vmov	r0, s16
 800e006:	f000 fcbd 	bl	800e984 <__mcmp>
 800e00a:	463a      	mov	r2, r7
 800e00c:	9003      	str	r0, [sp, #12]
 800e00e:	4631      	mov	r1, r6
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fcd3 	bl	800e9bc <__mdiff>
 800e016:	68c2      	ldr	r2, [r0, #12]
 800e018:	f109 3bff 	add.w	fp, r9, #4294967295
 800e01c:	4605      	mov	r5, r0
 800e01e:	bb02      	cbnz	r2, 800e062 <_dtoa_r+0xa62>
 800e020:	4601      	mov	r1, r0
 800e022:	ee18 0a10 	vmov	r0, s16
 800e026:	f000 fcad 	bl	800e984 <__mcmp>
 800e02a:	4602      	mov	r2, r0
 800e02c:	4629      	mov	r1, r5
 800e02e:	4620      	mov	r0, r4
 800e030:	9207      	str	r2, [sp, #28]
 800e032:	f000 fa65 	bl	800e500 <_Bfree>
 800e036:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e03a:	ea43 0102 	orr.w	r1, r3, r2
 800e03e:	9b04      	ldr	r3, [sp, #16]
 800e040:	430b      	orrs	r3, r1
 800e042:	464d      	mov	r5, r9
 800e044:	d10f      	bne.n	800e066 <_dtoa_r+0xa66>
 800e046:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e04a:	d02a      	beq.n	800e0a2 <_dtoa_r+0xaa2>
 800e04c:	9b03      	ldr	r3, [sp, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	dd02      	ble.n	800e058 <_dtoa_r+0xa58>
 800e052:	9b02      	ldr	r3, [sp, #8]
 800e054:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e058:	f88b a000 	strb.w	sl, [fp]
 800e05c:	e775      	b.n	800df4a <_dtoa_r+0x94a>
 800e05e:	4638      	mov	r0, r7
 800e060:	e7ba      	b.n	800dfd8 <_dtoa_r+0x9d8>
 800e062:	2201      	movs	r2, #1
 800e064:	e7e2      	b.n	800e02c <_dtoa_r+0xa2c>
 800e066:	9b03      	ldr	r3, [sp, #12]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	db04      	blt.n	800e076 <_dtoa_r+0xa76>
 800e06c:	9906      	ldr	r1, [sp, #24]
 800e06e:	430b      	orrs	r3, r1
 800e070:	9904      	ldr	r1, [sp, #16]
 800e072:	430b      	orrs	r3, r1
 800e074:	d122      	bne.n	800e0bc <_dtoa_r+0xabc>
 800e076:	2a00      	cmp	r2, #0
 800e078:	ddee      	ble.n	800e058 <_dtoa_r+0xa58>
 800e07a:	ee18 1a10 	vmov	r1, s16
 800e07e:	2201      	movs	r2, #1
 800e080:	4620      	mov	r0, r4
 800e082:	f000 fc0f 	bl	800e8a4 <__lshift>
 800e086:	4631      	mov	r1, r6
 800e088:	ee08 0a10 	vmov	s16, r0
 800e08c:	f000 fc7a 	bl	800e984 <__mcmp>
 800e090:	2800      	cmp	r0, #0
 800e092:	dc03      	bgt.n	800e09c <_dtoa_r+0xa9c>
 800e094:	d1e0      	bne.n	800e058 <_dtoa_r+0xa58>
 800e096:	f01a 0f01 	tst.w	sl, #1
 800e09a:	d0dd      	beq.n	800e058 <_dtoa_r+0xa58>
 800e09c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0a0:	d1d7      	bne.n	800e052 <_dtoa_r+0xa52>
 800e0a2:	2339      	movs	r3, #57	; 0x39
 800e0a4:	f88b 3000 	strb.w	r3, [fp]
 800e0a8:	462b      	mov	r3, r5
 800e0aa:	461d      	mov	r5, r3
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0b2:	2a39      	cmp	r2, #57	; 0x39
 800e0b4:	d071      	beq.n	800e19a <_dtoa_r+0xb9a>
 800e0b6:	3201      	adds	r2, #1
 800e0b8:	701a      	strb	r2, [r3, #0]
 800e0ba:	e746      	b.n	800df4a <_dtoa_r+0x94a>
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	dd07      	ble.n	800e0d0 <_dtoa_r+0xad0>
 800e0c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0c4:	d0ed      	beq.n	800e0a2 <_dtoa_r+0xaa2>
 800e0c6:	f10a 0301 	add.w	r3, sl, #1
 800e0ca:	f88b 3000 	strb.w	r3, [fp]
 800e0ce:	e73c      	b.n	800df4a <_dtoa_r+0x94a>
 800e0d0:	9b05      	ldr	r3, [sp, #20]
 800e0d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e0d6:	4599      	cmp	r9, r3
 800e0d8:	d047      	beq.n	800e16a <_dtoa_r+0xb6a>
 800e0da:	ee18 1a10 	vmov	r1, s16
 800e0de:	2300      	movs	r3, #0
 800e0e0:	220a      	movs	r2, #10
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f000 fa2e 	bl	800e544 <__multadd>
 800e0e8:	45b8      	cmp	r8, r7
 800e0ea:	ee08 0a10 	vmov	s16, r0
 800e0ee:	f04f 0300 	mov.w	r3, #0
 800e0f2:	f04f 020a 	mov.w	r2, #10
 800e0f6:	4641      	mov	r1, r8
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	d106      	bne.n	800e10a <_dtoa_r+0xb0a>
 800e0fc:	f000 fa22 	bl	800e544 <__multadd>
 800e100:	4680      	mov	r8, r0
 800e102:	4607      	mov	r7, r0
 800e104:	f109 0901 	add.w	r9, r9, #1
 800e108:	e772      	b.n	800dff0 <_dtoa_r+0x9f0>
 800e10a:	f000 fa1b 	bl	800e544 <__multadd>
 800e10e:	4639      	mov	r1, r7
 800e110:	4680      	mov	r8, r0
 800e112:	2300      	movs	r3, #0
 800e114:	220a      	movs	r2, #10
 800e116:	4620      	mov	r0, r4
 800e118:	f000 fa14 	bl	800e544 <__multadd>
 800e11c:	4607      	mov	r7, r0
 800e11e:	e7f1      	b.n	800e104 <_dtoa_r+0xb04>
 800e120:	9b03      	ldr	r3, [sp, #12]
 800e122:	9302      	str	r3, [sp, #8]
 800e124:	9d01      	ldr	r5, [sp, #4]
 800e126:	ee18 0a10 	vmov	r0, s16
 800e12a:	4631      	mov	r1, r6
 800e12c:	f7ff f9dc 	bl	800d4e8 <quorem>
 800e130:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e134:	9b01      	ldr	r3, [sp, #4]
 800e136:	f805 ab01 	strb.w	sl, [r5], #1
 800e13a:	1aea      	subs	r2, r5, r3
 800e13c:	9b02      	ldr	r3, [sp, #8]
 800e13e:	4293      	cmp	r3, r2
 800e140:	dd09      	ble.n	800e156 <_dtoa_r+0xb56>
 800e142:	ee18 1a10 	vmov	r1, s16
 800e146:	2300      	movs	r3, #0
 800e148:	220a      	movs	r2, #10
 800e14a:	4620      	mov	r0, r4
 800e14c:	f000 f9fa 	bl	800e544 <__multadd>
 800e150:	ee08 0a10 	vmov	s16, r0
 800e154:	e7e7      	b.n	800e126 <_dtoa_r+0xb26>
 800e156:	9b02      	ldr	r3, [sp, #8]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	bfc8      	it	gt
 800e15c:	461d      	movgt	r5, r3
 800e15e:	9b01      	ldr	r3, [sp, #4]
 800e160:	bfd8      	it	le
 800e162:	2501      	movle	r5, #1
 800e164:	441d      	add	r5, r3
 800e166:	f04f 0800 	mov.w	r8, #0
 800e16a:	ee18 1a10 	vmov	r1, s16
 800e16e:	2201      	movs	r2, #1
 800e170:	4620      	mov	r0, r4
 800e172:	f000 fb97 	bl	800e8a4 <__lshift>
 800e176:	4631      	mov	r1, r6
 800e178:	ee08 0a10 	vmov	s16, r0
 800e17c:	f000 fc02 	bl	800e984 <__mcmp>
 800e180:	2800      	cmp	r0, #0
 800e182:	dc91      	bgt.n	800e0a8 <_dtoa_r+0xaa8>
 800e184:	d102      	bne.n	800e18c <_dtoa_r+0xb8c>
 800e186:	f01a 0f01 	tst.w	sl, #1
 800e18a:	d18d      	bne.n	800e0a8 <_dtoa_r+0xaa8>
 800e18c:	462b      	mov	r3, r5
 800e18e:	461d      	mov	r5, r3
 800e190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e194:	2a30      	cmp	r2, #48	; 0x30
 800e196:	d0fa      	beq.n	800e18e <_dtoa_r+0xb8e>
 800e198:	e6d7      	b.n	800df4a <_dtoa_r+0x94a>
 800e19a:	9a01      	ldr	r2, [sp, #4]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d184      	bne.n	800e0aa <_dtoa_r+0xaaa>
 800e1a0:	9b00      	ldr	r3, [sp, #0]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	2331      	movs	r3, #49	; 0x31
 800e1a8:	7013      	strb	r3, [r2, #0]
 800e1aa:	e6ce      	b.n	800df4a <_dtoa_r+0x94a>
 800e1ac:	4b09      	ldr	r3, [pc, #36]	; (800e1d4 <_dtoa_r+0xbd4>)
 800e1ae:	f7ff ba95 	b.w	800d6dc <_dtoa_r+0xdc>
 800e1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f47f aa6e 	bne.w	800d696 <_dtoa_r+0x96>
 800e1ba:	4b07      	ldr	r3, [pc, #28]	; (800e1d8 <_dtoa_r+0xbd8>)
 800e1bc:	f7ff ba8e 	b.w	800d6dc <_dtoa_r+0xdc>
 800e1c0:	9b02      	ldr	r3, [sp, #8]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	dcae      	bgt.n	800e124 <_dtoa_r+0xb24>
 800e1c6:	9b06      	ldr	r3, [sp, #24]
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	f73f aea8 	bgt.w	800df1e <_dtoa_r+0x91e>
 800e1ce:	e7a9      	b.n	800e124 <_dtoa_r+0xb24>
 800e1d0:	08010c83 	.word	0x08010c83
 800e1d4:	08010be0 	.word	0x08010be0
 800e1d8:	08010c04 	.word	0x08010c04

0800e1dc <__sflush_r>:
 800e1dc:	898a      	ldrh	r2, [r1, #12]
 800e1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	0710      	lsls	r0, r2, #28
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	d458      	bmi.n	800e29c <__sflush_r+0xc0>
 800e1ea:	684b      	ldr	r3, [r1, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dc05      	bgt.n	800e1fc <__sflush_r+0x20>
 800e1f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	dc02      	bgt.n	800e1fc <__sflush_r+0x20>
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1fe:	2e00      	cmp	r6, #0
 800e200:	d0f9      	beq.n	800e1f6 <__sflush_r+0x1a>
 800e202:	2300      	movs	r3, #0
 800e204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e208:	682f      	ldr	r7, [r5, #0]
 800e20a:	602b      	str	r3, [r5, #0]
 800e20c:	d032      	beq.n	800e274 <__sflush_r+0x98>
 800e20e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	075a      	lsls	r2, r3, #29
 800e214:	d505      	bpl.n	800e222 <__sflush_r+0x46>
 800e216:	6863      	ldr	r3, [r4, #4]
 800e218:	1ac0      	subs	r0, r0, r3
 800e21a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e21c:	b10b      	cbz	r3, 800e222 <__sflush_r+0x46>
 800e21e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e220:	1ac0      	subs	r0, r0, r3
 800e222:	2300      	movs	r3, #0
 800e224:	4602      	mov	r2, r0
 800e226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e228:	6a21      	ldr	r1, [r4, #32]
 800e22a:	4628      	mov	r0, r5
 800e22c:	47b0      	blx	r6
 800e22e:	1c43      	adds	r3, r0, #1
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	d106      	bne.n	800e242 <__sflush_r+0x66>
 800e234:	6829      	ldr	r1, [r5, #0]
 800e236:	291d      	cmp	r1, #29
 800e238:	d82c      	bhi.n	800e294 <__sflush_r+0xb8>
 800e23a:	4a2a      	ldr	r2, [pc, #168]	; (800e2e4 <__sflush_r+0x108>)
 800e23c:	40ca      	lsrs	r2, r1
 800e23e:	07d6      	lsls	r6, r2, #31
 800e240:	d528      	bpl.n	800e294 <__sflush_r+0xb8>
 800e242:	2200      	movs	r2, #0
 800e244:	6062      	str	r2, [r4, #4]
 800e246:	04d9      	lsls	r1, r3, #19
 800e248:	6922      	ldr	r2, [r4, #16]
 800e24a:	6022      	str	r2, [r4, #0]
 800e24c:	d504      	bpl.n	800e258 <__sflush_r+0x7c>
 800e24e:	1c42      	adds	r2, r0, #1
 800e250:	d101      	bne.n	800e256 <__sflush_r+0x7a>
 800e252:	682b      	ldr	r3, [r5, #0]
 800e254:	b903      	cbnz	r3, 800e258 <__sflush_r+0x7c>
 800e256:	6560      	str	r0, [r4, #84]	; 0x54
 800e258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e25a:	602f      	str	r7, [r5, #0]
 800e25c:	2900      	cmp	r1, #0
 800e25e:	d0ca      	beq.n	800e1f6 <__sflush_r+0x1a>
 800e260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e264:	4299      	cmp	r1, r3
 800e266:	d002      	beq.n	800e26e <__sflush_r+0x92>
 800e268:	4628      	mov	r0, r5
 800e26a:	f000 fca3 	bl	800ebb4 <_free_r>
 800e26e:	2000      	movs	r0, #0
 800e270:	6360      	str	r0, [r4, #52]	; 0x34
 800e272:	e7c1      	b.n	800e1f8 <__sflush_r+0x1c>
 800e274:	6a21      	ldr	r1, [r4, #32]
 800e276:	2301      	movs	r3, #1
 800e278:	4628      	mov	r0, r5
 800e27a:	47b0      	blx	r6
 800e27c:	1c41      	adds	r1, r0, #1
 800e27e:	d1c7      	bne.n	800e210 <__sflush_r+0x34>
 800e280:	682b      	ldr	r3, [r5, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d0c4      	beq.n	800e210 <__sflush_r+0x34>
 800e286:	2b1d      	cmp	r3, #29
 800e288:	d001      	beq.n	800e28e <__sflush_r+0xb2>
 800e28a:	2b16      	cmp	r3, #22
 800e28c:	d101      	bne.n	800e292 <__sflush_r+0xb6>
 800e28e:	602f      	str	r7, [r5, #0]
 800e290:	e7b1      	b.n	800e1f6 <__sflush_r+0x1a>
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e298:	81a3      	strh	r3, [r4, #12]
 800e29a:	e7ad      	b.n	800e1f8 <__sflush_r+0x1c>
 800e29c:	690f      	ldr	r7, [r1, #16]
 800e29e:	2f00      	cmp	r7, #0
 800e2a0:	d0a9      	beq.n	800e1f6 <__sflush_r+0x1a>
 800e2a2:	0793      	lsls	r3, r2, #30
 800e2a4:	680e      	ldr	r6, [r1, #0]
 800e2a6:	bf08      	it	eq
 800e2a8:	694b      	ldreq	r3, [r1, #20]
 800e2aa:	600f      	str	r7, [r1, #0]
 800e2ac:	bf18      	it	ne
 800e2ae:	2300      	movne	r3, #0
 800e2b0:	eba6 0807 	sub.w	r8, r6, r7
 800e2b4:	608b      	str	r3, [r1, #8]
 800e2b6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ba:	dd9c      	ble.n	800e1f6 <__sflush_r+0x1a>
 800e2bc:	6a21      	ldr	r1, [r4, #32]
 800e2be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2c0:	4643      	mov	r3, r8
 800e2c2:	463a      	mov	r2, r7
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	47b0      	blx	r6
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	dc06      	bgt.n	800e2da <__sflush_r+0xfe>
 800e2cc:	89a3      	ldrh	r3, [r4, #12]
 800e2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d2:	81a3      	strh	r3, [r4, #12]
 800e2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d8:	e78e      	b.n	800e1f8 <__sflush_r+0x1c>
 800e2da:	4407      	add	r7, r0
 800e2dc:	eba8 0800 	sub.w	r8, r8, r0
 800e2e0:	e7e9      	b.n	800e2b6 <__sflush_r+0xda>
 800e2e2:	bf00      	nop
 800e2e4:	20400001 	.word	0x20400001

0800e2e8 <_fflush_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	690b      	ldr	r3, [r1, #16]
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	b913      	cbnz	r3, 800e2f8 <_fflush_r+0x10>
 800e2f2:	2500      	movs	r5, #0
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	b118      	cbz	r0, 800e302 <_fflush_r+0x1a>
 800e2fa:	6983      	ldr	r3, [r0, #24]
 800e2fc:	b90b      	cbnz	r3, 800e302 <_fflush_r+0x1a>
 800e2fe:	f7fe f8eb 	bl	800c4d8 <__sinit>
 800e302:	4b14      	ldr	r3, [pc, #80]	; (800e354 <_fflush_r+0x6c>)
 800e304:	429c      	cmp	r4, r3
 800e306:	d11b      	bne.n	800e340 <_fflush_r+0x58>
 800e308:	686c      	ldr	r4, [r5, #4]
 800e30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0ef      	beq.n	800e2f2 <_fflush_r+0xa>
 800e312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e314:	07d0      	lsls	r0, r2, #31
 800e316:	d404      	bmi.n	800e322 <_fflush_r+0x3a>
 800e318:	0599      	lsls	r1, r3, #22
 800e31a:	d402      	bmi.n	800e322 <_fflush_r+0x3a>
 800e31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e31e:	f7fe f99e 	bl	800c65e <__retarget_lock_acquire_recursive>
 800e322:	4628      	mov	r0, r5
 800e324:	4621      	mov	r1, r4
 800e326:	f7ff ff59 	bl	800e1dc <__sflush_r>
 800e32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e32c:	07da      	lsls	r2, r3, #31
 800e32e:	4605      	mov	r5, r0
 800e330:	d4e0      	bmi.n	800e2f4 <_fflush_r+0xc>
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	059b      	lsls	r3, r3, #22
 800e336:	d4dd      	bmi.n	800e2f4 <_fflush_r+0xc>
 800e338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e33a:	f7fe f991 	bl	800c660 <__retarget_lock_release_recursive>
 800e33e:	e7d9      	b.n	800e2f4 <_fflush_r+0xc>
 800e340:	4b05      	ldr	r3, [pc, #20]	; (800e358 <_fflush_r+0x70>)
 800e342:	429c      	cmp	r4, r3
 800e344:	d101      	bne.n	800e34a <_fflush_r+0x62>
 800e346:	68ac      	ldr	r4, [r5, #8]
 800e348:	e7df      	b.n	800e30a <_fflush_r+0x22>
 800e34a:	4b04      	ldr	r3, [pc, #16]	; (800e35c <_fflush_r+0x74>)
 800e34c:	429c      	cmp	r4, r3
 800e34e:	bf08      	it	eq
 800e350:	68ec      	ldreq	r4, [r5, #12]
 800e352:	e7da      	b.n	800e30a <_fflush_r+0x22>
 800e354:	08010b8c 	.word	0x08010b8c
 800e358:	08010bac 	.word	0x08010bac
 800e35c:	08010b6c 	.word	0x08010b6c

0800e360 <_localeconv_r>:
 800e360:	4800      	ldr	r0, [pc, #0]	; (800e364 <_localeconv_r+0x4>)
 800e362:	4770      	bx	lr
 800e364:	200001d0 	.word	0x200001d0

0800e368 <_lseek_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4d07      	ldr	r5, [pc, #28]	; (800e388 <_lseek_r+0x20>)
 800e36c:	4604      	mov	r4, r0
 800e36e:	4608      	mov	r0, r1
 800e370:	4611      	mov	r1, r2
 800e372:	2200      	movs	r2, #0
 800e374:	602a      	str	r2, [r5, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	f7f4 fe1e 	bl	8002fb8 <_lseek>
 800e37c:	1c43      	adds	r3, r0, #1
 800e37e:	d102      	bne.n	800e386 <_lseek_r+0x1e>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	b103      	cbz	r3, 800e386 <_lseek_r+0x1e>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	bd38      	pop	{r3, r4, r5, pc}
 800e388:	200054f0 	.word	0x200054f0

0800e38c <__swhatbuf_r>:
 800e38c:	b570      	push	{r4, r5, r6, lr}
 800e38e:	460e      	mov	r6, r1
 800e390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e394:	2900      	cmp	r1, #0
 800e396:	b096      	sub	sp, #88	; 0x58
 800e398:	4614      	mov	r4, r2
 800e39a:	461d      	mov	r5, r3
 800e39c:	da08      	bge.n	800e3b0 <__swhatbuf_r+0x24>
 800e39e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	602a      	str	r2, [r5, #0]
 800e3a6:	061a      	lsls	r2, r3, #24
 800e3a8:	d410      	bmi.n	800e3cc <__swhatbuf_r+0x40>
 800e3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ae:	e00e      	b.n	800e3ce <__swhatbuf_r+0x42>
 800e3b0:	466a      	mov	r2, sp
 800e3b2:	f000 fde7 	bl	800ef84 <_fstat_r>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	dbf1      	blt.n	800e39e <__swhatbuf_r+0x12>
 800e3ba:	9a01      	ldr	r2, [sp, #4]
 800e3bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3c4:	425a      	negs	r2, r3
 800e3c6:	415a      	adcs	r2, r3
 800e3c8:	602a      	str	r2, [r5, #0]
 800e3ca:	e7ee      	b.n	800e3aa <__swhatbuf_r+0x1e>
 800e3cc:	2340      	movs	r3, #64	; 0x40
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	b016      	add	sp, #88	; 0x58
 800e3d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3d8 <__smakebuf_r>:
 800e3d8:	898b      	ldrh	r3, [r1, #12]
 800e3da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3dc:	079d      	lsls	r5, r3, #30
 800e3de:	4606      	mov	r6, r0
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	d507      	bpl.n	800e3f4 <__smakebuf_r+0x1c>
 800e3e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	6123      	str	r3, [r4, #16]
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	6163      	str	r3, [r4, #20]
 800e3f0:	b002      	add	sp, #8
 800e3f2:	bd70      	pop	{r4, r5, r6, pc}
 800e3f4:	ab01      	add	r3, sp, #4
 800e3f6:	466a      	mov	r2, sp
 800e3f8:	f7ff ffc8 	bl	800e38c <__swhatbuf_r>
 800e3fc:	9900      	ldr	r1, [sp, #0]
 800e3fe:	4605      	mov	r5, r0
 800e400:	4630      	mov	r0, r6
 800e402:	f7fe f965 	bl	800c6d0 <_malloc_r>
 800e406:	b948      	cbnz	r0, 800e41c <__smakebuf_r+0x44>
 800e408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40c:	059a      	lsls	r2, r3, #22
 800e40e:	d4ef      	bmi.n	800e3f0 <__smakebuf_r+0x18>
 800e410:	f023 0303 	bic.w	r3, r3, #3
 800e414:	f043 0302 	orr.w	r3, r3, #2
 800e418:	81a3      	strh	r3, [r4, #12]
 800e41a:	e7e3      	b.n	800e3e4 <__smakebuf_r+0xc>
 800e41c:	4b0d      	ldr	r3, [pc, #52]	; (800e454 <__smakebuf_r+0x7c>)
 800e41e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	6020      	str	r0, [r4, #0]
 800e424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e428:	81a3      	strh	r3, [r4, #12]
 800e42a:	9b00      	ldr	r3, [sp, #0]
 800e42c:	6163      	str	r3, [r4, #20]
 800e42e:	9b01      	ldr	r3, [sp, #4]
 800e430:	6120      	str	r0, [r4, #16]
 800e432:	b15b      	cbz	r3, 800e44c <__smakebuf_r+0x74>
 800e434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e438:	4630      	mov	r0, r6
 800e43a:	f000 fdb5 	bl	800efa8 <_isatty_r>
 800e43e:	b128      	cbz	r0, 800e44c <__smakebuf_r+0x74>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	f023 0303 	bic.w	r3, r3, #3
 800e446:	f043 0301 	orr.w	r3, r3, #1
 800e44a:	81a3      	strh	r3, [r4, #12]
 800e44c:	89a0      	ldrh	r0, [r4, #12]
 800e44e:	4305      	orrs	r5, r0
 800e450:	81a5      	strh	r5, [r4, #12]
 800e452:	e7cd      	b.n	800e3f0 <__smakebuf_r+0x18>
 800e454:	0800c471 	.word	0x0800c471

0800e458 <malloc>:
 800e458:	4b02      	ldr	r3, [pc, #8]	; (800e464 <malloc+0xc>)
 800e45a:	4601      	mov	r1, r0
 800e45c:	6818      	ldr	r0, [r3, #0]
 800e45e:	f7fe b937 	b.w	800c6d0 <_malloc_r>
 800e462:	bf00      	nop
 800e464:	2000007c 	.word	0x2000007c

0800e468 <__malloc_lock>:
 800e468:	4801      	ldr	r0, [pc, #4]	; (800e470 <__malloc_lock+0x8>)
 800e46a:	f7fe b8f8 	b.w	800c65e <__retarget_lock_acquire_recursive>
 800e46e:	bf00      	nop
 800e470:	200054e4 	.word	0x200054e4

0800e474 <__malloc_unlock>:
 800e474:	4801      	ldr	r0, [pc, #4]	; (800e47c <__malloc_unlock+0x8>)
 800e476:	f7fe b8f3 	b.w	800c660 <__retarget_lock_release_recursive>
 800e47a:	bf00      	nop
 800e47c:	200054e4 	.word	0x200054e4

0800e480 <_Balloc>:
 800e480:	b570      	push	{r4, r5, r6, lr}
 800e482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e484:	4604      	mov	r4, r0
 800e486:	460d      	mov	r5, r1
 800e488:	b976      	cbnz	r6, 800e4a8 <_Balloc+0x28>
 800e48a:	2010      	movs	r0, #16
 800e48c:	f7ff ffe4 	bl	800e458 <malloc>
 800e490:	4602      	mov	r2, r0
 800e492:	6260      	str	r0, [r4, #36]	; 0x24
 800e494:	b920      	cbnz	r0, 800e4a0 <_Balloc+0x20>
 800e496:	4b18      	ldr	r3, [pc, #96]	; (800e4f8 <_Balloc+0x78>)
 800e498:	4818      	ldr	r0, [pc, #96]	; (800e4fc <_Balloc+0x7c>)
 800e49a:	2166      	movs	r1, #102	; 0x66
 800e49c:	f000 fd42 	bl	800ef24 <__assert_func>
 800e4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4a4:	6006      	str	r6, [r0, #0]
 800e4a6:	60c6      	str	r6, [r0, #12]
 800e4a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e4aa:	68f3      	ldr	r3, [r6, #12]
 800e4ac:	b183      	cbz	r3, 800e4d0 <_Balloc+0x50>
 800e4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4b6:	b9b8      	cbnz	r0, 800e4e8 <_Balloc+0x68>
 800e4b8:	2101      	movs	r1, #1
 800e4ba:	fa01 f605 	lsl.w	r6, r1, r5
 800e4be:	1d72      	adds	r2, r6, #5
 800e4c0:	0092      	lsls	r2, r2, #2
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f000 fb60 	bl	800eb88 <_calloc_r>
 800e4c8:	b160      	cbz	r0, 800e4e4 <_Balloc+0x64>
 800e4ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4ce:	e00e      	b.n	800e4ee <_Balloc+0x6e>
 800e4d0:	2221      	movs	r2, #33	; 0x21
 800e4d2:	2104      	movs	r1, #4
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f000 fb57 	bl	800eb88 <_calloc_r>
 800e4da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4dc:	60f0      	str	r0, [r6, #12]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1e4      	bne.n	800e4ae <_Balloc+0x2e>
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}
 800e4e8:	6802      	ldr	r2, [r0, #0]
 800e4ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4f4:	e7f7      	b.n	800e4e6 <_Balloc+0x66>
 800e4f6:	bf00      	nop
 800e4f8:	08010c11 	.word	0x08010c11
 800e4fc:	08010c94 	.word	0x08010c94

0800e500 <_Bfree>:
 800e500:	b570      	push	{r4, r5, r6, lr}
 800e502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e504:	4605      	mov	r5, r0
 800e506:	460c      	mov	r4, r1
 800e508:	b976      	cbnz	r6, 800e528 <_Bfree+0x28>
 800e50a:	2010      	movs	r0, #16
 800e50c:	f7ff ffa4 	bl	800e458 <malloc>
 800e510:	4602      	mov	r2, r0
 800e512:	6268      	str	r0, [r5, #36]	; 0x24
 800e514:	b920      	cbnz	r0, 800e520 <_Bfree+0x20>
 800e516:	4b09      	ldr	r3, [pc, #36]	; (800e53c <_Bfree+0x3c>)
 800e518:	4809      	ldr	r0, [pc, #36]	; (800e540 <_Bfree+0x40>)
 800e51a:	218a      	movs	r1, #138	; 0x8a
 800e51c:	f000 fd02 	bl	800ef24 <__assert_func>
 800e520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e524:	6006      	str	r6, [r0, #0]
 800e526:	60c6      	str	r6, [r0, #12]
 800e528:	b13c      	cbz	r4, 800e53a <_Bfree+0x3a>
 800e52a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e52c:	6862      	ldr	r2, [r4, #4]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e534:	6021      	str	r1, [r4, #0]
 800e536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e53a:	bd70      	pop	{r4, r5, r6, pc}
 800e53c:	08010c11 	.word	0x08010c11
 800e540:	08010c94 	.word	0x08010c94

0800e544 <__multadd>:
 800e544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e548:	690d      	ldr	r5, [r1, #16]
 800e54a:	4607      	mov	r7, r0
 800e54c:	460c      	mov	r4, r1
 800e54e:	461e      	mov	r6, r3
 800e550:	f101 0c14 	add.w	ip, r1, #20
 800e554:	2000      	movs	r0, #0
 800e556:	f8dc 3000 	ldr.w	r3, [ip]
 800e55a:	b299      	uxth	r1, r3
 800e55c:	fb02 6101 	mla	r1, r2, r1, r6
 800e560:	0c1e      	lsrs	r6, r3, #16
 800e562:	0c0b      	lsrs	r3, r1, #16
 800e564:	fb02 3306 	mla	r3, r2, r6, r3
 800e568:	b289      	uxth	r1, r1
 800e56a:	3001      	adds	r0, #1
 800e56c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e570:	4285      	cmp	r5, r0
 800e572:	f84c 1b04 	str.w	r1, [ip], #4
 800e576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e57a:	dcec      	bgt.n	800e556 <__multadd+0x12>
 800e57c:	b30e      	cbz	r6, 800e5c2 <__multadd+0x7e>
 800e57e:	68a3      	ldr	r3, [r4, #8]
 800e580:	42ab      	cmp	r3, r5
 800e582:	dc19      	bgt.n	800e5b8 <__multadd+0x74>
 800e584:	6861      	ldr	r1, [r4, #4]
 800e586:	4638      	mov	r0, r7
 800e588:	3101      	adds	r1, #1
 800e58a:	f7ff ff79 	bl	800e480 <_Balloc>
 800e58e:	4680      	mov	r8, r0
 800e590:	b928      	cbnz	r0, 800e59e <__multadd+0x5a>
 800e592:	4602      	mov	r2, r0
 800e594:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <__multadd+0x84>)
 800e596:	480d      	ldr	r0, [pc, #52]	; (800e5cc <__multadd+0x88>)
 800e598:	21b5      	movs	r1, #181	; 0xb5
 800e59a:	f000 fcc3 	bl	800ef24 <__assert_func>
 800e59e:	6922      	ldr	r2, [r4, #16]
 800e5a0:	3202      	adds	r2, #2
 800e5a2:	f104 010c 	add.w	r1, r4, #12
 800e5a6:	0092      	lsls	r2, r2, #2
 800e5a8:	300c      	adds	r0, #12
 800e5aa:	f7fe f85a 	bl	800c662 <memcpy>
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	4638      	mov	r0, r7
 800e5b2:	f7ff ffa5 	bl	800e500 <_Bfree>
 800e5b6:	4644      	mov	r4, r8
 800e5b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5bc:	3501      	adds	r5, #1
 800e5be:	615e      	str	r6, [r3, #20]
 800e5c0:	6125      	str	r5, [r4, #16]
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c8:	08010c83 	.word	0x08010c83
 800e5cc:	08010c94 	.word	0x08010c94

0800e5d0 <__hi0bits>:
 800e5d0:	0c03      	lsrs	r3, r0, #16
 800e5d2:	041b      	lsls	r3, r3, #16
 800e5d4:	b9d3      	cbnz	r3, 800e60c <__hi0bits+0x3c>
 800e5d6:	0400      	lsls	r0, r0, #16
 800e5d8:	2310      	movs	r3, #16
 800e5da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5de:	bf04      	itt	eq
 800e5e0:	0200      	lsleq	r0, r0, #8
 800e5e2:	3308      	addeq	r3, #8
 800e5e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5e8:	bf04      	itt	eq
 800e5ea:	0100      	lsleq	r0, r0, #4
 800e5ec:	3304      	addeq	r3, #4
 800e5ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5f2:	bf04      	itt	eq
 800e5f4:	0080      	lsleq	r0, r0, #2
 800e5f6:	3302      	addeq	r3, #2
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	db05      	blt.n	800e608 <__hi0bits+0x38>
 800e5fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e600:	f103 0301 	add.w	r3, r3, #1
 800e604:	bf08      	it	eq
 800e606:	2320      	moveq	r3, #32
 800e608:	4618      	mov	r0, r3
 800e60a:	4770      	bx	lr
 800e60c:	2300      	movs	r3, #0
 800e60e:	e7e4      	b.n	800e5da <__hi0bits+0xa>

0800e610 <__lo0bits>:
 800e610:	6803      	ldr	r3, [r0, #0]
 800e612:	f013 0207 	ands.w	r2, r3, #7
 800e616:	4601      	mov	r1, r0
 800e618:	d00b      	beq.n	800e632 <__lo0bits+0x22>
 800e61a:	07da      	lsls	r2, r3, #31
 800e61c:	d423      	bmi.n	800e666 <__lo0bits+0x56>
 800e61e:	0798      	lsls	r0, r3, #30
 800e620:	bf49      	itett	mi
 800e622:	085b      	lsrmi	r3, r3, #1
 800e624:	089b      	lsrpl	r3, r3, #2
 800e626:	2001      	movmi	r0, #1
 800e628:	600b      	strmi	r3, [r1, #0]
 800e62a:	bf5c      	itt	pl
 800e62c:	600b      	strpl	r3, [r1, #0]
 800e62e:	2002      	movpl	r0, #2
 800e630:	4770      	bx	lr
 800e632:	b298      	uxth	r0, r3
 800e634:	b9a8      	cbnz	r0, 800e662 <__lo0bits+0x52>
 800e636:	0c1b      	lsrs	r3, r3, #16
 800e638:	2010      	movs	r0, #16
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	b90a      	cbnz	r2, 800e642 <__lo0bits+0x32>
 800e63e:	3008      	adds	r0, #8
 800e640:	0a1b      	lsrs	r3, r3, #8
 800e642:	071a      	lsls	r2, r3, #28
 800e644:	bf04      	itt	eq
 800e646:	091b      	lsreq	r3, r3, #4
 800e648:	3004      	addeq	r0, #4
 800e64a:	079a      	lsls	r2, r3, #30
 800e64c:	bf04      	itt	eq
 800e64e:	089b      	lsreq	r3, r3, #2
 800e650:	3002      	addeq	r0, #2
 800e652:	07da      	lsls	r2, r3, #31
 800e654:	d403      	bmi.n	800e65e <__lo0bits+0x4e>
 800e656:	085b      	lsrs	r3, r3, #1
 800e658:	f100 0001 	add.w	r0, r0, #1
 800e65c:	d005      	beq.n	800e66a <__lo0bits+0x5a>
 800e65e:	600b      	str	r3, [r1, #0]
 800e660:	4770      	bx	lr
 800e662:	4610      	mov	r0, r2
 800e664:	e7e9      	b.n	800e63a <__lo0bits+0x2a>
 800e666:	2000      	movs	r0, #0
 800e668:	4770      	bx	lr
 800e66a:	2020      	movs	r0, #32
 800e66c:	4770      	bx	lr
	...

0800e670 <__i2b>:
 800e670:	b510      	push	{r4, lr}
 800e672:	460c      	mov	r4, r1
 800e674:	2101      	movs	r1, #1
 800e676:	f7ff ff03 	bl	800e480 <_Balloc>
 800e67a:	4602      	mov	r2, r0
 800e67c:	b928      	cbnz	r0, 800e68a <__i2b+0x1a>
 800e67e:	4b05      	ldr	r3, [pc, #20]	; (800e694 <__i2b+0x24>)
 800e680:	4805      	ldr	r0, [pc, #20]	; (800e698 <__i2b+0x28>)
 800e682:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e686:	f000 fc4d 	bl	800ef24 <__assert_func>
 800e68a:	2301      	movs	r3, #1
 800e68c:	6144      	str	r4, [r0, #20]
 800e68e:	6103      	str	r3, [r0, #16]
 800e690:	bd10      	pop	{r4, pc}
 800e692:	bf00      	nop
 800e694:	08010c83 	.word	0x08010c83
 800e698:	08010c94 	.word	0x08010c94

0800e69c <__multiply>:
 800e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	4691      	mov	r9, r2
 800e6a2:	690a      	ldr	r2, [r1, #16]
 800e6a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	bfb8      	it	lt
 800e6ac:	460b      	movlt	r3, r1
 800e6ae:	460c      	mov	r4, r1
 800e6b0:	bfbc      	itt	lt
 800e6b2:	464c      	movlt	r4, r9
 800e6b4:	4699      	movlt	r9, r3
 800e6b6:	6927      	ldr	r7, [r4, #16]
 800e6b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e6bc:	68a3      	ldr	r3, [r4, #8]
 800e6be:	6861      	ldr	r1, [r4, #4]
 800e6c0:	eb07 060a 	add.w	r6, r7, sl
 800e6c4:	42b3      	cmp	r3, r6
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	bfb8      	it	lt
 800e6ca:	3101      	addlt	r1, #1
 800e6cc:	f7ff fed8 	bl	800e480 <_Balloc>
 800e6d0:	b930      	cbnz	r0, 800e6e0 <__multiply+0x44>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	4b44      	ldr	r3, [pc, #272]	; (800e7e8 <__multiply+0x14c>)
 800e6d6:	4845      	ldr	r0, [pc, #276]	; (800e7ec <__multiply+0x150>)
 800e6d8:	f240 115d 	movw	r1, #349	; 0x15d
 800e6dc:	f000 fc22 	bl	800ef24 <__assert_func>
 800e6e0:	f100 0514 	add.w	r5, r0, #20
 800e6e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6e8:	462b      	mov	r3, r5
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	4543      	cmp	r3, r8
 800e6ee:	d321      	bcc.n	800e734 <__multiply+0x98>
 800e6f0:	f104 0314 	add.w	r3, r4, #20
 800e6f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e6f8:	f109 0314 	add.w	r3, r9, #20
 800e6fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e700:	9202      	str	r2, [sp, #8]
 800e702:	1b3a      	subs	r2, r7, r4
 800e704:	3a15      	subs	r2, #21
 800e706:	f022 0203 	bic.w	r2, r2, #3
 800e70a:	3204      	adds	r2, #4
 800e70c:	f104 0115 	add.w	r1, r4, #21
 800e710:	428f      	cmp	r7, r1
 800e712:	bf38      	it	cc
 800e714:	2204      	movcc	r2, #4
 800e716:	9201      	str	r2, [sp, #4]
 800e718:	9a02      	ldr	r2, [sp, #8]
 800e71a:	9303      	str	r3, [sp, #12]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d80c      	bhi.n	800e73a <__multiply+0x9e>
 800e720:	2e00      	cmp	r6, #0
 800e722:	dd03      	ble.n	800e72c <__multiply+0x90>
 800e724:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d05a      	beq.n	800e7e2 <__multiply+0x146>
 800e72c:	6106      	str	r6, [r0, #16]
 800e72e:	b005      	add	sp, #20
 800e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e734:	f843 2b04 	str.w	r2, [r3], #4
 800e738:	e7d8      	b.n	800e6ec <__multiply+0x50>
 800e73a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e73e:	f1ba 0f00 	cmp.w	sl, #0
 800e742:	d024      	beq.n	800e78e <__multiply+0xf2>
 800e744:	f104 0e14 	add.w	lr, r4, #20
 800e748:	46a9      	mov	r9, r5
 800e74a:	f04f 0c00 	mov.w	ip, #0
 800e74e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e752:	f8d9 1000 	ldr.w	r1, [r9]
 800e756:	fa1f fb82 	uxth.w	fp, r2
 800e75a:	b289      	uxth	r1, r1
 800e75c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e760:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e764:	f8d9 2000 	ldr.w	r2, [r9]
 800e768:	4461      	add	r1, ip
 800e76a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e76e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e772:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e776:	b289      	uxth	r1, r1
 800e778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e77c:	4577      	cmp	r7, lr
 800e77e:	f849 1b04 	str.w	r1, [r9], #4
 800e782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e786:	d8e2      	bhi.n	800e74e <__multiply+0xb2>
 800e788:	9a01      	ldr	r2, [sp, #4]
 800e78a:	f845 c002 	str.w	ip, [r5, r2]
 800e78e:	9a03      	ldr	r2, [sp, #12]
 800e790:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e794:	3304      	adds	r3, #4
 800e796:	f1b9 0f00 	cmp.w	r9, #0
 800e79a:	d020      	beq.n	800e7de <__multiply+0x142>
 800e79c:	6829      	ldr	r1, [r5, #0]
 800e79e:	f104 0c14 	add.w	ip, r4, #20
 800e7a2:	46ae      	mov	lr, r5
 800e7a4:	f04f 0a00 	mov.w	sl, #0
 800e7a8:	f8bc b000 	ldrh.w	fp, [ip]
 800e7ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e7b0:	fb09 220b 	mla	r2, r9, fp, r2
 800e7b4:	4492      	add	sl, r2
 800e7b6:	b289      	uxth	r1, r1
 800e7b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e7bc:	f84e 1b04 	str.w	r1, [lr], #4
 800e7c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7c4:	f8be 1000 	ldrh.w	r1, [lr]
 800e7c8:	0c12      	lsrs	r2, r2, #16
 800e7ca:	fb09 1102 	mla	r1, r9, r2, r1
 800e7ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e7d2:	4567      	cmp	r7, ip
 800e7d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e7d8:	d8e6      	bhi.n	800e7a8 <__multiply+0x10c>
 800e7da:	9a01      	ldr	r2, [sp, #4]
 800e7dc:	50a9      	str	r1, [r5, r2]
 800e7de:	3504      	adds	r5, #4
 800e7e0:	e79a      	b.n	800e718 <__multiply+0x7c>
 800e7e2:	3e01      	subs	r6, #1
 800e7e4:	e79c      	b.n	800e720 <__multiply+0x84>
 800e7e6:	bf00      	nop
 800e7e8:	08010c83 	.word	0x08010c83
 800e7ec:	08010c94 	.word	0x08010c94

0800e7f0 <__pow5mult>:
 800e7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7f4:	4615      	mov	r5, r2
 800e7f6:	f012 0203 	ands.w	r2, r2, #3
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	460f      	mov	r7, r1
 800e7fe:	d007      	beq.n	800e810 <__pow5mult+0x20>
 800e800:	4c25      	ldr	r4, [pc, #148]	; (800e898 <__pow5mult+0xa8>)
 800e802:	3a01      	subs	r2, #1
 800e804:	2300      	movs	r3, #0
 800e806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e80a:	f7ff fe9b 	bl	800e544 <__multadd>
 800e80e:	4607      	mov	r7, r0
 800e810:	10ad      	asrs	r5, r5, #2
 800e812:	d03d      	beq.n	800e890 <__pow5mult+0xa0>
 800e814:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e816:	b97c      	cbnz	r4, 800e838 <__pow5mult+0x48>
 800e818:	2010      	movs	r0, #16
 800e81a:	f7ff fe1d 	bl	800e458 <malloc>
 800e81e:	4602      	mov	r2, r0
 800e820:	6270      	str	r0, [r6, #36]	; 0x24
 800e822:	b928      	cbnz	r0, 800e830 <__pow5mult+0x40>
 800e824:	4b1d      	ldr	r3, [pc, #116]	; (800e89c <__pow5mult+0xac>)
 800e826:	481e      	ldr	r0, [pc, #120]	; (800e8a0 <__pow5mult+0xb0>)
 800e828:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e82c:	f000 fb7a 	bl	800ef24 <__assert_func>
 800e830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e834:	6004      	str	r4, [r0, #0]
 800e836:	60c4      	str	r4, [r0, #12]
 800e838:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e83c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e840:	b94c      	cbnz	r4, 800e856 <__pow5mult+0x66>
 800e842:	f240 2171 	movw	r1, #625	; 0x271
 800e846:	4630      	mov	r0, r6
 800e848:	f7ff ff12 	bl	800e670 <__i2b>
 800e84c:	2300      	movs	r3, #0
 800e84e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e852:	4604      	mov	r4, r0
 800e854:	6003      	str	r3, [r0, #0]
 800e856:	f04f 0900 	mov.w	r9, #0
 800e85a:	07eb      	lsls	r3, r5, #31
 800e85c:	d50a      	bpl.n	800e874 <__pow5mult+0x84>
 800e85e:	4639      	mov	r1, r7
 800e860:	4622      	mov	r2, r4
 800e862:	4630      	mov	r0, r6
 800e864:	f7ff ff1a 	bl	800e69c <__multiply>
 800e868:	4639      	mov	r1, r7
 800e86a:	4680      	mov	r8, r0
 800e86c:	4630      	mov	r0, r6
 800e86e:	f7ff fe47 	bl	800e500 <_Bfree>
 800e872:	4647      	mov	r7, r8
 800e874:	106d      	asrs	r5, r5, #1
 800e876:	d00b      	beq.n	800e890 <__pow5mult+0xa0>
 800e878:	6820      	ldr	r0, [r4, #0]
 800e87a:	b938      	cbnz	r0, 800e88c <__pow5mult+0x9c>
 800e87c:	4622      	mov	r2, r4
 800e87e:	4621      	mov	r1, r4
 800e880:	4630      	mov	r0, r6
 800e882:	f7ff ff0b 	bl	800e69c <__multiply>
 800e886:	6020      	str	r0, [r4, #0]
 800e888:	f8c0 9000 	str.w	r9, [r0]
 800e88c:	4604      	mov	r4, r0
 800e88e:	e7e4      	b.n	800e85a <__pow5mult+0x6a>
 800e890:	4638      	mov	r0, r7
 800e892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e896:	bf00      	nop
 800e898:	08010de0 	.word	0x08010de0
 800e89c:	08010c11 	.word	0x08010c11
 800e8a0:	08010c94 	.word	0x08010c94

0800e8a4 <__lshift>:
 800e8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a8:	460c      	mov	r4, r1
 800e8aa:	6849      	ldr	r1, [r1, #4]
 800e8ac:	6923      	ldr	r3, [r4, #16]
 800e8ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8b2:	68a3      	ldr	r3, [r4, #8]
 800e8b4:	4607      	mov	r7, r0
 800e8b6:	4691      	mov	r9, r2
 800e8b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8bc:	f108 0601 	add.w	r6, r8, #1
 800e8c0:	42b3      	cmp	r3, r6
 800e8c2:	db0b      	blt.n	800e8dc <__lshift+0x38>
 800e8c4:	4638      	mov	r0, r7
 800e8c6:	f7ff fddb 	bl	800e480 <_Balloc>
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	b948      	cbnz	r0, 800e8e2 <__lshift+0x3e>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	4b2a      	ldr	r3, [pc, #168]	; (800e97c <__lshift+0xd8>)
 800e8d2:	482b      	ldr	r0, [pc, #172]	; (800e980 <__lshift+0xdc>)
 800e8d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8d8:	f000 fb24 	bl	800ef24 <__assert_func>
 800e8dc:	3101      	adds	r1, #1
 800e8de:	005b      	lsls	r3, r3, #1
 800e8e0:	e7ee      	b.n	800e8c0 <__lshift+0x1c>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	f100 0114 	add.w	r1, r0, #20
 800e8e8:	f100 0210 	add.w	r2, r0, #16
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	4553      	cmp	r3, sl
 800e8f0:	db37      	blt.n	800e962 <__lshift+0xbe>
 800e8f2:	6920      	ldr	r0, [r4, #16]
 800e8f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8f8:	f104 0314 	add.w	r3, r4, #20
 800e8fc:	f019 091f 	ands.w	r9, r9, #31
 800e900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e904:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e908:	d02f      	beq.n	800e96a <__lshift+0xc6>
 800e90a:	f1c9 0e20 	rsb	lr, r9, #32
 800e90e:	468a      	mov	sl, r1
 800e910:	f04f 0c00 	mov.w	ip, #0
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	fa02 f209 	lsl.w	r2, r2, r9
 800e91a:	ea42 020c 	orr.w	r2, r2, ip
 800e91e:	f84a 2b04 	str.w	r2, [sl], #4
 800e922:	f853 2b04 	ldr.w	r2, [r3], #4
 800e926:	4298      	cmp	r0, r3
 800e928:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e92c:	d8f2      	bhi.n	800e914 <__lshift+0x70>
 800e92e:	1b03      	subs	r3, r0, r4
 800e930:	3b15      	subs	r3, #21
 800e932:	f023 0303 	bic.w	r3, r3, #3
 800e936:	3304      	adds	r3, #4
 800e938:	f104 0215 	add.w	r2, r4, #21
 800e93c:	4290      	cmp	r0, r2
 800e93e:	bf38      	it	cc
 800e940:	2304      	movcc	r3, #4
 800e942:	f841 c003 	str.w	ip, [r1, r3]
 800e946:	f1bc 0f00 	cmp.w	ip, #0
 800e94a:	d001      	beq.n	800e950 <__lshift+0xac>
 800e94c:	f108 0602 	add.w	r6, r8, #2
 800e950:	3e01      	subs	r6, #1
 800e952:	4638      	mov	r0, r7
 800e954:	612e      	str	r6, [r5, #16]
 800e956:	4621      	mov	r1, r4
 800e958:	f7ff fdd2 	bl	800e500 <_Bfree>
 800e95c:	4628      	mov	r0, r5
 800e95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e962:	f842 0f04 	str.w	r0, [r2, #4]!
 800e966:	3301      	adds	r3, #1
 800e968:	e7c1      	b.n	800e8ee <__lshift+0x4a>
 800e96a:	3904      	subs	r1, #4
 800e96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e970:	f841 2f04 	str.w	r2, [r1, #4]!
 800e974:	4298      	cmp	r0, r3
 800e976:	d8f9      	bhi.n	800e96c <__lshift+0xc8>
 800e978:	e7ea      	b.n	800e950 <__lshift+0xac>
 800e97a:	bf00      	nop
 800e97c:	08010c83 	.word	0x08010c83
 800e980:	08010c94 	.word	0x08010c94

0800e984 <__mcmp>:
 800e984:	b530      	push	{r4, r5, lr}
 800e986:	6902      	ldr	r2, [r0, #16]
 800e988:	690c      	ldr	r4, [r1, #16]
 800e98a:	1b12      	subs	r2, r2, r4
 800e98c:	d10e      	bne.n	800e9ac <__mcmp+0x28>
 800e98e:	f100 0314 	add.w	r3, r0, #20
 800e992:	3114      	adds	r1, #20
 800e994:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e998:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e99c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e9a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e9a4:	42a5      	cmp	r5, r4
 800e9a6:	d003      	beq.n	800e9b0 <__mcmp+0x2c>
 800e9a8:	d305      	bcc.n	800e9b6 <__mcmp+0x32>
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	bd30      	pop	{r4, r5, pc}
 800e9b0:	4283      	cmp	r3, r0
 800e9b2:	d3f3      	bcc.n	800e99c <__mcmp+0x18>
 800e9b4:	e7fa      	b.n	800e9ac <__mcmp+0x28>
 800e9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ba:	e7f7      	b.n	800e9ac <__mcmp+0x28>

0800e9bc <__mdiff>:
 800e9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	460c      	mov	r4, r1
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	4690      	mov	r8, r2
 800e9ca:	f7ff ffdb 	bl	800e984 <__mcmp>
 800e9ce:	1e05      	subs	r5, r0, #0
 800e9d0:	d110      	bne.n	800e9f4 <__mdiff+0x38>
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f7ff fd53 	bl	800e480 <_Balloc>
 800e9da:	b930      	cbnz	r0, 800e9ea <__mdiff+0x2e>
 800e9dc:	4b3a      	ldr	r3, [pc, #232]	; (800eac8 <__mdiff+0x10c>)
 800e9de:	4602      	mov	r2, r0
 800e9e0:	f240 2132 	movw	r1, #562	; 0x232
 800e9e4:	4839      	ldr	r0, [pc, #228]	; (800eacc <__mdiff+0x110>)
 800e9e6:	f000 fa9d 	bl	800ef24 <__assert_func>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f4:	bfa4      	itt	ge
 800e9f6:	4643      	movge	r3, r8
 800e9f8:	46a0      	movge	r8, r4
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea00:	bfa6      	itte	ge
 800ea02:	461c      	movge	r4, r3
 800ea04:	2500      	movge	r5, #0
 800ea06:	2501      	movlt	r5, #1
 800ea08:	f7ff fd3a 	bl	800e480 <_Balloc>
 800ea0c:	b920      	cbnz	r0, 800ea18 <__mdiff+0x5c>
 800ea0e:	4b2e      	ldr	r3, [pc, #184]	; (800eac8 <__mdiff+0x10c>)
 800ea10:	4602      	mov	r2, r0
 800ea12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea16:	e7e5      	b.n	800e9e4 <__mdiff+0x28>
 800ea18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea1c:	6926      	ldr	r6, [r4, #16]
 800ea1e:	60c5      	str	r5, [r0, #12]
 800ea20:	f104 0914 	add.w	r9, r4, #20
 800ea24:	f108 0514 	add.w	r5, r8, #20
 800ea28:	f100 0e14 	add.w	lr, r0, #20
 800ea2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea34:	f108 0210 	add.w	r2, r8, #16
 800ea38:	46f2      	mov	sl, lr
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea44:	fa1f f883 	uxth.w	r8, r3
 800ea48:	fa11 f18b 	uxtah	r1, r1, fp
 800ea4c:	0c1b      	lsrs	r3, r3, #16
 800ea4e:	eba1 0808 	sub.w	r8, r1, r8
 800ea52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea5a:	fa1f f888 	uxth.w	r8, r8
 800ea5e:	1419      	asrs	r1, r3, #16
 800ea60:	454e      	cmp	r6, r9
 800ea62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea66:	f84a 3b04 	str.w	r3, [sl], #4
 800ea6a:	d8e7      	bhi.n	800ea3c <__mdiff+0x80>
 800ea6c:	1b33      	subs	r3, r6, r4
 800ea6e:	3b15      	subs	r3, #21
 800ea70:	f023 0303 	bic.w	r3, r3, #3
 800ea74:	3304      	adds	r3, #4
 800ea76:	3415      	adds	r4, #21
 800ea78:	42a6      	cmp	r6, r4
 800ea7a:	bf38      	it	cc
 800ea7c:	2304      	movcc	r3, #4
 800ea7e:	441d      	add	r5, r3
 800ea80:	4473      	add	r3, lr
 800ea82:	469e      	mov	lr, r3
 800ea84:	462e      	mov	r6, r5
 800ea86:	4566      	cmp	r6, ip
 800ea88:	d30e      	bcc.n	800eaa8 <__mdiff+0xec>
 800ea8a:	f10c 0203 	add.w	r2, ip, #3
 800ea8e:	1b52      	subs	r2, r2, r5
 800ea90:	f022 0203 	bic.w	r2, r2, #3
 800ea94:	3d03      	subs	r5, #3
 800ea96:	45ac      	cmp	ip, r5
 800ea98:	bf38      	it	cc
 800ea9a:	2200      	movcc	r2, #0
 800ea9c:	441a      	add	r2, r3
 800ea9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eaa2:	b17b      	cbz	r3, 800eac4 <__mdiff+0x108>
 800eaa4:	6107      	str	r7, [r0, #16]
 800eaa6:	e7a3      	b.n	800e9f0 <__mdiff+0x34>
 800eaa8:	f856 8b04 	ldr.w	r8, [r6], #4
 800eaac:	fa11 f288 	uxtah	r2, r1, r8
 800eab0:	1414      	asrs	r4, r2, #16
 800eab2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eab6:	b292      	uxth	r2, r2
 800eab8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eabc:	f84e 2b04 	str.w	r2, [lr], #4
 800eac0:	1421      	asrs	r1, r4, #16
 800eac2:	e7e0      	b.n	800ea86 <__mdiff+0xca>
 800eac4:	3f01      	subs	r7, #1
 800eac6:	e7ea      	b.n	800ea9e <__mdiff+0xe2>
 800eac8:	08010c83 	.word	0x08010c83
 800eacc:	08010c94 	.word	0x08010c94

0800ead0 <__d2b>:
 800ead0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ead4:	4689      	mov	r9, r1
 800ead6:	2101      	movs	r1, #1
 800ead8:	ec57 6b10 	vmov	r6, r7, d0
 800eadc:	4690      	mov	r8, r2
 800eade:	f7ff fccf 	bl	800e480 <_Balloc>
 800eae2:	4604      	mov	r4, r0
 800eae4:	b930      	cbnz	r0, 800eaf4 <__d2b+0x24>
 800eae6:	4602      	mov	r2, r0
 800eae8:	4b25      	ldr	r3, [pc, #148]	; (800eb80 <__d2b+0xb0>)
 800eaea:	4826      	ldr	r0, [pc, #152]	; (800eb84 <__d2b+0xb4>)
 800eaec:	f240 310a 	movw	r1, #778	; 0x30a
 800eaf0:	f000 fa18 	bl	800ef24 <__assert_func>
 800eaf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eaf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eafc:	bb35      	cbnz	r5, 800eb4c <__d2b+0x7c>
 800eafe:	2e00      	cmp	r6, #0
 800eb00:	9301      	str	r3, [sp, #4]
 800eb02:	d028      	beq.n	800eb56 <__d2b+0x86>
 800eb04:	4668      	mov	r0, sp
 800eb06:	9600      	str	r6, [sp, #0]
 800eb08:	f7ff fd82 	bl	800e610 <__lo0bits>
 800eb0c:	9900      	ldr	r1, [sp, #0]
 800eb0e:	b300      	cbz	r0, 800eb52 <__d2b+0x82>
 800eb10:	9a01      	ldr	r2, [sp, #4]
 800eb12:	f1c0 0320 	rsb	r3, r0, #32
 800eb16:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1a:	430b      	orrs	r3, r1
 800eb1c:	40c2      	lsrs	r2, r0
 800eb1e:	6163      	str	r3, [r4, #20]
 800eb20:	9201      	str	r2, [sp, #4]
 800eb22:	9b01      	ldr	r3, [sp, #4]
 800eb24:	61a3      	str	r3, [r4, #24]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	bf14      	ite	ne
 800eb2a:	2202      	movne	r2, #2
 800eb2c:	2201      	moveq	r2, #1
 800eb2e:	6122      	str	r2, [r4, #16]
 800eb30:	b1d5      	cbz	r5, 800eb68 <__d2b+0x98>
 800eb32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb36:	4405      	add	r5, r0
 800eb38:	f8c9 5000 	str.w	r5, [r9]
 800eb3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb40:	f8c8 0000 	str.w	r0, [r8]
 800eb44:	4620      	mov	r0, r4
 800eb46:	b003      	add	sp, #12
 800eb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb50:	e7d5      	b.n	800eafe <__d2b+0x2e>
 800eb52:	6161      	str	r1, [r4, #20]
 800eb54:	e7e5      	b.n	800eb22 <__d2b+0x52>
 800eb56:	a801      	add	r0, sp, #4
 800eb58:	f7ff fd5a 	bl	800e610 <__lo0bits>
 800eb5c:	9b01      	ldr	r3, [sp, #4]
 800eb5e:	6163      	str	r3, [r4, #20]
 800eb60:	2201      	movs	r2, #1
 800eb62:	6122      	str	r2, [r4, #16]
 800eb64:	3020      	adds	r0, #32
 800eb66:	e7e3      	b.n	800eb30 <__d2b+0x60>
 800eb68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb70:	f8c9 0000 	str.w	r0, [r9]
 800eb74:	6918      	ldr	r0, [r3, #16]
 800eb76:	f7ff fd2b 	bl	800e5d0 <__hi0bits>
 800eb7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb7e:	e7df      	b.n	800eb40 <__d2b+0x70>
 800eb80:	08010c83 	.word	0x08010c83
 800eb84:	08010c94 	.word	0x08010c94

0800eb88 <_calloc_r>:
 800eb88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb8a:	fba1 2402 	umull	r2, r4, r1, r2
 800eb8e:	b94c      	cbnz	r4, 800eba4 <_calloc_r+0x1c>
 800eb90:	4611      	mov	r1, r2
 800eb92:	9201      	str	r2, [sp, #4]
 800eb94:	f7fd fd9c 	bl	800c6d0 <_malloc_r>
 800eb98:	9a01      	ldr	r2, [sp, #4]
 800eb9a:	4605      	mov	r5, r0
 800eb9c:	b930      	cbnz	r0, 800ebac <_calloc_r+0x24>
 800eb9e:	4628      	mov	r0, r5
 800eba0:	b003      	add	sp, #12
 800eba2:	bd30      	pop	{r4, r5, pc}
 800eba4:	220c      	movs	r2, #12
 800eba6:	6002      	str	r2, [r0, #0]
 800eba8:	2500      	movs	r5, #0
 800ebaa:	e7f8      	b.n	800eb9e <_calloc_r+0x16>
 800ebac:	4621      	mov	r1, r4
 800ebae:	f7fd fd66 	bl	800c67e <memset>
 800ebb2:	e7f4      	b.n	800eb9e <_calloc_r+0x16>

0800ebb4 <_free_r>:
 800ebb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebb6:	2900      	cmp	r1, #0
 800ebb8:	d044      	beq.n	800ec44 <_free_r+0x90>
 800ebba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebbe:	9001      	str	r0, [sp, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f1a1 0404 	sub.w	r4, r1, #4
 800ebc6:	bfb8      	it	lt
 800ebc8:	18e4      	addlt	r4, r4, r3
 800ebca:	f7ff fc4d 	bl	800e468 <__malloc_lock>
 800ebce:	4a1e      	ldr	r2, [pc, #120]	; (800ec48 <_free_r+0x94>)
 800ebd0:	9801      	ldr	r0, [sp, #4]
 800ebd2:	6813      	ldr	r3, [r2, #0]
 800ebd4:	b933      	cbnz	r3, 800ebe4 <_free_r+0x30>
 800ebd6:	6063      	str	r3, [r4, #4]
 800ebd8:	6014      	str	r4, [r2, #0]
 800ebda:	b003      	add	sp, #12
 800ebdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebe0:	f7ff bc48 	b.w	800e474 <__malloc_unlock>
 800ebe4:	42a3      	cmp	r3, r4
 800ebe6:	d908      	bls.n	800ebfa <_free_r+0x46>
 800ebe8:	6825      	ldr	r5, [r4, #0]
 800ebea:	1961      	adds	r1, r4, r5
 800ebec:	428b      	cmp	r3, r1
 800ebee:	bf01      	itttt	eq
 800ebf0:	6819      	ldreq	r1, [r3, #0]
 800ebf2:	685b      	ldreq	r3, [r3, #4]
 800ebf4:	1949      	addeq	r1, r1, r5
 800ebf6:	6021      	streq	r1, [r4, #0]
 800ebf8:	e7ed      	b.n	800ebd6 <_free_r+0x22>
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	b10b      	cbz	r3, 800ec04 <_free_r+0x50>
 800ec00:	42a3      	cmp	r3, r4
 800ec02:	d9fa      	bls.n	800ebfa <_free_r+0x46>
 800ec04:	6811      	ldr	r1, [r2, #0]
 800ec06:	1855      	adds	r5, r2, r1
 800ec08:	42a5      	cmp	r5, r4
 800ec0a:	d10b      	bne.n	800ec24 <_free_r+0x70>
 800ec0c:	6824      	ldr	r4, [r4, #0]
 800ec0e:	4421      	add	r1, r4
 800ec10:	1854      	adds	r4, r2, r1
 800ec12:	42a3      	cmp	r3, r4
 800ec14:	6011      	str	r1, [r2, #0]
 800ec16:	d1e0      	bne.n	800ebda <_free_r+0x26>
 800ec18:	681c      	ldr	r4, [r3, #0]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	6053      	str	r3, [r2, #4]
 800ec1e:	4421      	add	r1, r4
 800ec20:	6011      	str	r1, [r2, #0]
 800ec22:	e7da      	b.n	800ebda <_free_r+0x26>
 800ec24:	d902      	bls.n	800ec2c <_free_r+0x78>
 800ec26:	230c      	movs	r3, #12
 800ec28:	6003      	str	r3, [r0, #0]
 800ec2a:	e7d6      	b.n	800ebda <_free_r+0x26>
 800ec2c:	6825      	ldr	r5, [r4, #0]
 800ec2e:	1961      	adds	r1, r4, r5
 800ec30:	428b      	cmp	r3, r1
 800ec32:	bf04      	itt	eq
 800ec34:	6819      	ldreq	r1, [r3, #0]
 800ec36:	685b      	ldreq	r3, [r3, #4]
 800ec38:	6063      	str	r3, [r4, #4]
 800ec3a:	bf04      	itt	eq
 800ec3c:	1949      	addeq	r1, r1, r5
 800ec3e:	6021      	streq	r1, [r4, #0]
 800ec40:	6054      	str	r4, [r2, #4]
 800ec42:	e7ca      	b.n	800ebda <_free_r+0x26>
 800ec44:	b003      	add	sp, #12
 800ec46:	bd30      	pop	{r4, r5, pc}
 800ec48:	200054e8 	.word	0x200054e8

0800ec4c <__sfputc_r>:
 800ec4c:	6893      	ldr	r3, [r2, #8]
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	b410      	push	{r4}
 800ec54:	6093      	str	r3, [r2, #8]
 800ec56:	da08      	bge.n	800ec6a <__sfputc_r+0x1e>
 800ec58:	6994      	ldr	r4, [r2, #24]
 800ec5a:	42a3      	cmp	r3, r4
 800ec5c:	db01      	blt.n	800ec62 <__sfputc_r+0x16>
 800ec5e:	290a      	cmp	r1, #10
 800ec60:	d103      	bne.n	800ec6a <__sfputc_r+0x1e>
 800ec62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec66:	f7fe bb5d 	b.w	800d324 <__swbuf_r>
 800ec6a:	6813      	ldr	r3, [r2, #0]
 800ec6c:	1c58      	adds	r0, r3, #1
 800ec6e:	6010      	str	r0, [r2, #0]
 800ec70:	7019      	strb	r1, [r3, #0]
 800ec72:	4608      	mov	r0, r1
 800ec74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <__sfputs_r>:
 800ec7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	460f      	mov	r7, r1
 800ec80:	4614      	mov	r4, r2
 800ec82:	18d5      	adds	r5, r2, r3
 800ec84:	42ac      	cmp	r4, r5
 800ec86:	d101      	bne.n	800ec8c <__sfputs_r+0x12>
 800ec88:	2000      	movs	r0, #0
 800ec8a:	e007      	b.n	800ec9c <__sfputs_r+0x22>
 800ec8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec90:	463a      	mov	r2, r7
 800ec92:	4630      	mov	r0, r6
 800ec94:	f7ff ffda 	bl	800ec4c <__sfputc_r>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d1f3      	bne.n	800ec84 <__sfputs_r+0xa>
 800ec9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eca0 <_vfiprintf_r>:
 800eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca4:	460d      	mov	r5, r1
 800eca6:	b09d      	sub	sp, #116	; 0x74
 800eca8:	4614      	mov	r4, r2
 800ecaa:	4698      	mov	r8, r3
 800ecac:	4606      	mov	r6, r0
 800ecae:	b118      	cbz	r0, 800ecb8 <_vfiprintf_r+0x18>
 800ecb0:	6983      	ldr	r3, [r0, #24]
 800ecb2:	b90b      	cbnz	r3, 800ecb8 <_vfiprintf_r+0x18>
 800ecb4:	f7fd fc10 	bl	800c4d8 <__sinit>
 800ecb8:	4b89      	ldr	r3, [pc, #548]	; (800eee0 <_vfiprintf_r+0x240>)
 800ecba:	429d      	cmp	r5, r3
 800ecbc:	d11b      	bne.n	800ecf6 <_vfiprintf_r+0x56>
 800ecbe:	6875      	ldr	r5, [r6, #4]
 800ecc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecc2:	07d9      	lsls	r1, r3, #31
 800ecc4:	d405      	bmi.n	800ecd2 <_vfiprintf_r+0x32>
 800ecc6:	89ab      	ldrh	r3, [r5, #12]
 800ecc8:	059a      	lsls	r2, r3, #22
 800ecca:	d402      	bmi.n	800ecd2 <_vfiprintf_r+0x32>
 800eccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecce:	f7fd fcc6 	bl	800c65e <__retarget_lock_acquire_recursive>
 800ecd2:	89ab      	ldrh	r3, [r5, #12]
 800ecd4:	071b      	lsls	r3, r3, #28
 800ecd6:	d501      	bpl.n	800ecdc <_vfiprintf_r+0x3c>
 800ecd8:	692b      	ldr	r3, [r5, #16]
 800ecda:	b9eb      	cbnz	r3, 800ed18 <_vfiprintf_r+0x78>
 800ecdc:	4629      	mov	r1, r5
 800ecde:	4630      	mov	r0, r6
 800ece0:	f7fe fb84 	bl	800d3ec <__swsetup_r>
 800ece4:	b1c0      	cbz	r0, 800ed18 <_vfiprintf_r+0x78>
 800ece6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ece8:	07dc      	lsls	r4, r3, #31
 800ecea:	d50e      	bpl.n	800ed0a <_vfiprintf_r+0x6a>
 800ecec:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf0:	b01d      	add	sp, #116	; 0x74
 800ecf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf6:	4b7b      	ldr	r3, [pc, #492]	; (800eee4 <_vfiprintf_r+0x244>)
 800ecf8:	429d      	cmp	r5, r3
 800ecfa:	d101      	bne.n	800ed00 <_vfiprintf_r+0x60>
 800ecfc:	68b5      	ldr	r5, [r6, #8]
 800ecfe:	e7df      	b.n	800ecc0 <_vfiprintf_r+0x20>
 800ed00:	4b79      	ldr	r3, [pc, #484]	; (800eee8 <_vfiprintf_r+0x248>)
 800ed02:	429d      	cmp	r5, r3
 800ed04:	bf08      	it	eq
 800ed06:	68f5      	ldreq	r5, [r6, #12]
 800ed08:	e7da      	b.n	800ecc0 <_vfiprintf_r+0x20>
 800ed0a:	89ab      	ldrh	r3, [r5, #12]
 800ed0c:	0598      	lsls	r0, r3, #22
 800ed0e:	d4ed      	bmi.n	800ecec <_vfiprintf_r+0x4c>
 800ed10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed12:	f7fd fca5 	bl	800c660 <__retarget_lock_release_recursive>
 800ed16:	e7e9      	b.n	800ecec <_vfiprintf_r+0x4c>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed1c:	2320      	movs	r3, #32
 800ed1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed26:	2330      	movs	r3, #48	; 0x30
 800ed28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eeec <_vfiprintf_r+0x24c>
 800ed2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed30:	f04f 0901 	mov.w	r9, #1
 800ed34:	4623      	mov	r3, r4
 800ed36:	469a      	mov	sl, r3
 800ed38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed3c:	b10a      	cbz	r2, 800ed42 <_vfiprintf_r+0xa2>
 800ed3e:	2a25      	cmp	r2, #37	; 0x25
 800ed40:	d1f9      	bne.n	800ed36 <_vfiprintf_r+0x96>
 800ed42:	ebba 0b04 	subs.w	fp, sl, r4
 800ed46:	d00b      	beq.n	800ed60 <_vfiprintf_r+0xc0>
 800ed48:	465b      	mov	r3, fp
 800ed4a:	4622      	mov	r2, r4
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f7ff ff93 	bl	800ec7a <__sfputs_r>
 800ed54:	3001      	adds	r0, #1
 800ed56:	f000 80aa 	beq.w	800eeae <_vfiprintf_r+0x20e>
 800ed5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed5c:	445a      	add	r2, fp
 800ed5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed60:	f89a 3000 	ldrb.w	r3, [sl]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f000 80a2 	beq.w	800eeae <_vfiprintf_r+0x20e>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed74:	f10a 0a01 	add.w	sl, sl, #1
 800ed78:	9304      	str	r3, [sp, #16]
 800ed7a:	9307      	str	r3, [sp, #28]
 800ed7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed80:	931a      	str	r3, [sp, #104]	; 0x68
 800ed82:	4654      	mov	r4, sl
 800ed84:	2205      	movs	r2, #5
 800ed86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed8a:	4858      	ldr	r0, [pc, #352]	; (800eeec <_vfiprintf_r+0x24c>)
 800ed8c:	f7f1 fa28 	bl	80001e0 <memchr>
 800ed90:	9a04      	ldr	r2, [sp, #16]
 800ed92:	b9d8      	cbnz	r0, 800edcc <_vfiprintf_r+0x12c>
 800ed94:	06d1      	lsls	r1, r2, #27
 800ed96:	bf44      	itt	mi
 800ed98:	2320      	movmi	r3, #32
 800ed9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed9e:	0713      	lsls	r3, r2, #28
 800eda0:	bf44      	itt	mi
 800eda2:	232b      	movmi	r3, #43	; 0x2b
 800eda4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eda8:	f89a 3000 	ldrb.w	r3, [sl]
 800edac:	2b2a      	cmp	r3, #42	; 0x2a
 800edae:	d015      	beq.n	800eddc <_vfiprintf_r+0x13c>
 800edb0:	9a07      	ldr	r2, [sp, #28]
 800edb2:	4654      	mov	r4, sl
 800edb4:	2000      	movs	r0, #0
 800edb6:	f04f 0c0a 	mov.w	ip, #10
 800edba:	4621      	mov	r1, r4
 800edbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edc0:	3b30      	subs	r3, #48	; 0x30
 800edc2:	2b09      	cmp	r3, #9
 800edc4:	d94e      	bls.n	800ee64 <_vfiprintf_r+0x1c4>
 800edc6:	b1b0      	cbz	r0, 800edf6 <_vfiprintf_r+0x156>
 800edc8:	9207      	str	r2, [sp, #28]
 800edca:	e014      	b.n	800edf6 <_vfiprintf_r+0x156>
 800edcc:	eba0 0308 	sub.w	r3, r0, r8
 800edd0:	fa09 f303 	lsl.w	r3, r9, r3
 800edd4:	4313      	orrs	r3, r2
 800edd6:	9304      	str	r3, [sp, #16]
 800edd8:	46a2      	mov	sl, r4
 800edda:	e7d2      	b.n	800ed82 <_vfiprintf_r+0xe2>
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	1d19      	adds	r1, r3, #4
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	9103      	str	r1, [sp, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	bfbb      	ittet	lt
 800ede8:	425b      	neglt	r3, r3
 800edea:	f042 0202 	orrlt.w	r2, r2, #2
 800edee:	9307      	strge	r3, [sp, #28]
 800edf0:	9307      	strlt	r3, [sp, #28]
 800edf2:	bfb8      	it	lt
 800edf4:	9204      	strlt	r2, [sp, #16]
 800edf6:	7823      	ldrb	r3, [r4, #0]
 800edf8:	2b2e      	cmp	r3, #46	; 0x2e
 800edfa:	d10c      	bne.n	800ee16 <_vfiprintf_r+0x176>
 800edfc:	7863      	ldrb	r3, [r4, #1]
 800edfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ee00:	d135      	bne.n	800ee6e <_vfiprintf_r+0x1ce>
 800ee02:	9b03      	ldr	r3, [sp, #12]
 800ee04:	1d1a      	adds	r2, r3, #4
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	9203      	str	r2, [sp, #12]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	bfb8      	it	lt
 800ee0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee12:	3402      	adds	r4, #2
 800ee14:	9305      	str	r3, [sp, #20]
 800ee16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eefc <_vfiprintf_r+0x25c>
 800ee1a:	7821      	ldrb	r1, [r4, #0]
 800ee1c:	2203      	movs	r2, #3
 800ee1e:	4650      	mov	r0, sl
 800ee20:	f7f1 f9de 	bl	80001e0 <memchr>
 800ee24:	b140      	cbz	r0, 800ee38 <_vfiprintf_r+0x198>
 800ee26:	2340      	movs	r3, #64	; 0x40
 800ee28:	eba0 000a 	sub.w	r0, r0, sl
 800ee2c:	fa03 f000 	lsl.w	r0, r3, r0
 800ee30:	9b04      	ldr	r3, [sp, #16]
 800ee32:	4303      	orrs	r3, r0
 800ee34:	3401      	adds	r4, #1
 800ee36:	9304      	str	r3, [sp, #16]
 800ee38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee3c:	482c      	ldr	r0, [pc, #176]	; (800eef0 <_vfiprintf_r+0x250>)
 800ee3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee42:	2206      	movs	r2, #6
 800ee44:	f7f1 f9cc 	bl	80001e0 <memchr>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d03f      	beq.n	800eecc <_vfiprintf_r+0x22c>
 800ee4c:	4b29      	ldr	r3, [pc, #164]	; (800eef4 <_vfiprintf_r+0x254>)
 800ee4e:	bb1b      	cbnz	r3, 800ee98 <_vfiprintf_r+0x1f8>
 800ee50:	9b03      	ldr	r3, [sp, #12]
 800ee52:	3307      	adds	r3, #7
 800ee54:	f023 0307 	bic.w	r3, r3, #7
 800ee58:	3308      	adds	r3, #8
 800ee5a:	9303      	str	r3, [sp, #12]
 800ee5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee5e:	443b      	add	r3, r7
 800ee60:	9309      	str	r3, [sp, #36]	; 0x24
 800ee62:	e767      	b.n	800ed34 <_vfiprintf_r+0x94>
 800ee64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee68:	460c      	mov	r4, r1
 800ee6a:	2001      	movs	r0, #1
 800ee6c:	e7a5      	b.n	800edba <_vfiprintf_r+0x11a>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	3401      	adds	r4, #1
 800ee72:	9305      	str	r3, [sp, #20]
 800ee74:	4619      	mov	r1, r3
 800ee76:	f04f 0c0a 	mov.w	ip, #10
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee80:	3a30      	subs	r2, #48	; 0x30
 800ee82:	2a09      	cmp	r2, #9
 800ee84:	d903      	bls.n	800ee8e <_vfiprintf_r+0x1ee>
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d0c5      	beq.n	800ee16 <_vfiprintf_r+0x176>
 800ee8a:	9105      	str	r1, [sp, #20]
 800ee8c:	e7c3      	b.n	800ee16 <_vfiprintf_r+0x176>
 800ee8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee92:	4604      	mov	r4, r0
 800ee94:	2301      	movs	r3, #1
 800ee96:	e7f0      	b.n	800ee7a <_vfiprintf_r+0x1da>
 800ee98:	ab03      	add	r3, sp, #12
 800ee9a:	9300      	str	r3, [sp, #0]
 800ee9c:	462a      	mov	r2, r5
 800ee9e:	4b16      	ldr	r3, [pc, #88]	; (800eef8 <_vfiprintf_r+0x258>)
 800eea0:	a904      	add	r1, sp, #16
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7fd fd28 	bl	800c8f8 <_printf_float>
 800eea8:	4607      	mov	r7, r0
 800eeaa:	1c78      	adds	r0, r7, #1
 800eeac:	d1d6      	bne.n	800ee5c <_vfiprintf_r+0x1bc>
 800eeae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eeb0:	07d9      	lsls	r1, r3, #31
 800eeb2:	d405      	bmi.n	800eec0 <_vfiprintf_r+0x220>
 800eeb4:	89ab      	ldrh	r3, [r5, #12]
 800eeb6:	059a      	lsls	r2, r3, #22
 800eeb8:	d402      	bmi.n	800eec0 <_vfiprintf_r+0x220>
 800eeba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eebc:	f7fd fbd0 	bl	800c660 <__retarget_lock_release_recursive>
 800eec0:	89ab      	ldrh	r3, [r5, #12]
 800eec2:	065b      	lsls	r3, r3, #25
 800eec4:	f53f af12 	bmi.w	800ecec <_vfiprintf_r+0x4c>
 800eec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeca:	e711      	b.n	800ecf0 <_vfiprintf_r+0x50>
 800eecc:	ab03      	add	r3, sp, #12
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	462a      	mov	r2, r5
 800eed2:	4b09      	ldr	r3, [pc, #36]	; (800eef8 <_vfiprintf_r+0x258>)
 800eed4:	a904      	add	r1, sp, #16
 800eed6:	4630      	mov	r0, r6
 800eed8:	f7fd ffb2 	bl	800ce40 <_printf_i>
 800eedc:	e7e4      	b.n	800eea8 <_vfiprintf_r+0x208>
 800eede:	bf00      	nop
 800eee0:	08010b8c 	.word	0x08010b8c
 800eee4:	08010bac 	.word	0x08010bac
 800eee8:	08010b6c 	.word	0x08010b6c
 800eeec:	08010dec 	.word	0x08010dec
 800eef0:	08010df6 	.word	0x08010df6
 800eef4:	0800c8f9 	.word	0x0800c8f9
 800eef8:	0800ec7b 	.word	0x0800ec7b
 800eefc:	08010df2 	.word	0x08010df2

0800ef00 <_read_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4d07      	ldr	r5, [pc, #28]	; (800ef20 <_read_r+0x20>)
 800ef04:	4604      	mov	r4, r0
 800ef06:	4608      	mov	r0, r1
 800ef08:	4611      	mov	r1, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	602a      	str	r2, [r5, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	f7f4 f80e 	bl	8002f30 <_read>
 800ef14:	1c43      	adds	r3, r0, #1
 800ef16:	d102      	bne.n	800ef1e <_read_r+0x1e>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	b103      	cbz	r3, 800ef1e <_read_r+0x1e>
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	200054f0 	.word	0x200054f0

0800ef24 <__assert_func>:
 800ef24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef26:	4614      	mov	r4, r2
 800ef28:	461a      	mov	r2, r3
 800ef2a:	4b09      	ldr	r3, [pc, #36]	; (800ef50 <__assert_func+0x2c>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4605      	mov	r5, r0
 800ef30:	68d8      	ldr	r0, [r3, #12]
 800ef32:	b14c      	cbz	r4, 800ef48 <__assert_func+0x24>
 800ef34:	4b07      	ldr	r3, [pc, #28]	; (800ef54 <__assert_func+0x30>)
 800ef36:	9100      	str	r1, [sp, #0]
 800ef38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef3c:	4906      	ldr	r1, [pc, #24]	; (800ef58 <__assert_func+0x34>)
 800ef3e:	462b      	mov	r3, r5
 800ef40:	f000 f80e 	bl	800ef60 <fiprintf>
 800ef44:	f000 f85f 	bl	800f006 <abort>
 800ef48:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <__assert_func+0x38>)
 800ef4a:	461c      	mov	r4, r3
 800ef4c:	e7f3      	b.n	800ef36 <__assert_func+0x12>
 800ef4e:	bf00      	nop
 800ef50:	2000007c 	.word	0x2000007c
 800ef54:	08010dfd 	.word	0x08010dfd
 800ef58:	08010e0a 	.word	0x08010e0a
 800ef5c:	08010e38 	.word	0x08010e38

0800ef60 <fiprintf>:
 800ef60:	b40e      	push	{r1, r2, r3}
 800ef62:	b503      	push	{r0, r1, lr}
 800ef64:	4601      	mov	r1, r0
 800ef66:	ab03      	add	r3, sp, #12
 800ef68:	4805      	ldr	r0, [pc, #20]	; (800ef80 <fiprintf+0x20>)
 800ef6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef6e:	6800      	ldr	r0, [r0, #0]
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	f7ff fe95 	bl	800eca0 <_vfiprintf_r>
 800ef76:	b002      	add	sp, #8
 800ef78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef7c:	b003      	add	sp, #12
 800ef7e:	4770      	bx	lr
 800ef80:	2000007c 	.word	0x2000007c

0800ef84 <_fstat_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4d07      	ldr	r5, [pc, #28]	; (800efa4 <_fstat_r+0x20>)
 800ef88:	2300      	movs	r3, #0
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	4608      	mov	r0, r1
 800ef8e:	4611      	mov	r1, r2
 800ef90:	602b      	str	r3, [r5, #0]
 800ef92:	f7f3 fff6 	bl	8002f82 <_fstat>
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	d102      	bne.n	800efa0 <_fstat_r+0x1c>
 800ef9a:	682b      	ldr	r3, [r5, #0]
 800ef9c:	b103      	cbz	r3, 800efa0 <_fstat_r+0x1c>
 800ef9e:	6023      	str	r3, [r4, #0]
 800efa0:	bd38      	pop	{r3, r4, r5, pc}
 800efa2:	bf00      	nop
 800efa4:	200054f0 	.word	0x200054f0

0800efa8 <_isatty_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d06      	ldr	r5, [pc, #24]	; (800efc4 <_isatty_r+0x1c>)
 800efac:	2300      	movs	r3, #0
 800efae:	4604      	mov	r4, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	602b      	str	r3, [r5, #0]
 800efb4:	f7f3 fff5 	bl	8002fa2 <_isatty>
 800efb8:	1c43      	adds	r3, r0, #1
 800efba:	d102      	bne.n	800efc2 <_isatty_r+0x1a>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	b103      	cbz	r3, 800efc2 <_isatty_r+0x1a>
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	200054f0 	.word	0x200054f0

0800efc8 <__ascii_mbtowc>:
 800efc8:	b082      	sub	sp, #8
 800efca:	b901      	cbnz	r1, 800efce <__ascii_mbtowc+0x6>
 800efcc:	a901      	add	r1, sp, #4
 800efce:	b142      	cbz	r2, 800efe2 <__ascii_mbtowc+0x1a>
 800efd0:	b14b      	cbz	r3, 800efe6 <__ascii_mbtowc+0x1e>
 800efd2:	7813      	ldrb	r3, [r2, #0]
 800efd4:	600b      	str	r3, [r1, #0]
 800efd6:	7812      	ldrb	r2, [r2, #0]
 800efd8:	1e10      	subs	r0, r2, #0
 800efda:	bf18      	it	ne
 800efdc:	2001      	movne	r0, #1
 800efde:	b002      	add	sp, #8
 800efe0:	4770      	bx	lr
 800efe2:	4610      	mov	r0, r2
 800efe4:	e7fb      	b.n	800efde <__ascii_mbtowc+0x16>
 800efe6:	f06f 0001 	mvn.w	r0, #1
 800efea:	e7f8      	b.n	800efde <__ascii_mbtowc+0x16>

0800efec <__ascii_wctomb>:
 800efec:	b149      	cbz	r1, 800f002 <__ascii_wctomb+0x16>
 800efee:	2aff      	cmp	r2, #255	; 0xff
 800eff0:	bf85      	ittet	hi
 800eff2:	238a      	movhi	r3, #138	; 0x8a
 800eff4:	6003      	strhi	r3, [r0, #0]
 800eff6:	700a      	strbls	r2, [r1, #0]
 800eff8:	f04f 30ff 	movhi.w	r0, #4294967295
 800effc:	bf98      	it	ls
 800effe:	2001      	movls	r0, #1
 800f000:	4770      	bx	lr
 800f002:	4608      	mov	r0, r1
 800f004:	4770      	bx	lr

0800f006 <abort>:
 800f006:	b508      	push	{r3, lr}
 800f008:	2006      	movs	r0, #6
 800f00a:	f000 f82b 	bl	800f064 <raise>
 800f00e:	2001      	movs	r0, #1
 800f010:	f7f3 ff84 	bl	8002f1c <_exit>

0800f014 <_raise_r>:
 800f014:	291f      	cmp	r1, #31
 800f016:	b538      	push	{r3, r4, r5, lr}
 800f018:	4604      	mov	r4, r0
 800f01a:	460d      	mov	r5, r1
 800f01c:	d904      	bls.n	800f028 <_raise_r+0x14>
 800f01e:	2316      	movs	r3, #22
 800f020:	6003      	str	r3, [r0, #0]
 800f022:	f04f 30ff 	mov.w	r0, #4294967295
 800f026:	bd38      	pop	{r3, r4, r5, pc}
 800f028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f02a:	b112      	cbz	r2, 800f032 <_raise_r+0x1e>
 800f02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f030:	b94b      	cbnz	r3, 800f046 <_raise_r+0x32>
 800f032:	4620      	mov	r0, r4
 800f034:	f000 f830 	bl	800f098 <_getpid_r>
 800f038:	462a      	mov	r2, r5
 800f03a:	4601      	mov	r1, r0
 800f03c:	4620      	mov	r0, r4
 800f03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f042:	f000 b817 	b.w	800f074 <_kill_r>
 800f046:	2b01      	cmp	r3, #1
 800f048:	d00a      	beq.n	800f060 <_raise_r+0x4c>
 800f04a:	1c59      	adds	r1, r3, #1
 800f04c:	d103      	bne.n	800f056 <_raise_r+0x42>
 800f04e:	2316      	movs	r3, #22
 800f050:	6003      	str	r3, [r0, #0]
 800f052:	2001      	movs	r0, #1
 800f054:	e7e7      	b.n	800f026 <_raise_r+0x12>
 800f056:	2400      	movs	r4, #0
 800f058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f05c:	4628      	mov	r0, r5
 800f05e:	4798      	blx	r3
 800f060:	2000      	movs	r0, #0
 800f062:	e7e0      	b.n	800f026 <_raise_r+0x12>

0800f064 <raise>:
 800f064:	4b02      	ldr	r3, [pc, #8]	; (800f070 <raise+0xc>)
 800f066:	4601      	mov	r1, r0
 800f068:	6818      	ldr	r0, [r3, #0]
 800f06a:	f7ff bfd3 	b.w	800f014 <_raise_r>
 800f06e:	bf00      	nop
 800f070:	2000007c 	.word	0x2000007c

0800f074 <_kill_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d07      	ldr	r5, [pc, #28]	; (800f094 <_kill_r+0x20>)
 800f078:	2300      	movs	r3, #0
 800f07a:	4604      	mov	r4, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	4611      	mov	r1, r2
 800f080:	602b      	str	r3, [r5, #0]
 800f082:	f7f3 ff3b 	bl	8002efc <_kill>
 800f086:	1c43      	adds	r3, r0, #1
 800f088:	d102      	bne.n	800f090 <_kill_r+0x1c>
 800f08a:	682b      	ldr	r3, [r5, #0]
 800f08c:	b103      	cbz	r3, 800f090 <_kill_r+0x1c>
 800f08e:	6023      	str	r3, [r4, #0]
 800f090:	bd38      	pop	{r3, r4, r5, pc}
 800f092:	bf00      	nop
 800f094:	200054f0 	.word	0x200054f0

0800f098 <_getpid_r>:
 800f098:	f7f3 bf28 	b.w	8002eec <_getpid>
 800f09c:	0000      	movs	r0, r0
	...

0800f0a0 <cos>:
 800f0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0a2:	ec53 2b10 	vmov	r2, r3, d0
 800f0a6:	4826      	ldr	r0, [pc, #152]	; (800f140 <cos+0xa0>)
 800f0a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f0ac:	4281      	cmp	r1, r0
 800f0ae:	dc06      	bgt.n	800f0be <cos+0x1e>
 800f0b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f138 <cos+0x98>
 800f0b4:	b005      	add	sp, #20
 800f0b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0ba:	f000 bb79 	b.w	800f7b0 <__kernel_cos>
 800f0be:	4821      	ldr	r0, [pc, #132]	; (800f144 <cos+0xa4>)
 800f0c0:	4281      	cmp	r1, r0
 800f0c2:	dd09      	ble.n	800f0d8 <cos+0x38>
 800f0c4:	ee10 0a10 	vmov	r0, s0
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	f7f1 f8dd 	bl	8000288 <__aeabi_dsub>
 800f0ce:	ec41 0b10 	vmov	d0, r0, r1
 800f0d2:	b005      	add	sp, #20
 800f0d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0d8:	4668      	mov	r0, sp
 800f0da:	f000 f95d 	bl	800f398 <__ieee754_rem_pio2>
 800f0de:	f000 0003 	and.w	r0, r0, #3
 800f0e2:	2801      	cmp	r0, #1
 800f0e4:	d00b      	beq.n	800f0fe <cos+0x5e>
 800f0e6:	2802      	cmp	r0, #2
 800f0e8:	d016      	beq.n	800f118 <cos+0x78>
 800f0ea:	b9e0      	cbnz	r0, 800f126 <cos+0x86>
 800f0ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f0f0:	ed9d 0b00 	vldr	d0, [sp]
 800f0f4:	f000 fb5c 	bl	800f7b0 <__kernel_cos>
 800f0f8:	ec51 0b10 	vmov	r0, r1, d0
 800f0fc:	e7e7      	b.n	800f0ce <cos+0x2e>
 800f0fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f102:	ed9d 0b00 	vldr	d0, [sp]
 800f106:	f000 ff6b 	bl	800ffe0 <__kernel_sin>
 800f10a:	ec53 2b10 	vmov	r2, r3, d0
 800f10e:	ee10 0a10 	vmov	r0, s0
 800f112:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f116:	e7da      	b.n	800f0ce <cos+0x2e>
 800f118:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f11c:	ed9d 0b00 	vldr	d0, [sp]
 800f120:	f000 fb46 	bl	800f7b0 <__kernel_cos>
 800f124:	e7f1      	b.n	800f10a <cos+0x6a>
 800f126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f12a:	ed9d 0b00 	vldr	d0, [sp]
 800f12e:	2001      	movs	r0, #1
 800f130:	f000 ff56 	bl	800ffe0 <__kernel_sin>
 800f134:	e7e0      	b.n	800f0f8 <cos+0x58>
 800f136:	bf00      	nop
	...
 800f140:	3fe921fb 	.word	0x3fe921fb
 800f144:	7fefffff 	.word	0x7fefffff

0800f148 <sin>:
 800f148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f14a:	ec53 2b10 	vmov	r2, r3, d0
 800f14e:	4828      	ldr	r0, [pc, #160]	; (800f1f0 <sin+0xa8>)
 800f150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f154:	4281      	cmp	r1, r0
 800f156:	dc07      	bgt.n	800f168 <sin+0x20>
 800f158:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f1e8 <sin+0xa0>
 800f15c:	2000      	movs	r0, #0
 800f15e:	b005      	add	sp, #20
 800f160:	f85d eb04 	ldr.w	lr, [sp], #4
 800f164:	f000 bf3c 	b.w	800ffe0 <__kernel_sin>
 800f168:	4822      	ldr	r0, [pc, #136]	; (800f1f4 <sin+0xac>)
 800f16a:	4281      	cmp	r1, r0
 800f16c:	dd09      	ble.n	800f182 <sin+0x3a>
 800f16e:	ee10 0a10 	vmov	r0, s0
 800f172:	4619      	mov	r1, r3
 800f174:	f7f1 f888 	bl	8000288 <__aeabi_dsub>
 800f178:	ec41 0b10 	vmov	d0, r0, r1
 800f17c:	b005      	add	sp, #20
 800f17e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f182:	4668      	mov	r0, sp
 800f184:	f000 f908 	bl	800f398 <__ieee754_rem_pio2>
 800f188:	f000 0003 	and.w	r0, r0, #3
 800f18c:	2801      	cmp	r0, #1
 800f18e:	d00c      	beq.n	800f1aa <sin+0x62>
 800f190:	2802      	cmp	r0, #2
 800f192:	d011      	beq.n	800f1b8 <sin+0x70>
 800f194:	b9f0      	cbnz	r0, 800f1d4 <sin+0x8c>
 800f196:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f19a:	ed9d 0b00 	vldr	d0, [sp]
 800f19e:	2001      	movs	r0, #1
 800f1a0:	f000 ff1e 	bl	800ffe0 <__kernel_sin>
 800f1a4:	ec51 0b10 	vmov	r0, r1, d0
 800f1a8:	e7e6      	b.n	800f178 <sin+0x30>
 800f1aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1ae:	ed9d 0b00 	vldr	d0, [sp]
 800f1b2:	f000 fafd 	bl	800f7b0 <__kernel_cos>
 800f1b6:	e7f5      	b.n	800f1a4 <sin+0x5c>
 800f1b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1bc:	ed9d 0b00 	vldr	d0, [sp]
 800f1c0:	2001      	movs	r0, #1
 800f1c2:	f000 ff0d 	bl	800ffe0 <__kernel_sin>
 800f1c6:	ec53 2b10 	vmov	r2, r3, d0
 800f1ca:	ee10 0a10 	vmov	r0, s0
 800f1ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f1d2:	e7d1      	b.n	800f178 <sin+0x30>
 800f1d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1d8:	ed9d 0b00 	vldr	d0, [sp]
 800f1dc:	f000 fae8 	bl	800f7b0 <__kernel_cos>
 800f1e0:	e7f1      	b.n	800f1c6 <sin+0x7e>
 800f1e2:	bf00      	nop
 800f1e4:	f3af 8000 	nop.w
	...
 800f1f0:	3fe921fb 	.word	0x3fe921fb
 800f1f4:	7fefffff 	.word	0x7fefffff

0800f1f8 <atan2>:
 800f1f8:	f000 b802 	b.w	800f200 <__ieee754_atan2>
 800f1fc:	0000      	movs	r0, r0
	...

0800f200 <__ieee754_atan2>:
 800f200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f204:	ec57 6b11 	vmov	r6, r7, d1
 800f208:	4273      	negs	r3, r6
 800f20a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800f390 <__ieee754_atan2+0x190>
 800f20e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f212:	4333      	orrs	r3, r6
 800f214:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f218:	4573      	cmp	r3, lr
 800f21a:	ec51 0b10 	vmov	r0, r1, d0
 800f21e:	ee11 8a10 	vmov	r8, s2
 800f222:	d80a      	bhi.n	800f23a <__ieee754_atan2+0x3a>
 800f224:	4244      	negs	r4, r0
 800f226:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f22a:	4304      	orrs	r4, r0
 800f22c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f230:	4574      	cmp	r4, lr
 800f232:	ee10 9a10 	vmov	r9, s0
 800f236:	468c      	mov	ip, r1
 800f238:	d907      	bls.n	800f24a <__ieee754_atan2+0x4a>
 800f23a:	4632      	mov	r2, r6
 800f23c:	463b      	mov	r3, r7
 800f23e:	f7f1 f825 	bl	800028c <__adddf3>
 800f242:	ec41 0b10 	vmov	d0, r0, r1
 800f246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f24a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f24e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f252:	4334      	orrs	r4, r6
 800f254:	d103      	bne.n	800f25e <__ieee754_atan2+0x5e>
 800f256:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f25a:	f000 bf81 	b.w	8010160 <atan>
 800f25e:	17bc      	asrs	r4, r7, #30
 800f260:	f004 0402 	and.w	r4, r4, #2
 800f264:	ea53 0909 	orrs.w	r9, r3, r9
 800f268:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f26c:	d107      	bne.n	800f27e <__ieee754_atan2+0x7e>
 800f26e:	2c02      	cmp	r4, #2
 800f270:	d060      	beq.n	800f334 <__ieee754_atan2+0x134>
 800f272:	2c03      	cmp	r4, #3
 800f274:	d1e5      	bne.n	800f242 <__ieee754_atan2+0x42>
 800f276:	a142      	add	r1, pc, #264	; (adr r1, 800f380 <__ieee754_atan2+0x180>)
 800f278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f27c:	e7e1      	b.n	800f242 <__ieee754_atan2+0x42>
 800f27e:	ea52 0808 	orrs.w	r8, r2, r8
 800f282:	d106      	bne.n	800f292 <__ieee754_atan2+0x92>
 800f284:	f1bc 0f00 	cmp.w	ip, #0
 800f288:	da5f      	bge.n	800f34a <__ieee754_atan2+0x14a>
 800f28a:	a13f      	add	r1, pc, #252	; (adr r1, 800f388 <__ieee754_atan2+0x188>)
 800f28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f290:	e7d7      	b.n	800f242 <__ieee754_atan2+0x42>
 800f292:	4572      	cmp	r2, lr
 800f294:	d10f      	bne.n	800f2b6 <__ieee754_atan2+0xb6>
 800f296:	4293      	cmp	r3, r2
 800f298:	f104 34ff 	add.w	r4, r4, #4294967295
 800f29c:	d107      	bne.n	800f2ae <__ieee754_atan2+0xae>
 800f29e:	2c02      	cmp	r4, #2
 800f2a0:	d84c      	bhi.n	800f33c <__ieee754_atan2+0x13c>
 800f2a2:	4b35      	ldr	r3, [pc, #212]	; (800f378 <__ieee754_atan2+0x178>)
 800f2a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f2a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f2ac:	e7c9      	b.n	800f242 <__ieee754_atan2+0x42>
 800f2ae:	2c02      	cmp	r4, #2
 800f2b0:	d848      	bhi.n	800f344 <__ieee754_atan2+0x144>
 800f2b2:	4b32      	ldr	r3, [pc, #200]	; (800f37c <__ieee754_atan2+0x17c>)
 800f2b4:	e7f6      	b.n	800f2a4 <__ieee754_atan2+0xa4>
 800f2b6:	4573      	cmp	r3, lr
 800f2b8:	d0e4      	beq.n	800f284 <__ieee754_atan2+0x84>
 800f2ba:	1a9b      	subs	r3, r3, r2
 800f2bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f2c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f2c4:	da1e      	bge.n	800f304 <__ieee754_atan2+0x104>
 800f2c6:	2f00      	cmp	r7, #0
 800f2c8:	da01      	bge.n	800f2ce <__ieee754_atan2+0xce>
 800f2ca:	323c      	adds	r2, #60	; 0x3c
 800f2cc:	db1e      	blt.n	800f30c <__ieee754_atan2+0x10c>
 800f2ce:	4632      	mov	r2, r6
 800f2d0:	463b      	mov	r3, r7
 800f2d2:	f7f1 fabb 	bl	800084c <__aeabi_ddiv>
 800f2d6:	ec41 0b10 	vmov	d0, r0, r1
 800f2da:	f001 f8e1 	bl	80104a0 <fabs>
 800f2de:	f000 ff3f 	bl	8010160 <atan>
 800f2e2:	ec51 0b10 	vmov	r0, r1, d0
 800f2e6:	2c01      	cmp	r4, #1
 800f2e8:	d013      	beq.n	800f312 <__ieee754_atan2+0x112>
 800f2ea:	2c02      	cmp	r4, #2
 800f2ec:	d015      	beq.n	800f31a <__ieee754_atan2+0x11a>
 800f2ee:	2c00      	cmp	r4, #0
 800f2f0:	d0a7      	beq.n	800f242 <__ieee754_atan2+0x42>
 800f2f2:	a319      	add	r3, pc, #100	; (adr r3, 800f358 <__ieee754_atan2+0x158>)
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	f7f0 ffc6 	bl	8000288 <__aeabi_dsub>
 800f2fc:	a318      	add	r3, pc, #96	; (adr r3, 800f360 <__ieee754_atan2+0x160>)
 800f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f302:	e014      	b.n	800f32e <__ieee754_atan2+0x12e>
 800f304:	a118      	add	r1, pc, #96	; (adr r1, 800f368 <__ieee754_atan2+0x168>)
 800f306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f30a:	e7ec      	b.n	800f2e6 <__ieee754_atan2+0xe6>
 800f30c:	2000      	movs	r0, #0
 800f30e:	2100      	movs	r1, #0
 800f310:	e7e9      	b.n	800f2e6 <__ieee754_atan2+0xe6>
 800f312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f316:	4619      	mov	r1, r3
 800f318:	e793      	b.n	800f242 <__ieee754_atan2+0x42>
 800f31a:	a30f      	add	r3, pc, #60	; (adr r3, 800f358 <__ieee754_atan2+0x158>)
 800f31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f320:	f7f0 ffb2 	bl	8000288 <__aeabi_dsub>
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	a10d      	add	r1, pc, #52	; (adr r1, 800f360 <__ieee754_atan2+0x160>)
 800f32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f32e:	f7f0 ffab 	bl	8000288 <__aeabi_dsub>
 800f332:	e786      	b.n	800f242 <__ieee754_atan2+0x42>
 800f334:	a10a      	add	r1, pc, #40	; (adr r1, 800f360 <__ieee754_atan2+0x160>)
 800f336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f33a:	e782      	b.n	800f242 <__ieee754_atan2+0x42>
 800f33c:	a10c      	add	r1, pc, #48	; (adr r1, 800f370 <__ieee754_atan2+0x170>)
 800f33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f342:	e77e      	b.n	800f242 <__ieee754_atan2+0x42>
 800f344:	2000      	movs	r0, #0
 800f346:	2100      	movs	r1, #0
 800f348:	e77b      	b.n	800f242 <__ieee754_atan2+0x42>
 800f34a:	a107      	add	r1, pc, #28	; (adr r1, 800f368 <__ieee754_atan2+0x168>)
 800f34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f350:	e777      	b.n	800f242 <__ieee754_atan2+0x42>
 800f352:	bf00      	nop
 800f354:	f3af 8000 	nop.w
 800f358:	33145c07 	.word	0x33145c07
 800f35c:	3ca1a626 	.word	0x3ca1a626
 800f360:	54442d18 	.word	0x54442d18
 800f364:	400921fb 	.word	0x400921fb
 800f368:	54442d18 	.word	0x54442d18
 800f36c:	3ff921fb 	.word	0x3ff921fb
 800f370:	54442d18 	.word	0x54442d18
 800f374:	3fe921fb 	.word	0x3fe921fb
 800f378:	08010f48 	.word	0x08010f48
 800f37c:	08010f60 	.word	0x08010f60
 800f380:	54442d18 	.word	0x54442d18
 800f384:	c00921fb 	.word	0xc00921fb
 800f388:	54442d18 	.word	0x54442d18
 800f38c:	bff921fb 	.word	0xbff921fb
 800f390:	7ff00000 	.word	0x7ff00000
 800f394:	00000000 	.word	0x00000000

0800f398 <__ieee754_rem_pio2>:
 800f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	ed2d 8b02 	vpush	{d8}
 800f3a0:	ec55 4b10 	vmov	r4, r5, d0
 800f3a4:	4bca      	ldr	r3, [pc, #808]	; (800f6d0 <__ieee754_rem_pio2+0x338>)
 800f3a6:	b08b      	sub	sp, #44	; 0x2c
 800f3a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f3ac:	4598      	cmp	r8, r3
 800f3ae:	4682      	mov	sl, r0
 800f3b0:	9502      	str	r5, [sp, #8]
 800f3b2:	dc08      	bgt.n	800f3c6 <__ieee754_rem_pio2+0x2e>
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	ed80 0b00 	vstr	d0, [r0]
 800f3bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f3c0:	f04f 0b00 	mov.w	fp, #0
 800f3c4:	e028      	b.n	800f418 <__ieee754_rem_pio2+0x80>
 800f3c6:	4bc3      	ldr	r3, [pc, #780]	; (800f6d4 <__ieee754_rem_pio2+0x33c>)
 800f3c8:	4598      	cmp	r8, r3
 800f3ca:	dc78      	bgt.n	800f4be <__ieee754_rem_pio2+0x126>
 800f3cc:	9b02      	ldr	r3, [sp, #8]
 800f3ce:	4ec2      	ldr	r6, [pc, #776]	; (800f6d8 <__ieee754_rem_pio2+0x340>)
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	ee10 0a10 	vmov	r0, s0
 800f3d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800f698 <__ieee754_rem_pio2+0x300>)
 800f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3dc:	4629      	mov	r1, r5
 800f3de:	dd39      	ble.n	800f454 <__ieee754_rem_pio2+0xbc>
 800f3e0:	f7f0 ff52 	bl	8000288 <__aeabi_dsub>
 800f3e4:	45b0      	cmp	r8, r6
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	460d      	mov	r5, r1
 800f3ea:	d01b      	beq.n	800f424 <__ieee754_rem_pio2+0x8c>
 800f3ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800f6a0 <__ieee754_rem_pio2+0x308>)
 800f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f2:	f7f0 ff49 	bl	8000288 <__aeabi_dsub>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	e9ca 2300 	strd	r2, r3, [sl]
 800f3fe:	4620      	mov	r0, r4
 800f400:	4629      	mov	r1, r5
 800f402:	f7f0 ff41 	bl	8000288 <__aeabi_dsub>
 800f406:	a3a6      	add	r3, pc, #664	; (adr r3, 800f6a0 <__ieee754_rem_pio2+0x308>)
 800f408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40c:	f7f0 ff3c 	bl	8000288 <__aeabi_dsub>
 800f410:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f414:	f04f 0b01 	mov.w	fp, #1
 800f418:	4658      	mov	r0, fp
 800f41a:	b00b      	add	sp, #44	; 0x2c
 800f41c:	ecbd 8b02 	vpop	{d8}
 800f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f424:	a3a0      	add	r3, pc, #640	; (adr r3, 800f6a8 <__ieee754_rem_pio2+0x310>)
 800f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42a:	f7f0 ff2d 	bl	8000288 <__aeabi_dsub>
 800f42e:	a3a0      	add	r3, pc, #640	; (adr r3, 800f6b0 <__ieee754_rem_pio2+0x318>)
 800f430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f434:	4604      	mov	r4, r0
 800f436:	460d      	mov	r5, r1
 800f438:	f7f0 ff26 	bl	8000288 <__aeabi_dsub>
 800f43c:	4602      	mov	r2, r0
 800f43e:	460b      	mov	r3, r1
 800f440:	e9ca 2300 	strd	r2, r3, [sl]
 800f444:	4620      	mov	r0, r4
 800f446:	4629      	mov	r1, r5
 800f448:	f7f0 ff1e 	bl	8000288 <__aeabi_dsub>
 800f44c:	a398      	add	r3, pc, #608	; (adr r3, 800f6b0 <__ieee754_rem_pio2+0x318>)
 800f44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f452:	e7db      	b.n	800f40c <__ieee754_rem_pio2+0x74>
 800f454:	f7f0 ff1a 	bl	800028c <__adddf3>
 800f458:	45b0      	cmp	r8, r6
 800f45a:	4604      	mov	r4, r0
 800f45c:	460d      	mov	r5, r1
 800f45e:	d016      	beq.n	800f48e <__ieee754_rem_pio2+0xf6>
 800f460:	a38f      	add	r3, pc, #572	; (adr r3, 800f6a0 <__ieee754_rem_pio2+0x308>)
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	f7f0 ff11 	bl	800028c <__adddf3>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	e9ca 2300 	strd	r2, r3, [sl]
 800f472:	4620      	mov	r0, r4
 800f474:	4629      	mov	r1, r5
 800f476:	f7f0 ff07 	bl	8000288 <__aeabi_dsub>
 800f47a:	a389      	add	r3, pc, #548	; (adr r3, 800f6a0 <__ieee754_rem_pio2+0x308>)
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	f7f0 ff04 	bl	800028c <__adddf3>
 800f484:	f04f 3bff 	mov.w	fp, #4294967295
 800f488:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f48c:	e7c4      	b.n	800f418 <__ieee754_rem_pio2+0x80>
 800f48e:	a386      	add	r3, pc, #536	; (adr r3, 800f6a8 <__ieee754_rem_pio2+0x310>)
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	f7f0 fefa 	bl	800028c <__adddf3>
 800f498:	a385      	add	r3, pc, #532	; (adr r3, 800f6b0 <__ieee754_rem_pio2+0x318>)
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	4604      	mov	r4, r0
 800f4a0:	460d      	mov	r5, r1
 800f4a2:	f7f0 fef3 	bl	800028c <__adddf3>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	e9ca 2300 	strd	r2, r3, [sl]
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	f7f0 fee9 	bl	8000288 <__aeabi_dsub>
 800f4b6:	a37e      	add	r3, pc, #504	; (adr r3, 800f6b0 <__ieee754_rem_pio2+0x318>)
 800f4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4bc:	e7e0      	b.n	800f480 <__ieee754_rem_pio2+0xe8>
 800f4be:	4b87      	ldr	r3, [pc, #540]	; (800f6dc <__ieee754_rem_pio2+0x344>)
 800f4c0:	4598      	cmp	r8, r3
 800f4c2:	f300 80d9 	bgt.w	800f678 <__ieee754_rem_pio2+0x2e0>
 800f4c6:	f000 ffeb 	bl	80104a0 <fabs>
 800f4ca:	ec55 4b10 	vmov	r4, r5, d0
 800f4ce:	ee10 0a10 	vmov	r0, s0
 800f4d2:	a379      	add	r3, pc, #484	; (adr r3, 800f6b8 <__ieee754_rem_pio2+0x320>)
 800f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7f1 f88d 	bl	80005f8 <__aeabi_dmul>
 800f4de:	4b80      	ldr	r3, [pc, #512]	; (800f6e0 <__ieee754_rem_pio2+0x348>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f7f0 fed3 	bl	800028c <__adddf3>
 800f4e6:	f7f1 fb37 	bl	8000b58 <__aeabi_d2iz>
 800f4ea:	4683      	mov	fp, r0
 800f4ec:	f7f1 f81a 	bl	8000524 <__aeabi_i2d>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	ec43 2b18 	vmov	d8, r2, r3
 800f4f8:	a367      	add	r3, pc, #412	; (adr r3, 800f698 <__ieee754_rem_pio2+0x300>)
 800f4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fe:	f7f1 f87b 	bl	80005f8 <__aeabi_dmul>
 800f502:	4602      	mov	r2, r0
 800f504:	460b      	mov	r3, r1
 800f506:	4620      	mov	r0, r4
 800f508:	4629      	mov	r1, r5
 800f50a:	f7f0 febd 	bl	8000288 <__aeabi_dsub>
 800f50e:	a364      	add	r3, pc, #400	; (adr r3, 800f6a0 <__ieee754_rem_pio2+0x308>)
 800f510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f514:	4606      	mov	r6, r0
 800f516:	460f      	mov	r7, r1
 800f518:	ec51 0b18 	vmov	r0, r1, d8
 800f51c:	f7f1 f86c 	bl	80005f8 <__aeabi_dmul>
 800f520:	f1bb 0f1f 	cmp.w	fp, #31
 800f524:	4604      	mov	r4, r0
 800f526:	460d      	mov	r5, r1
 800f528:	dc0d      	bgt.n	800f546 <__ieee754_rem_pio2+0x1ae>
 800f52a:	4b6e      	ldr	r3, [pc, #440]	; (800f6e4 <__ieee754_rem_pio2+0x34c>)
 800f52c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f534:	4543      	cmp	r3, r8
 800f536:	d006      	beq.n	800f546 <__ieee754_rem_pio2+0x1ae>
 800f538:	4622      	mov	r2, r4
 800f53a:	462b      	mov	r3, r5
 800f53c:	4630      	mov	r0, r6
 800f53e:	4639      	mov	r1, r7
 800f540:	f7f0 fea2 	bl	8000288 <__aeabi_dsub>
 800f544:	e00f      	b.n	800f566 <__ieee754_rem_pio2+0x1ce>
 800f546:	462b      	mov	r3, r5
 800f548:	4622      	mov	r2, r4
 800f54a:	4630      	mov	r0, r6
 800f54c:	4639      	mov	r1, r7
 800f54e:	f7f0 fe9b 	bl	8000288 <__aeabi_dsub>
 800f552:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f556:	9303      	str	r3, [sp, #12]
 800f558:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f55c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f560:	f1b8 0f10 	cmp.w	r8, #16
 800f564:	dc02      	bgt.n	800f56c <__ieee754_rem_pio2+0x1d4>
 800f566:	e9ca 0100 	strd	r0, r1, [sl]
 800f56a:	e039      	b.n	800f5e0 <__ieee754_rem_pio2+0x248>
 800f56c:	a34e      	add	r3, pc, #312	; (adr r3, 800f6a8 <__ieee754_rem_pio2+0x310>)
 800f56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f572:	ec51 0b18 	vmov	r0, r1, d8
 800f576:	f7f1 f83f 	bl	80005f8 <__aeabi_dmul>
 800f57a:	4604      	mov	r4, r0
 800f57c:	460d      	mov	r5, r1
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	4630      	mov	r0, r6
 800f584:	4639      	mov	r1, r7
 800f586:	f7f0 fe7f 	bl	8000288 <__aeabi_dsub>
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	4680      	mov	r8, r0
 800f590:	4689      	mov	r9, r1
 800f592:	4630      	mov	r0, r6
 800f594:	4639      	mov	r1, r7
 800f596:	f7f0 fe77 	bl	8000288 <__aeabi_dsub>
 800f59a:	4622      	mov	r2, r4
 800f59c:	462b      	mov	r3, r5
 800f59e:	f7f0 fe73 	bl	8000288 <__aeabi_dsub>
 800f5a2:	a343      	add	r3, pc, #268	; (adr r3, 800f6b0 <__ieee754_rem_pio2+0x318>)
 800f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	460d      	mov	r5, r1
 800f5ac:	ec51 0b18 	vmov	r0, r1, d8
 800f5b0:	f7f1 f822 	bl	80005f8 <__aeabi_dmul>
 800f5b4:	4622      	mov	r2, r4
 800f5b6:	462b      	mov	r3, r5
 800f5b8:	f7f0 fe66 	bl	8000288 <__aeabi_dsub>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	460d      	mov	r5, r1
 800f5c4:	4640      	mov	r0, r8
 800f5c6:	4649      	mov	r1, r9
 800f5c8:	f7f0 fe5e 	bl	8000288 <__aeabi_dsub>
 800f5cc:	9a03      	ldr	r2, [sp, #12]
 800f5ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f5d2:	1ad3      	subs	r3, r2, r3
 800f5d4:	2b31      	cmp	r3, #49	; 0x31
 800f5d6:	dc24      	bgt.n	800f622 <__ieee754_rem_pio2+0x28a>
 800f5d8:	e9ca 0100 	strd	r0, r1, [sl]
 800f5dc:	4646      	mov	r6, r8
 800f5de:	464f      	mov	r7, r9
 800f5e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	4642      	mov	r2, r8
 800f5e8:	464b      	mov	r3, r9
 800f5ea:	4639      	mov	r1, r7
 800f5ec:	f7f0 fe4c 	bl	8000288 <__aeabi_dsub>
 800f5f0:	462b      	mov	r3, r5
 800f5f2:	4622      	mov	r2, r4
 800f5f4:	f7f0 fe48 	bl	8000288 <__aeabi_dsub>
 800f5f8:	9b02      	ldr	r3, [sp, #8]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f600:	f6bf af0a 	bge.w	800f418 <__ieee754_rem_pio2+0x80>
 800f604:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f608:	f8ca 3004 	str.w	r3, [sl, #4]
 800f60c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f610:	f8ca 8000 	str.w	r8, [sl]
 800f614:	f8ca 0008 	str.w	r0, [sl, #8]
 800f618:	f8ca 300c 	str.w	r3, [sl, #12]
 800f61c:	f1cb 0b00 	rsb	fp, fp, #0
 800f620:	e6fa      	b.n	800f418 <__ieee754_rem_pio2+0x80>
 800f622:	a327      	add	r3, pc, #156	; (adr r3, 800f6c0 <__ieee754_rem_pio2+0x328>)
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	ec51 0b18 	vmov	r0, r1, d8
 800f62c:	f7f0 ffe4 	bl	80005f8 <__aeabi_dmul>
 800f630:	4604      	mov	r4, r0
 800f632:	460d      	mov	r5, r1
 800f634:	4602      	mov	r2, r0
 800f636:	460b      	mov	r3, r1
 800f638:	4640      	mov	r0, r8
 800f63a:	4649      	mov	r1, r9
 800f63c:	f7f0 fe24 	bl	8000288 <__aeabi_dsub>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	4606      	mov	r6, r0
 800f646:	460f      	mov	r7, r1
 800f648:	4640      	mov	r0, r8
 800f64a:	4649      	mov	r1, r9
 800f64c:	f7f0 fe1c 	bl	8000288 <__aeabi_dsub>
 800f650:	4622      	mov	r2, r4
 800f652:	462b      	mov	r3, r5
 800f654:	f7f0 fe18 	bl	8000288 <__aeabi_dsub>
 800f658:	a31b      	add	r3, pc, #108	; (adr r3, 800f6c8 <__ieee754_rem_pio2+0x330>)
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	4604      	mov	r4, r0
 800f660:	460d      	mov	r5, r1
 800f662:	ec51 0b18 	vmov	r0, r1, d8
 800f666:	f7f0 ffc7 	bl	80005f8 <__aeabi_dmul>
 800f66a:	4622      	mov	r2, r4
 800f66c:	462b      	mov	r3, r5
 800f66e:	f7f0 fe0b 	bl	8000288 <__aeabi_dsub>
 800f672:	4604      	mov	r4, r0
 800f674:	460d      	mov	r5, r1
 800f676:	e75f      	b.n	800f538 <__ieee754_rem_pio2+0x1a0>
 800f678:	4b1b      	ldr	r3, [pc, #108]	; (800f6e8 <__ieee754_rem_pio2+0x350>)
 800f67a:	4598      	cmp	r8, r3
 800f67c:	dd36      	ble.n	800f6ec <__ieee754_rem_pio2+0x354>
 800f67e:	ee10 2a10 	vmov	r2, s0
 800f682:	462b      	mov	r3, r5
 800f684:	4620      	mov	r0, r4
 800f686:	4629      	mov	r1, r5
 800f688:	f7f0 fdfe 	bl	8000288 <__aeabi_dsub>
 800f68c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f690:	e9ca 0100 	strd	r0, r1, [sl]
 800f694:	e694      	b.n	800f3c0 <__ieee754_rem_pio2+0x28>
 800f696:	bf00      	nop
 800f698:	54400000 	.word	0x54400000
 800f69c:	3ff921fb 	.word	0x3ff921fb
 800f6a0:	1a626331 	.word	0x1a626331
 800f6a4:	3dd0b461 	.word	0x3dd0b461
 800f6a8:	1a600000 	.word	0x1a600000
 800f6ac:	3dd0b461 	.word	0x3dd0b461
 800f6b0:	2e037073 	.word	0x2e037073
 800f6b4:	3ba3198a 	.word	0x3ba3198a
 800f6b8:	6dc9c883 	.word	0x6dc9c883
 800f6bc:	3fe45f30 	.word	0x3fe45f30
 800f6c0:	2e000000 	.word	0x2e000000
 800f6c4:	3ba3198a 	.word	0x3ba3198a
 800f6c8:	252049c1 	.word	0x252049c1
 800f6cc:	397b839a 	.word	0x397b839a
 800f6d0:	3fe921fb 	.word	0x3fe921fb
 800f6d4:	4002d97b 	.word	0x4002d97b
 800f6d8:	3ff921fb 	.word	0x3ff921fb
 800f6dc:	413921fb 	.word	0x413921fb
 800f6e0:	3fe00000 	.word	0x3fe00000
 800f6e4:	08010f78 	.word	0x08010f78
 800f6e8:	7fefffff 	.word	0x7fefffff
 800f6ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f6f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f6f4:	ee10 0a10 	vmov	r0, s0
 800f6f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f6fc:	ee10 6a10 	vmov	r6, s0
 800f700:	460f      	mov	r7, r1
 800f702:	f7f1 fa29 	bl	8000b58 <__aeabi_d2iz>
 800f706:	f7f0 ff0d 	bl	8000524 <__aeabi_i2d>
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	4630      	mov	r0, r6
 800f710:	4639      	mov	r1, r7
 800f712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f716:	f7f0 fdb7 	bl	8000288 <__aeabi_dsub>
 800f71a:	4b23      	ldr	r3, [pc, #140]	; (800f7a8 <__ieee754_rem_pio2+0x410>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	f7f0 ff6b 	bl	80005f8 <__aeabi_dmul>
 800f722:	460f      	mov	r7, r1
 800f724:	4606      	mov	r6, r0
 800f726:	f7f1 fa17 	bl	8000b58 <__aeabi_d2iz>
 800f72a:	f7f0 fefb 	bl	8000524 <__aeabi_i2d>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4630      	mov	r0, r6
 800f734:	4639      	mov	r1, r7
 800f736:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f73a:	f7f0 fda5 	bl	8000288 <__aeabi_dsub>
 800f73e:	4b1a      	ldr	r3, [pc, #104]	; (800f7a8 <__ieee754_rem_pio2+0x410>)
 800f740:	2200      	movs	r2, #0
 800f742:	f7f0 ff59 	bl	80005f8 <__aeabi_dmul>
 800f746:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f74a:	ad04      	add	r5, sp, #16
 800f74c:	f04f 0803 	mov.w	r8, #3
 800f750:	46a9      	mov	r9, r5
 800f752:	2600      	movs	r6, #0
 800f754:	2700      	movs	r7, #0
 800f756:	4632      	mov	r2, r6
 800f758:	463b      	mov	r3, r7
 800f75a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f75e:	46c3      	mov	fp, r8
 800f760:	3d08      	subs	r5, #8
 800f762:	f108 38ff 	add.w	r8, r8, #4294967295
 800f766:	f7f1 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d1f3      	bne.n	800f756 <__ieee754_rem_pio2+0x3be>
 800f76e:	4b0f      	ldr	r3, [pc, #60]	; (800f7ac <__ieee754_rem_pio2+0x414>)
 800f770:	9301      	str	r3, [sp, #4]
 800f772:	2302      	movs	r3, #2
 800f774:	9300      	str	r3, [sp, #0]
 800f776:	4622      	mov	r2, r4
 800f778:	465b      	mov	r3, fp
 800f77a:	4651      	mov	r1, sl
 800f77c:	4648      	mov	r0, r9
 800f77e:	f000 f8df 	bl	800f940 <__kernel_rem_pio2>
 800f782:	9b02      	ldr	r3, [sp, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	4683      	mov	fp, r0
 800f788:	f6bf ae46 	bge.w	800f418 <__ieee754_rem_pio2+0x80>
 800f78c:	e9da 2100 	ldrd	r2, r1, [sl]
 800f790:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f794:	e9ca 2300 	strd	r2, r3, [sl]
 800f798:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f79c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f7a4:	e73a      	b.n	800f61c <__ieee754_rem_pio2+0x284>
 800f7a6:	bf00      	nop
 800f7a8:	41700000 	.word	0x41700000
 800f7ac:	08010ff8 	.word	0x08010ff8

0800f7b0 <__kernel_cos>:
 800f7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	ec57 6b10 	vmov	r6, r7, d0
 800f7b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f7bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f7c0:	ed8d 1b00 	vstr	d1, [sp]
 800f7c4:	da07      	bge.n	800f7d6 <__kernel_cos+0x26>
 800f7c6:	ee10 0a10 	vmov	r0, s0
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	f7f1 f9c4 	bl	8000b58 <__aeabi_d2iz>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	f000 8088 	beq.w	800f8e6 <__kernel_cos+0x136>
 800f7d6:	4632      	mov	r2, r6
 800f7d8:	463b      	mov	r3, r7
 800f7da:	4630      	mov	r0, r6
 800f7dc:	4639      	mov	r1, r7
 800f7de:	f7f0 ff0b 	bl	80005f8 <__aeabi_dmul>
 800f7e2:	4b51      	ldr	r3, [pc, #324]	; (800f928 <__kernel_cos+0x178>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	f7f0 ff05 	bl	80005f8 <__aeabi_dmul>
 800f7ee:	a340      	add	r3, pc, #256	; (adr r3, 800f8f0 <__kernel_cos+0x140>)
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	4682      	mov	sl, r0
 800f7f6:	468b      	mov	fp, r1
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	f7f0 fefc 	bl	80005f8 <__aeabi_dmul>
 800f800:	a33d      	add	r3, pc, #244	; (adr r3, 800f8f8 <__kernel_cos+0x148>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	f7f0 fd41 	bl	800028c <__adddf3>
 800f80a:	4622      	mov	r2, r4
 800f80c:	462b      	mov	r3, r5
 800f80e:	f7f0 fef3 	bl	80005f8 <__aeabi_dmul>
 800f812:	a33b      	add	r3, pc, #236	; (adr r3, 800f900 <__kernel_cos+0x150>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f7f0 fd36 	bl	8000288 <__aeabi_dsub>
 800f81c:	4622      	mov	r2, r4
 800f81e:	462b      	mov	r3, r5
 800f820:	f7f0 feea 	bl	80005f8 <__aeabi_dmul>
 800f824:	a338      	add	r3, pc, #224	; (adr r3, 800f908 <__kernel_cos+0x158>)
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f7f0 fd2f 	bl	800028c <__adddf3>
 800f82e:	4622      	mov	r2, r4
 800f830:	462b      	mov	r3, r5
 800f832:	f7f0 fee1 	bl	80005f8 <__aeabi_dmul>
 800f836:	a336      	add	r3, pc, #216	; (adr r3, 800f910 <__kernel_cos+0x160>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f7f0 fd24 	bl	8000288 <__aeabi_dsub>
 800f840:	4622      	mov	r2, r4
 800f842:	462b      	mov	r3, r5
 800f844:	f7f0 fed8 	bl	80005f8 <__aeabi_dmul>
 800f848:	a333      	add	r3, pc, #204	; (adr r3, 800f918 <__kernel_cos+0x168>)
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	f7f0 fd1d 	bl	800028c <__adddf3>
 800f852:	4622      	mov	r2, r4
 800f854:	462b      	mov	r3, r5
 800f856:	f7f0 fecf 	bl	80005f8 <__aeabi_dmul>
 800f85a:	4622      	mov	r2, r4
 800f85c:	462b      	mov	r3, r5
 800f85e:	f7f0 fecb 	bl	80005f8 <__aeabi_dmul>
 800f862:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f866:	4604      	mov	r4, r0
 800f868:	460d      	mov	r5, r1
 800f86a:	4630      	mov	r0, r6
 800f86c:	4639      	mov	r1, r7
 800f86e:	f7f0 fec3 	bl	80005f8 <__aeabi_dmul>
 800f872:	460b      	mov	r3, r1
 800f874:	4602      	mov	r2, r0
 800f876:	4629      	mov	r1, r5
 800f878:	4620      	mov	r0, r4
 800f87a:	f7f0 fd05 	bl	8000288 <__aeabi_dsub>
 800f87e:	4b2b      	ldr	r3, [pc, #172]	; (800f92c <__kernel_cos+0x17c>)
 800f880:	4598      	cmp	r8, r3
 800f882:	4606      	mov	r6, r0
 800f884:	460f      	mov	r7, r1
 800f886:	dc10      	bgt.n	800f8aa <__kernel_cos+0xfa>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	4650      	mov	r0, sl
 800f88e:	4659      	mov	r1, fp
 800f890:	f7f0 fcfa 	bl	8000288 <__aeabi_dsub>
 800f894:	460b      	mov	r3, r1
 800f896:	4926      	ldr	r1, [pc, #152]	; (800f930 <__kernel_cos+0x180>)
 800f898:	4602      	mov	r2, r0
 800f89a:	2000      	movs	r0, #0
 800f89c:	f7f0 fcf4 	bl	8000288 <__aeabi_dsub>
 800f8a0:	ec41 0b10 	vmov	d0, r0, r1
 800f8a4:	b003      	add	sp, #12
 800f8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8aa:	4b22      	ldr	r3, [pc, #136]	; (800f934 <__kernel_cos+0x184>)
 800f8ac:	4920      	ldr	r1, [pc, #128]	; (800f930 <__kernel_cos+0x180>)
 800f8ae:	4598      	cmp	r8, r3
 800f8b0:	bfcc      	ite	gt
 800f8b2:	4d21      	ldrgt	r5, [pc, #132]	; (800f938 <__kernel_cos+0x188>)
 800f8b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f8b8:	2400      	movs	r4, #0
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	462b      	mov	r3, r5
 800f8be:	2000      	movs	r0, #0
 800f8c0:	f7f0 fce2 	bl	8000288 <__aeabi_dsub>
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	4680      	mov	r8, r0
 800f8c8:	4689      	mov	r9, r1
 800f8ca:	462b      	mov	r3, r5
 800f8cc:	4650      	mov	r0, sl
 800f8ce:	4659      	mov	r1, fp
 800f8d0:	f7f0 fcda 	bl	8000288 <__aeabi_dsub>
 800f8d4:	4632      	mov	r2, r6
 800f8d6:	463b      	mov	r3, r7
 800f8d8:	f7f0 fcd6 	bl	8000288 <__aeabi_dsub>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	460b      	mov	r3, r1
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	e7da      	b.n	800f89c <__kernel_cos+0xec>
 800f8e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f920 <__kernel_cos+0x170>
 800f8ea:	e7db      	b.n	800f8a4 <__kernel_cos+0xf4>
 800f8ec:	f3af 8000 	nop.w
 800f8f0:	be8838d4 	.word	0xbe8838d4
 800f8f4:	bda8fae9 	.word	0xbda8fae9
 800f8f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f8fc:	3e21ee9e 	.word	0x3e21ee9e
 800f900:	809c52ad 	.word	0x809c52ad
 800f904:	3e927e4f 	.word	0x3e927e4f
 800f908:	19cb1590 	.word	0x19cb1590
 800f90c:	3efa01a0 	.word	0x3efa01a0
 800f910:	16c15177 	.word	0x16c15177
 800f914:	3f56c16c 	.word	0x3f56c16c
 800f918:	5555554c 	.word	0x5555554c
 800f91c:	3fa55555 	.word	0x3fa55555
 800f920:	00000000 	.word	0x00000000
 800f924:	3ff00000 	.word	0x3ff00000
 800f928:	3fe00000 	.word	0x3fe00000
 800f92c:	3fd33332 	.word	0x3fd33332
 800f930:	3ff00000 	.word	0x3ff00000
 800f934:	3fe90000 	.word	0x3fe90000
 800f938:	3fd20000 	.word	0x3fd20000
 800f93c:	00000000 	.word	0x00000000

0800f940 <__kernel_rem_pio2>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	ed2d 8b02 	vpush	{d8}
 800f948:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f94c:	f112 0f14 	cmn.w	r2, #20
 800f950:	9308      	str	r3, [sp, #32]
 800f952:	9101      	str	r1, [sp, #4]
 800f954:	4bc4      	ldr	r3, [pc, #784]	; (800fc68 <__kernel_rem_pio2+0x328>)
 800f956:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f958:	900b      	str	r0, [sp, #44]	; 0x2c
 800f95a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f95e:	9302      	str	r3, [sp, #8]
 800f960:	9b08      	ldr	r3, [sp, #32]
 800f962:	f103 33ff 	add.w	r3, r3, #4294967295
 800f966:	bfa8      	it	ge
 800f968:	1ed4      	subge	r4, r2, #3
 800f96a:	9306      	str	r3, [sp, #24]
 800f96c:	bfb2      	itee	lt
 800f96e:	2400      	movlt	r4, #0
 800f970:	2318      	movge	r3, #24
 800f972:	fb94 f4f3 	sdivge	r4, r4, r3
 800f976:	f06f 0317 	mvn.w	r3, #23
 800f97a:	fb04 3303 	mla	r3, r4, r3, r3
 800f97e:	eb03 0a02 	add.w	sl, r3, r2
 800f982:	9b02      	ldr	r3, [sp, #8]
 800f984:	9a06      	ldr	r2, [sp, #24]
 800f986:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800fc58 <__kernel_rem_pio2+0x318>
 800f98a:	eb03 0802 	add.w	r8, r3, r2
 800f98e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f990:	1aa7      	subs	r7, r4, r2
 800f992:	ae22      	add	r6, sp, #136	; 0x88
 800f994:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f998:	2500      	movs	r5, #0
 800f99a:	4545      	cmp	r5, r8
 800f99c:	dd13      	ble.n	800f9c6 <__kernel_rem_pio2+0x86>
 800f99e:	9b08      	ldr	r3, [sp, #32]
 800f9a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800fc58 <__kernel_rem_pio2+0x318>
 800f9a4:	aa22      	add	r2, sp, #136	; 0x88
 800f9a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f9aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f9ae:	f04f 0800 	mov.w	r8, #0
 800f9b2:	9b02      	ldr	r3, [sp, #8]
 800f9b4:	4598      	cmp	r8, r3
 800f9b6:	dc2f      	bgt.n	800fa18 <__kernel_rem_pio2+0xd8>
 800f9b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f9bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f9c0:	462f      	mov	r7, r5
 800f9c2:	2600      	movs	r6, #0
 800f9c4:	e01b      	b.n	800f9fe <__kernel_rem_pio2+0xbe>
 800f9c6:	42ef      	cmn	r7, r5
 800f9c8:	d407      	bmi.n	800f9da <__kernel_rem_pio2+0x9a>
 800f9ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f9ce:	f7f0 fda9 	bl	8000524 <__aeabi_i2d>
 800f9d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f9d6:	3501      	adds	r5, #1
 800f9d8:	e7df      	b.n	800f99a <__kernel_rem_pio2+0x5a>
 800f9da:	ec51 0b18 	vmov	r0, r1, d8
 800f9de:	e7f8      	b.n	800f9d2 <__kernel_rem_pio2+0x92>
 800f9e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f9e8:	f7f0 fe06 	bl	80005f8 <__aeabi_dmul>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9f4:	f7f0 fc4a 	bl	800028c <__adddf3>
 800f9f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9fc:	3601      	adds	r6, #1
 800f9fe:	9b06      	ldr	r3, [sp, #24]
 800fa00:	429e      	cmp	r6, r3
 800fa02:	f1a7 0708 	sub.w	r7, r7, #8
 800fa06:	ddeb      	ble.n	800f9e0 <__kernel_rem_pio2+0xa0>
 800fa08:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa0c:	f108 0801 	add.w	r8, r8, #1
 800fa10:	ecab 7b02 	vstmia	fp!, {d7}
 800fa14:	3508      	adds	r5, #8
 800fa16:	e7cc      	b.n	800f9b2 <__kernel_rem_pio2+0x72>
 800fa18:	9b02      	ldr	r3, [sp, #8]
 800fa1a:	aa0e      	add	r2, sp, #56	; 0x38
 800fa1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa20:	930d      	str	r3, [sp, #52]	; 0x34
 800fa22:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fa24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fa28:	9c02      	ldr	r4, [sp, #8]
 800fa2a:	930c      	str	r3, [sp, #48]	; 0x30
 800fa2c:	00e3      	lsls	r3, r4, #3
 800fa2e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa30:	ab9a      	add	r3, sp, #616	; 0x268
 800fa32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fa3a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fa3e:	ab72      	add	r3, sp, #456	; 0x1c8
 800fa40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fa44:	46c3      	mov	fp, r8
 800fa46:	46a1      	mov	r9, r4
 800fa48:	f1b9 0f00 	cmp.w	r9, #0
 800fa4c:	f1a5 0508 	sub.w	r5, r5, #8
 800fa50:	dc77      	bgt.n	800fb42 <__kernel_rem_pio2+0x202>
 800fa52:	ec47 6b10 	vmov	d0, r6, r7
 800fa56:	4650      	mov	r0, sl
 800fa58:	f000 fdae 	bl	80105b8 <scalbn>
 800fa5c:	ec57 6b10 	vmov	r6, r7, d0
 800fa60:	2200      	movs	r2, #0
 800fa62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fa66:	ee10 0a10 	vmov	r0, s0
 800fa6a:	4639      	mov	r1, r7
 800fa6c:	f7f0 fdc4 	bl	80005f8 <__aeabi_dmul>
 800fa70:	ec41 0b10 	vmov	d0, r0, r1
 800fa74:	f000 fd20 	bl	80104b8 <floor>
 800fa78:	4b7c      	ldr	r3, [pc, #496]	; (800fc6c <__kernel_rem_pio2+0x32c>)
 800fa7a:	ec51 0b10 	vmov	r0, r1, d0
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f7f0 fdba 	bl	80005f8 <__aeabi_dmul>
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	4630      	mov	r0, r6
 800fa8a:	4639      	mov	r1, r7
 800fa8c:	f7f0 fbfc 	bl	8000288 <__aeabi_dsub>
 800fa90:	460f      	mov	r7, r1
 800fa92:	4606      	mov	r6, r0
 800fa94:	f7f1 f860 	bl	8000b58 <__aeabi_d2iz>
 800fa98:	9004      	str	r0, [sp, #16]
 800fa9a:	f7f0 fd43 	bl	8000524 <__aeabi_i2d>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	460b      	mov	r3, r1
 800faa2:	4630      	mov	r0, r6
 800faa4:	4639      	mov	r1, r7
 800faa6:	f7f0 fbef 	bl	8000288 <__aeabi_dsub>
 800faaa:	f1ba 0f00 	cmp.w	sl, #0
 800faae:	4606      	mov	r6, r0
 800fab0:	460f      	mov	r7, r1
 800fab2:	dd6d      	ble.n	800fb90 <__kernel_rem_pio2+0x250>
 800fab4:	1e62      	subs	r2, r4, #1
 800fab6:	ab0e      	add	r3, sp, #56	; 0x38
 800fab8:	9d04      	ldr	r5, [sp, #16]
 800faba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fabe:	f1ca 0118 	rsb	r1, sl, #24
 800fac2:	fa40 f301 	asr.w	r3, r0, r1
 800fac6:	441d      	add	r5, r3
 800fac8:	408b      	lsls	r3, r1
 800faca:	1ac0      	subs	r0, r0, r3
 800facc:	ab0e      	add	r3, sp, #56	; 0x38
 800face:	9504      	str	r5, [sp, #16]
 800fad0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fad4:	f1ca 0317 	rsb	r3, sl, #23
 800fad8:	fa40 fb03 	asr.w	fp, r0, r3
 800fadc:	f1bb 0f00 	cmp.w	fp, #0
 800fae0:	dd65      	ble.n	800fbae <__kernel_rem_pio2+0x26e>
 800fae2:	9b04      	ldr	r3, [sp, #16]
 800fae4:	2200      	movs	r2, #0
 800fae6:	3301      	adds	r3, #1
 800fae8:	9304      	str	r3, [sp, #16]
 800faea:	4615      	mov	r5, r2
 800faec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800faf0:	4294      	cmp	r4, r2
 800faf2:	f300 809c 	bgt.w	800fc2e <__kernel_rem_pio2+0x2ee>
 800faf6:	f1ba 0f00 	cmp.w	sl, #0
 800fafa:	dd07      	ble.n	800fb0c <__kernel_rem_pio2+0x1cc>
 800fafc:	f1ba 0f01 	cmp.w	sl, #1
 800fb00:	f000 80c0 	beq.w	800fc84 <__kernel_rem_pio2+0x344>
 800fb04:	f1ba 0f02 	cmp.w	sl, #2
 800fb08:	f000 80c6 	beq.w	800fc98 <__kernel_rem_pio2+0x358>
 800fb0c:	f1bb 0f02 	cmp.w	fp, #2
 800fb10:	d14d      	bne.n	800fbae <__kernel_rem_pio2+0x26e>
 800fb12:	4632      	mov	r2, r6
 800fb14:	463b      	mov	r3, r7
 800fb16:	4956      	ldr	r1, [pc, #344]	; (800fc70 <__kernel_rem_pio2+0x330>)
 800fb18:	2000      	movs	r0, #0
 800fb1a:	f7f0 fbb5 	bl	8000288 <__aeabi_dsub>
 800fb1e:	4606      	mov	r6, r0
 800fb20:	460f      	mov	r7, r1
 800fb22:	2d00      	cmp	r5, #0
 800fb24:	d043      	beq.n	800fbae <__kernel_rem_pio2+0x26e>
 800fb26:	4650      	mov	r0, sl
 800fb28:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800fc60 <__kernel_rem_pio2+0x320>
 800fb2c:	f000 fd44 	bl	80105b8 <scalbn>
 800fb30:	4630      	mov	r0, r6
 800fb32:	4639      	mov	r1, r7
 800fb34:	ec53 2b10 	vmov	r2, r3, d0
 800fb38:	f7f0 fba6 	bl	8000288 <__aeabi_dsub>
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	460f      	mov	r7, r1
 800fb40:	e035      	b.n	800fbae <__kernel_rem_pio2+0x26e>
 800fb42:	4b4c      	ldr	r3, [pc, #304]	; (800fc74 <__kernel_rem_pio2+0x334>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	4630      	mov	r0, r6
 800fb48:	4639      	mov	r1, r7
 800fb4a:	f7f0 fd55 	bl	80005f8 <__aeabi_dmul>
 800fb4e:	f7f1 f803 	bl	8000b58 <__aeabi_d2iz>
 800fb52:	f7f0 fce7 	bl	8000524 <__aeabi_i2d>
 800fb56:	4602      	mov	r2, r0
 800fb58:	460b      	mov	r3, r1
 800fb5a:	ec43 2b18 	vmov	d8, r2, r3
 800fb5e:	4b46      	ldr	r3, [pc, #280]	; (800fc78 <__kernel_rem_pio2+0x338>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	f7f0 fd49 	bl	80005f8 <__aeabi_dmul>
 800fb66:	4602      	mov	r2, r0
 800fb68:	460b      	mov	r3, r1
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	4639      	mov	r1, r7
 800fb6e:	f7f0 fb8b 	bl	8000288 <__aeabi_dsub>
 800fb72:	f7f0 fff1 	bl	8000b58 <__aeabi_d2iz>
 800fb76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb7a:	f84b 0b04 	str.w	r0, [fp], #4
 800fb7e:	ec51 0b18 	vmov	r0, r1, d8
 800fb82:	f7f0 fb83 	bl	800028c <__adddf3>
 800fb86:	f109 39ff 	add.w	r9, r9, #4294967295
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	460f      	mov	r7, r1
 800fb8e:	e75b      	b.n	800fa48 <__kernel_rem_pio2+0x108>
 800fb90:	d106      	bne.n	800fba0 <__kernel_rem_pio2+0x260>
 800fb92:	1e63      	subs	r3, r4, #1
 800fb94:	aa0e      	add	r2, sp, #56	; 0x38
 800fb96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb9a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fb9e:	e79d      	b.n	800fadc <__kernel_rem_pio2+0x19c>
 800fba0:	4b36      	ldr	r3, [pc, #216]	; (800fc7c <__kernel_rem_pio2+0x33c>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	f7f0 ffae 	bl	8000b04 <__aeabi_dcmpge>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d13d      	bne.n	800fc28 <__kernel_rem_pio2+0x2e8>
 800fbac:	4683      	mov	fp, r0
 800fbae:	2200      	movs	r2, #0
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	4639      	mov	r1, r7
 800fbb6:	f7f0 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	f000 80c0 	beq.w	800fd40 <__kernel_rem_pio2+0x400>
 800fbc0:	1e65      	subs	r5, r4, #1
 800fbc2:	462b      	mov	r3, r5
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	9902      	ldr	r1, [sp, #8]
 800fbc8:	428b      	cmp	r3, r1
 800fbca:	da6c      	bge.n	800fca6 <__kernel_rem_pio2+0x366>
 800fbcc:	2a00      	cmp	r2, #0
 800fbce:	f000 8089 	beq.w	800fce4 <__kernel_rem_pio2+0x3a4>
 800fbd2:	ab0e      	add	r3, sp, #56	; 0x38
 800fbd4:	f1aa 0a18 	sub.w	sl, sl, #24
 800fbd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f000 80ad 	beq.w	800fd3c <__kernel_rem_pio2+0x3fc>
 800fbe2:	4650      	mov	r0, sl
 800fbe4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800fc60 <__kernel_rem_pio2+0x320>
 800fbe8:	f000 fce6 	bl	80105b8 <scalbn>
 800fbec:	ab9a      	add	r3, sp, #616	; 0x268
 800fbee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fbf2:	ec57 6b10 	vmov	r6, r7, d0
 800fbf6:	00ec      	lsls	r4, r5, #3
 800fbf8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800fbfc:	46aa      	mov	sl, r5
 800fbfe:	f1ba 0f00 	cmp.w	sl, #0
 800fc02:	f280 80d6 	bge.w	800fdb2 <__kernel_rem_pio2+0x472>
 800fc06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800fc58 <__kernel_rem_pio2+0x318>
 800fc0a:	462e      	mov	r6, r5
 800fc0c:	2e00      	cmp	r6, #0
 800fc0e:	f2c0 8104 	blt.w	800fe1a <__kernel_rem_pio2+0x4da>
 800fc12:	ab72      	add	r3, sp, #456	; 0x1c8
 800fc14:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fc18:	f8df a064 	ldr.w	sl, [pc, #100]	; 800fc80 <__kernel_rem_pio2+0x340>
 800fc1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800fc20:	f04f 0800 	mov.w	r8, #0
 800fc24:	1baf      	subs	r7, r5, r6
 800fc26:	e0ea      	b.n	800fdfe <__kernel_rem_pio2+0x4be>
 800fc28:	f04f 0b02 	mov.w	fp, #2
 800fc2c:	e759      	b.n	800fae2 <__kernel_rem_pio2+0x1a2>
 800fc2e:	f8d8 3000 	ldr.w	r3, [r8]
 800fc32:	b955      	cbnz	r5, 800fc4a <__kernel_rem_pio2+0x30a>
 800fc34:	b123      	cbz	r3, 800fc40 <__kernel_rem_pio2+0x300>
 800fc36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fc3a:	f8c8 3000 	str.w	r3, [r8]
 800fc3e:	2301      	movs	r3, #1
 800fc40:	3201      	adds	r2, #1
 800fc42:	f108 0804 	add.w	r8, r8, #4
 800fc46:	461d      	mov	r5, r3
 800fc48:	e752      	b.n	800faf0 <__kernel_rem_pio2+0x1b0>
 800fc4a:	1acb      	subs	r3, r1, r3
 800fc4c:	f8c8 3000 	str.w	r3, [r8]
 800fc50:	462b      	mov	r3, r5
 800fc52:	e7f5      	b.n	800fc40 <__kernel_rem_pio2+0x300>
 800fc54:	f3af 8000 	nop.w
	...
 800fc64:	3ff00000 	.word	0x3ff00000
 800fc68:	08011140 	.word	0x08011140
 800fc6c:	40200000 	.word	0x40200000
 800fc70:	3ff00000 	.word	0x3ff00000
 800fc74:	3e700000 	.word	0x3e700000
 800fc78:	41700000 	.word	0x41700000
 800fc7c:	3fe00000 	.word	0x3fe00000
 800fc80:	08011100 	.word	0x08011100
 800fc84:	1e62      	subs	r2, r4, #1
 800fc86:	ab0e      	add	r3, sp, #56	; 0x38
 800fc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fc90:	a90e      	add	r1, sp, #56	; 0x38
 800fc92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fc96:	e739      	b.n	800fb0c <__kernel_rem_pio2+0x1cc>
 800fc98:	1e62      	subs	r2, r4, #1
 800fc9a:	ab0e      	add	r3, sp, #56	; 0x38
 800fc9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fca0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fca4:	e7f4      	b.n	800fc90 <__kernel_rem_pio2+0x350>
 800fca6:	a90e      	add	r1, sp, #56	; 0x38
 800fca8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fcac:	3b01      	subs	r3, #1
 800fcae:	430a      	orrs	r2, r1
 800fcb0:	e789      	b.n	800fbc6 <__kernel_rem_pio2+0x286>
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fcb8:	2900      	cmp	r1, #0
 800fcba:	d0fa      	beq.n	800fcb2 <__kernel_rem_pio2+0x372>
 800fcbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fcbe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800fcc2:	446a      	add	r2, sp
 800fcc4:	3a98      	subs	r2, #152	; 0x98
 800fcc6:	920a      	str	r2, [sp, #40]	; 0x28
 800fcc8:	9a08      	ldr	r2, [sp, #32]
 800fcca:	18e3      	adds	r3, r4, r3
 800fccc:	18a5      	adds	r5, r4, r2
 800fcce:	aa22      	add	r2, sp, #136	; 0x88
 800fcd0:	f104 0801 	add.w	r8, r4, #1
 800fcd4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fcd8:	9304      	str	r3, [sp, #16]
 800fcda:	9b04      	ldr	r3, [sp, #16]
 800fcdc:	4543      	cmp	r3, r8
 800fcde:	da04      	bge.n	800fcea <__kernel_rem_pio2+0x3aa>
 800fce0:	461c      	mov	r4, r3
 800fce2:	e6a3      	b.n	800fa2c <__kernel_rem_pio2+0xec>
 800fce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fce6:	2301      	movs	r3, #1
 800fce8:	e7e4      	b.n	800fcb4 <__kernel_rem_pio2+0x374>
 800fcea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fcf0:	f7f0 fc18 	bl	8000524 <__aeabi_i2d>
 800fcf4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fcf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcfa:	46ab      	mov	fp, r5
 800fcfc:	461c      	mov	r4, r3
 800fcfe:	f04f 0900 	mov.w	r9, #0
 800fd02:	2600      	movs	r6, #0
 800fd04:	2700      	movs	r7, #0
 800fd06:	9b06      	ldr	r3, [sp, #24]
 800fd08:	4599      	cmp	r9, r3
 800fd0a:	dd06      	ble.n	800fd1a <__kernel_rem_pio2+0x3da>
 800fd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fd12:	f108 0801 	add.w	r8, r8, #1
 800fd16:	930a      	str	r3, [sp, #40]	; 0x28
 800fd18:	e7df      	b.n	800fcda <__kernel_rem_pio2+0x39a>
 800fd1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fd1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fd22:	f7f0 fc69 	bl	80005f8 <__aeabi_dmul>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	f7f0 faad 	bl	800028c <__adddf3>
 800fd32:	f109 0901 	add.w	r9, r9, #1
 800fd36:	4606      	mov	r6, r0
 800fd38:	460f      	mov	r7, r1
 800fd3a:	e7e4      	b.n	800fd06 <__kernel_rem_pio2+0x3c6>
 800fd3c:	3d01      	subs	r5, #1
 800fd3e:	e748      	b.n	800fbd2 <__kernel_rem_pio2+0x292>
 800fd40:	ec47 6b10 	vmov	d0, r6, r7
 800fd44:	f1ca 0000 	rsb	r0, sl, #0
 800fd48:	f000 fc36 	bl	80105b8 <scalbn>
 800fd4c:	ec57 6b10 	vmov	r6, r7, d0
 800fd50:	4ba0      	ldr	r3, [pc, #640]	; (800ffd4 <__kernel_rem_pio2+0x694>)
 800fd52:	ee10 0a10 	vmov	r0, s0
 800fd56:	2200      	movs	r2, #0
 800fd58:	4639      	mov	r1, r7
 800fd5a:	f7f0 fed3 	bl	8000b04 <__aeabi_dcmpge>
 800fd5e:	b1f8      	cbz	r0, 800fda0 <__kernel_rem_pio2+0x460>
 800fd60:	4b9d      	ldr	r3, [pc, #628]	; (800ffd8 <__kernel_rem_pio2+0x698>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	4630      	mov	r0, r6
 800fd66:	4639      	mov	r1, r7
 800fd68:	f7f0 fc46 	bl	80005f8 <__aeabi_dmul>
 800fd6c:	f7f0 fef4 	bl	8000b58 <__aeabi_d2iz>
 800fd70:	4680      	mov	r8, r0
 800fd72:	f7f0 fbd7 	bl	8000524 <__aeabi_i2d>
 800fd76:	4b97      	ldr	r3, [pc, #604]	; (800ffd4 <__kernel_rem_pio2+0x694>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f7f0 fc3d 	bl	80005f8 <__aeabi_dmul>
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4602      	mov	r2, r0
 800fd82:	4639      	mov	r1, r7
 800fd84:	4630      	mov	r0, r6
 800fd86:	f7f0 fa7f 	bl	8000288 <__aeabi_dsub>
 800fd8a:	f7f0 fee5 	bl	8000b58 <__aeabi_d2iz>
 800fd8e:	1c65      	adds	r5, r4, #1
 800fd90:	ab0e      	add	r3, sp, #56	; 0x38
 800fd92:	f10a 0a18 	add.w	sl, sl, #24
 800fd96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fd9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fd9e:	e720      	b.n	800fbe2 <__kernel_rem_pio2+0x2a2>
 800fda0:	4630      	mov	r0, r6
 800fda2:	4639      	mov	r1, r7
 800fda4:	f7f0 fed8 	bl	8000b58 <__aeabi_d2iz>
 800fda8:	ab0e      	add	r3, sp, #56	; 0x38
 800fdaa:	4625      	mov	r5, r4
 800fdac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fdb0:	e717      	b.n	800fbe2 <__kernel_rem_pio2+0x2a2>
 800fdb2:	ab0e      	add	r3, sp, #56	; 0x38
 800fdb4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fdb8:	f7f0 fbb4 	bl	8000524 <__aeabi_i2d>
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	463b      	mov	r3, r7
 800fdc0:	f7f0 fc1a 	bl	80005f8 <__aeabi_dmul>
 800fdc4:	4b84      	ldr	r3, [pc, #528]	; (800ffd8 <__kernel_rem_pio2+0x698>)
 800fdc6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800fdca:	2200      	movs	r2, #0
 800fdcc:	4630      	mov	r0, r6
 800fdce:	4639      	mov	r1, r7
 800fdd0:	f7f0 fc12 	bl	80005f8 <__aeabi_dmul>
 800fdd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdd8:	4606      	mov	r6, r0
 800fdda:	460f      	mov	r7, r1
 800fddc:	e70f      	b.n	800fbfe <__kernel_rem_pio2+0x2be>
 800fdde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800fde2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800fde6:	f7f0 fc07 	bl	80005f8 <__aeabi_dmul>
 800fdea:	4602      	mov	r2, r0
 800fdec:	460b      	mov	r3, r1
 800fdee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdf2:	f7f0 fa4b 	bl	800028c <__adddf3>
 800fdf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fdfa:	f108 0801 	add.w	r8, r8, #1
 800fdfe:	9b02      	ldr	r3, [sp, #8]
 800fe00:	4598      	cmp	r8, r3
 800fe02:	dc01      	bgt.n	800fe08 <__kernel_rem_pio2+0x4c8>
 800fe04:	45b8      	cmp	r8, r7
 800fe06:	ddea      	ble.n	800fdde <__kernel_rem_pio2+0x49e>
 800fe08:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fe0c:	ab4a      	add	r3, sp, #296	; 0x128
 800fe0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fe12:	ed87 7b00 	vstr	d7, [r7]
 800fe16:	3e01      	subs	r6, #1
 800fe18:	e6f8      	b.n	800fc0c <__kernel_rem_pio2+0x2cc>
 800fe1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fe1c:	2b02      	cmp	r3, #2
 800fe1e:	dc0b      	bgt.n	800fe38 <__kernel_rem_pio2+0x4f8>
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	dc35      	bgt.n	800fe90 <__kernel_rem_pio2+0x550>
 800fe24:	d059      	beq.n	800feda <__kernel_rem_pio2+0x59a>
 800fe26:	9b04      	ldr	r3, [sp, #16]
 800fe28:	f003 0007 	and.w	r0, r3, #7
 800fe2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fe30:	ecbd 8b02 	vpop	{d8}
 800fe34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fe3a:	2b03      	cmp	r3, #3
 800fe3c:	d1f3      	bne.n	800fe26 <__kernel_rem_pio2+0x4e6>
 800fe3e:	ab4a      	add	r3, sp, #296	; 0x128
 800fe40:	4423      	add	r3, r4
 800fe42:	9306      	str	r3, [sp, #24]
 800fe44:	461c      	mov	r4, r3
 800fe46:	469a      	mov	sl, r3
 800fe48:	9502      	str	r5, [sp, #8]
 800fe4a:	9b02      	ldr	r3, [sp, #8]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f1aa 0a08 	sub.w	sl, sl, #8
 800fe52:	dc6b      	bgt.n	800ff2c <__kernel_rem_pio2+0x5ec>
 800fe54:	46aa      	mov	sl, r5
 800fe56:	f1ba 0f01 	cmp.w	sl, #1
 800fe5a:	f1a4 0408 	sub.w	r4, r4, #8
 800fe5e:	f300 8085 	bgt.w	800ff6c <__kernel_rem_pio2+0x62c>
 800fe62:	9c06      	ldr	r4, [sp, #24]
 800fe64:	2000      	movs	r0, #0
 800fe66:	3408      	adds	r4, #8
 800fe68:	2100      	movs	r1, #0
 800fe6a:	2d01      	cmp	r5, #1
 800fe6c:	f300 809d 	bgt.w	800ffaa <__kernel_rem_pio2+0x66a>
 800fe70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fe74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800fe78:	f1bb 0f00 	cmp.w	fp, #0
 800fe7c:	f040 809b 	bne.w	800ffb6 <__kernel_rem_pio2+0x676>
 800fe80:	9b01      	ldr	r3, [sp, #4]
 800fe82:	e9c3 5600 	strd	r5, r6, [r3]
 800fe86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fe8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fe8e:	e7ca      	b.n	800fe26 <__kernel_rem_pio2+0x4e6>
 800fe90:	3408      	adds	r4, #8
 800fe92:	ab4a      	add	r3, sp, #296	; 0x128
 800fe94:	441c      	add	r4, r3
 800fe96:	462e      	mov	r6, r5
 800fe98:	2000      	movs	r0, #0
 800fe9a:	2100      	movs	r1, #0
 800fe9c:	2e00      	cmp	r6, #0
 800fe9e:	da36      	bge.n	800ff0e <__kernel_rem_pio2+0x5ce>
 800fea0:	f1bb 0f00 	cmp.w	fp, #0
 800fea4:	d039      	beq.n	800ff1a <__kernel_rem_pio2+0x5da>
 800fea6:	4602      	mov	r2, r0
 800fea8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800feac:	9c01      	ldr	r4, [sp, #4]
 800feae:	e9c4 2300 	strd	r2, r3, [r4]
 800feb2:	4602      	mov	r2, r0
 800feb4:	460b      	mov	r3, r1
 800feb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800feba:	f7f0 f9e5 	bl	8000288 <__aeabi_dsub>
 800febe:	ae4c      	add	r6, sp, #304	; 0x130
 800fec0:	2401      	movs	r4, #1
 800fec2:	42a5      	cmp	r5, r4
 800fec4:	da2c      	bge.n	800ff20 <__kernel_rem_pio2+0x5e0>
 800fec6:	f1bb 0f00 	cmp.w	fp, #0
 800feca:	d002      	beq.n	800fed2 <__kernel_rem_pio2+0x592>
 800fecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fed0:	4619      	mov	r1, r3
 800fed2:	9b01      	ldr	r3, [sp, #4]
 800fed4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fed8:	e7a5      	b.n	800fe26 <__kernel_rem_pio2+0x4e6>
 800feda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800fede:	eb0d 0403 	add.w	r4, sp, r3
 800fee2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fee6:	2000      	movs	r0, #0
 800fee8:	2100      	movs	r1, #0
 800feea:	2d00      	cmp	r5, #0
 800feec:	da09      	bge.n	800ff02 <__kernel_rem_pio2+0x5c2>
 800feee:	f1bb 0f00 	cmp.w	fp, #0
 800fef2:	d002      	beq.n	800fefa <__kernel_rem_pio2+0x5ba>
 800fef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fef8:	4619      	mov	r1, r3
 800fefa:	9b01      	ldr	r3, [sp, #4]
 800fefc:	e9c3 0100 	strd	r0, r1, [r3]
 800ff00:	e791      	b.n	800fe26 <__kernel_rem_pio2+0x4e6>
 800ff02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff06:	f7f0 f9c1 	bl	800028c <__adddf3>
 800ff0a:	3d01      	subs	r5, #1
 800ff0c:	e7ed      	b.n	800feea <__kernel_rem_pio2+0x5aa>
 800ff0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff12:	f7f0 f9bb 	bl	800028c <__adddf3>
 800ff16:	3e01      	subs	r6, #1
 800ff18:	e7c0      	b.n	800fe9c <__kernel_rem_pio2+0x55c>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	e7c5      	b.n	800feac <__kernel_rem_pio2+0x56c>
 800ff20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ff24:	f7f0 f9b2 	bl	800028c <__adddf3>
 800ff28:	3401      	adds	r4, #1
 800ff2a:	e7ca      	b.n	800fec2 <__kernel_rem_pio2+0x582>
 800ff2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ff34:	9b02      	ldr	r3, [sp, #8]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	9302      	str	r3, [sp, #8]
 800ff3a:	4632      	mov	r2, r6
 800ff3c:	463b      	mov	r3, r7
 800ff3e:	4640      	mov	r0, r8
 800ff40:	4649      	mov	r1, r9
 800ff42:	f7f0 f9a3 	bl	800028c <__adddf3>
 800ff46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	4640      	mov	r0, r8
 800ff50:	4649      	mov	r1, r9
 800ff52:	f7f0 f999 	bl	8000288 <__aeabi_dsub>
 800ff56:	4632      	mov	r2, r6
 800ff58:	463b      	mov	r3, r7
 800ff5a:	f7f0 f997 	bl	800028c <__adddf3>
 800ff5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ff62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff66:	ed8a 7b00 	vstr	d7, [sl]
 800ff6a:	e76e      	b.n	800fe4a <__kernel_rem_pio2+0x50a>
 800ff6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ff70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ff74:	4640      	mov	r0, r8
 800ff76:	4632      	mov	r2, r6
 800ff78:	463b      	mov	r3, r7
 800ff7a:	4649      	mov	r1, r9
 800ff7c:	f7f0 f986 	bl	800028c <__adddf3>
 800ff80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff84:	4602      	mov	r2, r0
 800ff86:	460b      	mov	r3, r1
 800ff88:	4640      	mov	r0, r8
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	f7f0 f97c 	bl	8000288 <__aeabi_dsub>
 800ff90:	4632      	mov	r2, r6
 800ff92:	463b      	mov	r3, r7
 800ff94:	f7f0 f97a 	bl	800028c <__adddf3>
 800ff98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ffa0:	ed84 7b00 	vstr	d7, [r4]
 800ffa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffa8:	e755      	b.n	800fe56 <__kernel_rem_pio2+0x516>
 800ffaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ffae:	f7f0 f96d 	bl	800028c <__adddf3>
 800ffb2:	3d01      	subs	r5, #1
 800ffb4:	e759      	b.n	800fe6a <__kernel_rem_pio2+0x52a>
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	9a01      	ldr	r2, [sp, #4]
 800ffba:	601d      	str	r5, [r3, #0]
 800ffbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ffc0:	605c      	str	r4, [r3, #4]
 800ffc2:	609f      	str	r7, [r3, #8]
 800ffc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ffc8:	60d3      	str	r3, [r2, #12]
 800ffca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffce:	6110      	str	r0, [r2, #16]
 800ffd0:	6153      	str	r3, [r2, #20]
 800ffd2:	e728      	b.n	800fe26 <__kernel_rem_pio2+0x4e6>
 800ffd4:	41700000 	.word	0x41700000
 800ffd8:	3e700000 	.word	0x3e700000
 800ffdc:	00000000 	.word	0x00000000

0800ffe0 <__kernel_sin>:
 800ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe4:	ed2d 8b04 	vpush	{d8-d9}
 800ffe8:	eeb0 8a41 	vmov.f32	s16, s2
 800ffec:	eef0 8a61 	vmov.f32	s17, s3
 800fff0:	ec55 4b10 	vmov	r4, r5, d0
 800fff4:	b083      	sub	sp, #12
 800fff6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fffa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fffe:	9001      	str	r0, [sp, #4]
 8010000:	da06      	bge.n	8010010 <__kernel_sin+0x30>
 8010002:	ee10 0a10 	vmov	r0, s0
 8010006:	4629      	mov	r1, r5
 8010008:	f7f0 fda6 	bl	8000b58 <__aeabi_d2iz>
 801000c:	2800      	cmp	r0, #0
 801000e:	d051      	beq.n	80100b4 <__kernel_sin+0xd4>
 8010010:	4622      	mov	r2, r4
 8010012:	462b      	mov	r3, r5
 8010014:	4620      	mov	r0, r4
 8010016:	4629      	mov	r1, r5
 8010018:	f7f0 faee 	bl	80005f8 <__aeabi_dmul>
 801001c:	4682      	mov	sl, r0
 801001e:	468b      	mov	fp, r1
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	4620      	mov	r0, r4
 8010026:	4629      	mov	r1, r5
 8010028:	f7f0 fae6 	bl	80005f8 <__aeabi_dmul>
 801002c:	a341      	add	r3, pc, #260	; (adr r3, 8010134 <__kernel_sin+0x154>)
 801002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010032:	4680      	mov	r8, r0
 8010034:	4689      	mov	r9, r1
 8010036:	4650      	mov	r0, sl
 8010038:	4659      	mov	r1, fp
 801003a:	f7f0 fadd 	bl	80005f8 <__aeabi_dmul>
 801003e:	a33f      	add	r3, pc, #252	; (adr r3, 801013c <__kernel_sin+0x15c>)
 8010040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010044:	f7f0 f920 	bl	8000288 <__aeabi_dsub>
 8010048:	4652      	mov	r2, sl
 801004a:	465b      	mov	r3, fp
 801004c:	f7f0 fad4 	bl	80005f8 <__aeabi_dmul>
 8010050:	a33c      	add	r3, pc, #240	; (adr r3, 8010144 <__kernel_sin+0x164>)
 8010052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010056:	f7f0 f919 	bl	800028c <__adddf3>
 801005a:	4652      	mov	r2, sl
 801005c:	465b      	mov	r3, fp
 801005e:	f7f0 facb 	bl	80005f8 <__aeabi_dmul>
 8010062:	a33a      	add	r3, pc, #232	; (adr r3, 801014c <__kernel_sin+0x16c>)
 8010064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010068:	f7f0 f90e 	bl	8000288 <__aeabi_dsub>
 801006c:	4652      	mov	r2, sl
 801006e:	465b      	mov	r3, fp
 8010070:	f7f0 fac2 	bl	80005f8 <__aeabi_dmul>
 8010074:	a337      	add	r3, pc, #220	; (adr r3, 8010154 <__kernel_sin+0x174>)
 8010076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007a:	f7f0 f907 	bl	800028c <__adddf3>
 801007e:	9b01      	ldr	r3, [sp, #4]
 8010080:	4606      	mov	r6, r0
 8010082:	460f      	mov	r7, r1
 8010084:	b9eb      	cbnz	r3, 80100c2 <__kernel_sin+0xe2>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4650      	mov	r0, sl
 801008c:	4659      	mov	r1, fp
 801008e:	f7f0 fab3 	bl	80005f8 <__aeabi_dmul>
 8010092:	a325      	add	r3, pc, #148	; (adr r3, 8010128 <__kernel_sin+0x148>)
 8010094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010098:	f7f0 f8f6 	bl	8000288 <__aeabi_dsub>
 801009c:	4642      	mov	r2, r8
 801009e:	464b      	mov	r3, r9
 80100a0:	f7f0 faaa 	bl	80005f8 <__aeabi_dmul>
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	4620      	mov	r0, r4
 80100aa:	4629      	mov	r1, r5
 80100ac:	f7f0 f8ee 	bl	800028c <__adddf3>
 80100b0:	4604      	mov	r4, r0
 80100b2:	460d      	mov	r5, r1
 80100b4:	ec45 4b10 	vmov	d0, r4, r5
 80100b8:	b003      	add	sp, #12
 80100ba:	ecbd 8b04 	vpop	{d8-d9}
 80100be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c2:	4b1b      	ldr	r3, [pc, #108]	; (8010130 <__kernel_sin+0x150>)
 80100c4:	ec51 0b18 	vmov	r0, r1, d8
 80100c8:	2200      	movs	r2, #0
 80100ca:	f7f0 fa95 	bl	80005f8 <__aeabi_dmul>
 80100ce:	4632      	mov	r2, r6
 80100d0:	ec41 0b19 	vmov	d9, r0, r1
 80100d4:	463b      	mov	r3, r7
 80100d6:	4640      	mov	r0, r8
 80100d8:	4649      	mov	r1, r9
 80100da:	f7f0 fa8d 	bl	80005f8 <__aeabi_dmul>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	ec51 0b19 	vmov	r0, r1, d9
 80100e6:	f7f0 f8cf 	bl	8000288 <__aeabi_dsub>
 80100ea:	4652      	mov	r2, sl
 80100ec:	465b      	mov	r3, fp
 80100ee:	f7f0 fa83 	bl	80005f8 <__aeabi_dmul>
 80100f2:	ec53 2b18 	vmov	r2, r3, d8
 80100f6:	f7f0 f8c7 	bl	8000288 <__aeabi_dsub>
 80100fa:	a30b      	add	r3, pc, #44	; (adr r3, 8010128 <__kernel_sin+0x148>)
 80100fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010100:	4606      	mov	r6, r0
 8010102:	460f      	mov	r7, r1
 8010104:	4640      	mov	r0, r8
 8010106:	4649      	mov	r1, r9
 8010108:	f7f0 fa76 	bl	80005f8 <__aeabi_dmul>
 801010c:	4602      	mov	r2, r0
 801010e:	460b      	mov	r3, r1
 8010110:	4630      	mov	r0, r6
 8010112:	4639      	mov	r1, r7
 8010114:	f7f0 f8ba 	bl	800028c <__adddf3>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	4620      	mov	r0, r4
 801011e:	4629      	mov	r1, r5
 8010120:	f7f0 f8b2 	bl	8000288 <__aeabi_dsub>
 8010124:	e7c4      	b.n	80100b0 <__kernel_sin+0xd0>
 8010126:	bf00      	nop
 8010128:	55555549 	.word	0x55555549
 801012c:	3fc55555 	.word	0x3fc55555
 8010130:	3fe00000 	.word	0x3fe00000
 8010134:	5acfd57c 	.word	0x5acfd57c
 8010138:	3de5d93a 	.word	0x3de5d93a
 801013c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010140:	3e5ae5e6 	.word	0x3e5ae5e6
 8010144:	57b1fe7d 	.word	0x57b1fe7d
 8010148:	3ec71de3 	.word	0x3ec71de3
 801014c:	19c161d5 	.word	0x19c161d5
 8010150:	3f2a01a0 	.word	0x3f2a01a0
 8010154:	1110f8a6 	.word	0x1110f8a6
 8010158:	3f811111 	.word	0x3f811111
 801015c:	00000000 	.word	0x00000000

08010160 <atan>:
 8010160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010164:	ec55 4b10 	vmov	r4, r5, d0
 8010168:	4bc3      	ldr	r3, [pc, #780]	; (8010478 <atan+0x318>)
 801016a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801016e:	429e      	cmp	r6, r3
 8010170:	46ab      	mov	fp, r5
 8010172:	dd18      	ble.n	80101a6 <atan+0x46>
 8010174:	4bc1      	ldr	r3, [pc, #772]	; (801047c <atan+0x31c>)
 8010176:	429e      	cmp	r6, r3
 8010178:	dc01      	bgt.n	801017e <atan+0x1e>
 801017a:	d109      	bne.n	8010190 <atan+0x30>
 801017c:	b144      	cbz	r4, 8010190 <atan+0x30>
 801017e:	4622      	mov	r2, r4
 8010180:	462b      	mov	r3, r5
 8010182:	4620      	mov	r0, r4
 8010184:	4629      	mov	r1, r5
 8010186:	f7f0 f881 	bl	800028c <__adddf3>
 801018a:	4604      	mov	r4, r0
 801018c:	460d      	mov	r5, r1
 801018e:	e006      	b.n	801019e <atan+0x3e>
 8010190:	f1bb 0f00 	cmp.w	fp, #0
 8010194:	f300 8131 	bgt.w	80103fa <atan+0x29a>
 8010198:	a59b      	add	r5, pc, #620	; (adr r5, 8010408 <atan+0x2a8>)
 801019a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801019e:	ec45 4b10 	vmov	d0, r4, r5
 80101a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a6:	4bb6      	ldr	r3, [pc, #728]	; (8010480 <atan+0x320>)
 80101a8:	429e      	cmp	r6, r3
 80101aa:	dc14      	bgt.n	80101d6 <atan+0x76>
 80101ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80101b0:	429e      	cmp	r6, r3
 80101b2:	dc0d      	bgt.n	80101d0 <atan+0x70>
 80101b4:	a396      	add	r3, pc, #600	; (adr r3, 8010410 <atan+0x2b0>)
 80101b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ba:	ee10 0a10 	vmov	r0, s0
 80101be:	4629      	mov	r1, r5
 80101c0:	f7f0 f864 	bl	800028c <__adddf3>
 80101c4:	4baf      	ldr	r3, [pc, #700]	; (8010484 <atan+0x324>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	f7f0 fca6 	bl	8000b18 <__aeabi_dcmpgt>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d1e6      	bne.n	801019e <atan+0x3e>
 80101d0:	f04f 3aff 	mov.w	sl, #4294967295
 80101d4:	e02b      	b.n	801022e <atan+0xce>
 80101d6:	f000 f963 	bl	80104a0 <fabs>
 80101da:	4bab      	ldr	r3, [pc, #684]	; (8010488 <atan+0x328>)
 80101dc:	429e      	cmp	r6, r3
 80101de:	ec55 4b10 	vmov	r4, r5, d0
 80101e2:	f300 80bf 	bgt.w	8010364 <atan+0x204>
 80101e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80101ea:	429e      	cmp	r6, r3
 80101ec:	f300 80a0 	bgt.w	8010330 <atan+0x1d0>
 80101f0:	ee10 2a10 	vmov	r2, s0
 80101f4:	ee10 0a10 	vmov	r0, s0
 80101f8:	462b      	mov	r3, r5
 80101fa:	4629      	mov	r1, r5
 80101fc:	f7f0 f846 	bl	800028c <__adddf3>
 8010200:	4ba0      	ldr	r3, [pc, #640]	; (8010484 <atan+0x324>)
 8010202:	2200      	movs	r2, #0
 8010204:	f7f0 f840 	bl	8000288 <__aeabi_dsub>
 8010208:	2200      	movs	r2, #0
 801020a:	4606      	mov	r6, r0
 801020c:	460f      	mov	r7, r1
 801020e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010212:	4620      	mov	r0, r4
 8010214:	4629      	mov	r1, r5
 8010216:	f7f0 f839 	bl	800028c <__adddf3>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	4630      	mov	r0, r6
 8010220:	4639      	mov	r1, r7
 8010222:	f7f0 fb13 	bl	800084c <__aeabi_ddiv>
 8010226:	f04f 0a00 	mov.w	sl, #0
 801022a:	4604      	mov	r4, r0
 801022c:	460d      	mov	r5, r1
 801022e:	4622      	mov	r2, r4
 8010230:	462b      	mov	r3, r5
 8010232:	4620      	mov	r0, r4
 8010234:	4629      	mov	r1, r5
 8010236:	f7f0 f9df 	bl	80005f8 <__aeabi_dmul>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4680      	mov	r8, r0
 8010240:	4689      	mov	r9, r1
 8010242:	f7f0 f9d9 	bl	80005f8 <__aeabi_dmul>
 8010246:	a374      	add	r3, pc, #464	; (adr r3, 8010418 <atan+0x2b8>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	4606      	mov	r6, r0
 801024e:	460f      	mov	r7, r1
 8010250:	f7f0 f9d2 	bl	80005f8 <__aeabi_dmul>
 8010254:	a372      	add	r3, pc, #456	; (adr r3, 8010420 <atan+0x2c0>)
 8010256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025a:	f7f0 f817 	bl	800028c <__adddf3>
 801025e:	4632      	mov	r2, r6
 8010260:	463b      	mov	r3, r7
 8010262:	f7f0 f9c9 	bl	80005f8 <__aeabi_dmul>
 8010266:	a370      	add	r3, pc, #448	; (adr r3, 8010428 <atan+0x2c8>)
 8010268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026c:	f7f0 f80e 	bl	800028c <__adddf3>
 8010270:	4632      	mov	r2, r6
 8010272:	463b      	mov	r3, r7
 8010274:	f7f0 f9c0 	bl	80005f8 <__aeabi_dmul>
 8010278:	a36d      	add	r3, pc, #436	; (adr r3, 8010430 <atan+0x2d0>)
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	f7f0 f805 	bl	800028c <__adddf3>
 8010282:	4632      	mov	r2, r6
 8010284:	463b      	mov	r3, r7
 8010286:	f7f0 f9b7 	bl	80005f8 <__aeabi_dmul>
 801028a:	a36b      	add	r3, pc, #428	; (adr r3, 8010438 <atan+0x2d8>)
 801028c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010290:	f7ef fffc 	bl	800028c <__adddf3>
 8010294:	4632      	mov	r2, r6
 8010296:	463b      	mov	r3, r7
 8010298:	f7f0 f9ae 	bl	80005f8 <__aeabi_dmul>
 801029c:	a368      	add	r3, pc, #416	; (adr r3, 8010440 <atan+0x2e0>)
 801029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a2:	f7ef fff3 	bl	800028c <__adddf3>
 80102a6:	4642      	mov	r2, r8
 80102a8:	464b      	mov	r3, r9
 80102aa:	f7f0 f9a5 	bl	80005f8 <__aeabi_dmul>
 80102ae:	a366      	add	r3, pc, #408	; (adr r3, 8010448 <atan+0x2e8>)
 80102b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b4:	4680      	mov	r8, r0
 80102b6:	4689      	mov	r9, r1
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7f0 f99c 	bl	80005f8 <__aeabi_dmul>
 80102c0:	a363      	add	r3, pc, #396	; (adr r3, 8010450 <atan+0x2f0>)
 80102c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c6:	f7ef ffdf 	bl	8000288 <__aeabi_dsub>
 80102ca:	4632      	mov	r2, r6
 80102cc:	463b      	mov	r3, r7
 80102ce:	f7f0 f993 	bl	80005f8 <__aeabi_dmul>
 80102d2:	a361      	add	r3, pc, #388	; (adr r3, 8010458 <atan+0x2f8>)
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	f7ef ffd6 	bl	8000288 <__aeabi_dsub>
 80102dc:	4632      	mov	r2, r6
 80102de:	463b      	mov	r3, r7
 80102e0:	f7f0 f98a 	bl	80005f8 <__aeabi_dmul>
 80102e4:	a35e      	add	r3, pc, #376	; (adr r3, 8010460 <atan+0x300>)
 80102e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ea:	f7ef ffcd 	bl	8000288 <__aeabi_dsub>
 80102ee:	4632      	mov	r2, r6
 80102f0:	463b      	mov	r3, r7
 80102f2:	f7f0 f981 	bl	80005f8 <__aeabi_dmul>
 80102f6:	a35c      	add	r3, pc, #368	; (adr r3, 8010468 <atan+0x308>)
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	f7ef ffc4 	bl	8000288 <__aeabi_dsub>
 8010300:	4632      	mov	r2, r6
 8010302:	463b      	mov	r3, r7
 8010304:	f7f0 f978 	bl	80005f8 <__aeabi_dmul>
 8010308:	4602      	mov	r2, r0
 801030a:	460b      	mov	r3, r1
 801030c:	4640      	mov	r0, r8
 801030e:	4649      	mov	r1, r9
 8010310:	f7ef ffbc 	bl	800028c <__adddf3>
 8010314:	4622      	mov	r2, r4
 8010316:	462b      	mov	r3, r5
 8010318:	f7f0 f96e 	bl	80005f8 <__aeabi_dmul>
 801031c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	d14b      	bne.n	80103be <atan+0x25e>
 8010326:	4620      	mov	r0, r4
 8010328:	4629      	mov	r1, r5
 801032a:	f7ef ffad 	bl	8000288 <__aeabi_dsub>
 801032e:	e72c      	b.n	801018a <atan+0x2a>
 8010330:	ee10 0a10 	vmov	r0, s0
 8010334:	4b53      	ldr	r3, [pc, #332]	; (8010484 <atan+0x324>)
 8010336:	2200      	movs	r2, #0
 8010338:	4629      	mov	r1, r5
 801033a:	f7ef ffa5 	bl	8000288 <__aeabi_dsub>
 801033e:	4b51      	ldr	r3, [pc, #324]	; (8010484 <atan+0x324>)
 8010340:	4606      	mov	r6, r0
 8010342:	460f      	mov	r7, r1
 8010344:	2200      	movs	r2, #0
 8010346:	4620      	mov	r0, r4
 8010348:	4629      	mov	r1, r5
 801034a:	f7ef ff9f 	bl	800028c <__adddf3>
 801034e:	4602      	mov	r2, r0
 8010350:	460b      	mov	r3, r1
 8010352:	4630      	mov	r0, r6
 8010354:	4639      	mov	r1, r7
 8010356:	f7f0 fa79 	bl	800084c <__aeabi_ddiv>
 801035a:	f04f 0a01 	mov.w	sl, #1
 801035e:	4604      	mov	r4, r0
 8010360:	460d      	mov	r5, r1
 8010362:	e764      	b.n	801022e <atan+0xce>
 8010364:	4b49      	ldr	r3, [pc, #292]	; (801048c <atan+0x32c>)
 8010366:	429e      	cmp	r6, r3
 8010368:	da1d      	bge.n	80103a6 <atan+0x246>
 801036a:	ee10 0a10 	vmov	r0, s0
 801036e:	4b48      	ldr	r3, [pc, #288]	; (8010490 <atan+0x330>)
 8010370:	2200      	movs	r2, #0
 8010372:	4629      	mov	r1, r5
 8010374:	f7ef ff88 	bl	8000288 <__aeabi_dsub>
 8010378:	4b45      	ldr	r3, [pc, #276]	; (8010490 <atan+0x330>)
 801037a:	4606      	mov	r6, r0
 801037c:	460f      	mov	r7, r1
 801037e:	2200      	movs	r2, #0
 8010380:	4620      	mov	r0, r4
 8010382:	4629      	mov	r1, r5
 8010384:	f7f0 f938 	bl	80005f8 <__aeabi_dmul>
 8010388:	4b3e      	ldr	r3, [pc, #248]	; (8010484 <atan+0x324>)
 801038a:	2200      	movs	r2, #0
 801038c:	f7ef ff7e 	bl	800028c <__adddf3>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4630      	mov	r0, r6
 8010396:	4639      	mov	r1, r7
 8010398:	f7f0 fa58 	bl	800084c <__aeabi_ddiv>
 801039c:	f04f 0a02 	mov.w	sl, #2
 80103a0:	4604      	mov	r4, r0
 80103a2:	460d      	mov	r5, r1
 80103a4:	e743      	b.n	801022e <atan+0xce>
 80103a6:	462b      	mov	r3, r5
 80103a8:	ee10 2a10 	vmov	r2, s0
 80103ac:	4939      	ldr	r1, [pc, #228]	; (8010494 <atan+0x334>)
 80103ae:	2000      	movs	r0, #0
 80103b0:	f7f0 fa4c 	bl	800084c <__aeabi_ddiv>
 80103b4:	f04f 0a03 	mov.w	sl, #3
 80103b8:	4604      	mov	r4, r0
 80103ba:	460d      	mov	r5, r1
 80103bc:	e737      	b.n	801022e <atan+0xce>
 80103be:	4b36      	ldr	r3, [pc, #216]	; (8010498 <atan+0x338>)
 80103c0:	4e36      	ldr	r6, [pc, #216]	; (801049c <atan+0x33c>)
 80103c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80103c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80103ca:	e9da 2300 	ldrd	r2, r3, [sl]
 80103ce:	f7ef ff5b 	bl	8000288 <__aeabi_dsub>
 80103d2:	4622      	mov	r2, r4
 80103d4:	462b      	mov	r3, r5
 80103d6:	f7ef ff57 	bl	8000288 <__aeabi_dsub>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80103e2:	f7ef ff51 	bl	8000288 <__aeabi_dsub>
 80103e6:	f1bb 0f00 	cmp.w	fp, #0
 80103ea:	4604      	mov	r4, r0
 80103ec:	460d      	mov	r5, r1
 80103ee:	f6bf aed6 	bge.w	801019e <atan+0x3e>
 80103f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103f6:	461d      	mov	r5, r3
 80103f8:	e6d1      	b.n	801019e <atan+0x3e>
 80103fa:	a51d      	add	r5, pc, #116	; (adr r5, 8010470 <atan+0x310>)
 80103fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010400:	e6cd      	b.n	801019e <atan+0x3e>
 8010402:	bf00      	nop
 8010404:	f3af 8000 	nop.w
 8010408:	54442d18 	.word	0x54442d18
 801040c:	bff921fb 	.word	0xbff921fb
 8010410:	8800759c 	.word	0x8800759c
 8010414:	7e37e43c 	.word	0x7e37e43c
 8010418:	e322da11 	.word	0xe322da11
 801041c:	3f90ad3a 	.word	0x3f90ad3a
 8010420:	24760deb 	.word	0x24760deb
 8010424:	3fa97b4b 	.word	0x3fa97b4b
 8010428:	a0d03d51 	.word	0xa0d03d51
 801042c:	3fb10d66 	.word	0x3fb10d66
 8010430:	c54c206e 	.word	0xc54c206e
 8010434:	3fb745cd 	.word	0x3fb745cd
 8010438:	920083ff 	.word	0x920083ff
 801043c:	3fc24924 	.word	0x3fc24924
 8010440:	5555550d 	.word	0x5555550d
 8010444:	3fd55555 	.word	0x3fd55555
 8010448:	2c6a6c2f 	.word	0x2c6a6c2f
 801044c:	bfa2b444 	.word	0xbfa2b444
 8010450:	52defd9a 	.word	0x52defd9a
 8010454:	3fadde2d 	.word	0x3fadde2d
 8010458:	af749a6d 	.word	0xaf749a6d
 801045c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010460:	fe231671 	.word	0xfe231671
 8010464:	3fbc71c6 	.word	0x3fbc71c6
 8010468:	9998ebc4 	.word	0x9998ebc4
 801046c:	3fc99999 	.word	0x3fc99999
 8010470:	54442d18 	.word	0x54442d18
 8010474:	3ff921fb 	.word	0x3ff921fb
 8010478:	440fffff 	.word	0x440fffff
 801047c:	7ff00000 	.word	0x7ff00000
 8010480:	3fdbffff 	.word	0x3fdbffff
 8010484:	3ff00000 	.word	0x3ff00000
 8010488:	3ff2ffff 	.word	0x3ff2ffff
 801048c:	40038000 	.word	0x40038000
 8010490:	3ff80000 	.word	0x3ff80000
 8010494:	bff00000 	.word	0xbff00000
 8010498:	08011170 	.word	0x08011170
 801049c:	08011150 	.word	0x08011150

080104a0 <fabs>:
 80104a0:	ec51 0b10 	vmov	r0, r1, d0
 80104a4:	ee10 2a10 	vmov	r2, s0
 80104a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80104ac:	ec43 2b10 	vmov	d0, r2, r3
 80104b0:	4770      	bx	lr
 80104b2:	0000      	movs	r0, r0
 80104b4:	0000      	movs	r0, r0
	...

080104b8 <floor>:
 80104b8:	ec51 0b10 	vmov	r0, r1, d0
 80104bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80104c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80104c8:	2e13      	cmp	r6, #19
 80104ca:	ee10 5a10 	vmov	r5, s0
 80104ce:	ee10 8a10 	vmov	r8, s0
 80104d2:	460c      	mov	r4, r1
 80104d4:	dc32      	bgt.n	801053c <floor+0x84>
 80104d6:	2e00      	cmp	r6, #0
 80104d8:	da14      	bge.n	8010504 <floor+0x4c>
 80104da:	a333      	add	r3, pc, #204	; (adr r3, 80105a8 <floor+0xf0>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	f7ef fed4 	bl	800028c <__adddf3>
 80104e4:	2200      	movs	r2, #0
 80104e6:	2300      	movs	r3, #0
 80104e8:	f7f0 fb16 	bl	8000b18 <__aeabi_dcmpgt>
 80104ec:	b138      	cbz	r0, 80104fe <floor+0x46>
 80104ee:	2c00      	cmp	r4, #0
 80104f0:	da57      	bge.n	80105a2 <floor+0xea>
 80104f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80104f6:	431d      	orrs	r5, r3
 80104f8:	d001      	beq.n	80104fe <floor+0x46>
 80104fa:	4c2d      	ldr	r4, [pc, #180]	; (80105b0 <floor+0xf8>)
 80104fc:	2500      	movs	r5, #0
 80104fe:	4621      	mov	r1, r4
 8010500:	4628      	mov	r0, r5
 8010502:	e025      	b.n	8010550 <floor+0x98>
 8010504:	4f2b      	ldr	r7, [pc, #172]	; (80105b4 <floor+0xfc>)
 8010506:	4137      	asrs	r7, r6
 8010508:	ea01 0307 	and.w	r3, r1, r7
 801050c:	4303      	orrs	r3, r0
 801050e:	d01f      	beq.n	8010550 <floor+0x98>
 8010510:	a325      	add	r3, pc, #148	; (adr r3, 80105a8 <floor+0xf0>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7ef feb9 	bl	800028c <__adddf3>
 801051a:	2200      	movs	r2, #0
 801051c:	2300      	movs	r3, #0
 801051e:	f7f0 fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8010522:	2800      	cmp	r0, #0
 8010524:	d0eb      	beq.n	80104fe <floor+0x46>
 8010526:	2c00      	cmp	r4, #0
 8010528:	bfbe      	ittt	lt
 801052a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801052e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010532:	19a4      	addlt	r4, r4, r6
 8010534:	ea24 0407 	bic.w	r4, r4, r7
 8010538:	2500      	movs	r5, #0
 801053a:	e7e0      	b.n	80104fe <floor+0x46>
 801053c:	2e33      	cmp	r6, #51	; 0x33
 801053e:	dd0b      	ble.n	8010558 <floor+0xa0>
 8010540:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010544:	d104      	bne.n	8010550 <floor+0x98>
 8010546:	ee10 2a10 	vmov	r2, s0
 801054a:	460b      	mov	r3, r1
 801054c:	f7ef fe9e 	bl	800028c <__adddf3>
 8010550:	ec41 0b10 	vmov	d0, r0, r1
 8010554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010558:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801055c:	f04f 33ff 	mov.w	r3, #4294967295
 8010560:	fa23 f707 	lsr.w	r7, r3, r7
 8010564:	4207      	tst	r7, r0
 8010566:	d0f3      	beq.n	8010550 <floor+0x98>
 8010568:	a30f      	add	r3, pc, #60	; (adr r3, 80105a8 <floor+0xf0>)
 801056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056e:	f7ef fe8d 	bl	800028c <__adddf3>
 8010572:	2200      	movs	r2, #0
 8010574:	2300      	movs	r3, #0
 8010576:	f7f0 facf 	bl	8000b18 <__aeabi_dcmpgt>
 801057a:	2800      	cmp	r0, #0
 801057c:	d0bf      	beq.n	80104fe <floor+0x46>
 801057e:	2c00      	cmp	r4, #0
 8010580:	da02      	bge.n	8010588 <floor+0xd0>
 8010582:	2e14      	cmp	r6, #20
 8010584:	d103      	bne.n	801058e <floor+0xd6>
 8010586:	3401      	adds	r4, #1
 8010588:	ea25 0507 	bic.w	r5, r5, r7
 801058c:	e7b7      	b.n	80104fe <floor+0x46>
 801058e:	2301      	movs	r3, #1
 8010590:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010594:	fa03 f606 	lsl.w	r6, r3, r6
 8010598:	4435      	add	r5, r6
 801059a:	4545      	cmp	r5, r8
 801059c:	bf38      	it	cc
 801059e:	18e4      	addcc	r4, r4, r3
 80105a0:	e7f2      	b.n	8010588 <floor+0xd0>
 80105a2:	2500      	movs	r5, #0
 80105a4:	462c      	mov	r4, r5
 80105a6:	e7aa      	b.n	80104fe <floor+0x46>
 80105a8:	8800759c 	.word	0x8800759c
 80105ac:	7e37e43c 	.word	0x7e37e43c
 80105b0:	bff00000 	.word	0xbff00000
 80105b4:	000fffff 	.word	0x000fffff

080105b8 <scalbn>:
 80105b8:	b570      	push	{r4, r5, r6, lr}
 80105ba:	ec55 4b10 	vmov	r4, r5, d0
 80105be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80105c2:	4606      	mov	r6, r0
 80105c4:	462b      	mov	r3, r5
 80105c6:	b99a      	cbnz	r2, 80105f0 <scalbn+0x38>
 80105c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80105cc:	4323      	orrs	r3, r4
 80105ce:	d036      	beq.n	801063e <scalbn+0x86>
 80105d0:	4b39      	ldr	r3, [pc, #228]	; (80106b8 <scalbn+0x100>)
 80105d2:	4629      	mov	r1, r5
 80105d4:	ee10 0a10 	vmov	r0, s0
 80105d8:	2200      	movs	r2, #0
 80105da:	f7f0 f80d 	bl	80005f8 <__aeabi_dmul>
 80105de:	4b37      	ldr	r3, [pc, #220]	; (80106bc <scalbn+0x104>)
 80105e0:	429e      	cmp	r6, r3
 80105e2:	4604      	mov	r4, r0
 80105e4:	460d      	mov	r5, r1
 80105e6:	da10      	bge.n	801060a <scalbn+0x52>
 80105e8:	a32b      	add	r3, pc, #172	; (adr r3, 8010698 <scalbn+0xe0>)
 80105ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ee:	e03a      	b.n	8010666 <scalbn+0xae>
 80105f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80105f4:	428a      	cmp	r2, r1
 80105f6:	d10c      	bne.n	8010612 <scalbn+0x5a>
 80105f8:	ee10 2a10 	vmov	r2, s0
 80105fc:	4620      	mov	r0, r4
 80105fe:	4629      	mov	r1, r5
 8010600:	f7ef fe44 	bl	800028c <__adddf3>
 8010604:	4604      	mov	r4, r0
 8010606:	460d      	mov	r5, r1
 8010608:	e019      	b.n	801063e <scalbn+0x86>
 801060a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801060e:	460b      	mov	r3, r1
 8010610:	3a36      	subs	r2, #54	; 0x36
 8010612:	4432      	add	r2, r6
 8010614:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010618:	428a      	cmp	r2, r1
 801061a:	dd08      	ble.n	801062e <scalbn+0x76>
 801061c:	2d00      	cmp	r5, #0
 801061e:	a120      	add	r1, pc, #128	; (adr r1, 80106a0 <scalbn+0xe8>)
 8010620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010624:	da1c      	bge.n	8010660 <scalbn+0xa8>
 8010626:	a120      	add	r1, pc, #128	; (adr r1, 80106a8 <scalbn+0xf0>)
 8010628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801062c:	e018      	b.n	8010660 <scalbn+0xa8>
 801062e:	2a00      	cmp	r2, #0
 8010630:	dd08      	ble.n	8010644 <scalbn+0x8c>
 8010632:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801063a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801063e:	ec45 4b10 	vmov	d0, r4, r5
 8010642:	bd70      	pop	{r4, r5, r6, pc}
 8010644:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010648:	da19      	bge.n	801067e <scalbn+0xc6>
 801064a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801064e:	429e      	cmp	r6, r3
 8010650:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010654:	dd0a      	ble.n	801066c <scalbn+0xb4>
 8010656:	a112      	add	r1, pc, #72	; (adr r1, 80106a0 <scalbn+0xe8>)
 8010658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e2      	bne.n	8010626 <scalbn+0x6e>
 8010660:	a30f      	add	r3, pc, #60	; (adr r3, 80106a0 <scalbn+0xe8>)
 8010662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010666:	f7ef ffc7 	bl	80005f8 <__aeabi_dmul>
 801066a:	e7cb      	b.n	8010604 <scalbn+0x4c>
 801066c:	a10a      	add	r1, pc, #40	; (adr r1, 8010698 <scalbn+0xe0>)
 801066e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d0b8      	beq.n	80105e8 <scalbn+0x30>
 8010676:	a10e      	add	r1, pc, #56	; (adr r1, 80106b0 <scalbn+0xf8>)
 8010678:	e9d1 0100 	ldrd	r0, r1, [r1]
 801067c:	e7b4      	b.n	80105e8 <scalbn+0x30>
 801067e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010682:	3236      	adds	r2, #54	; 0x36
 8010684:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010688:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801068c:	4620      	mov	r0, r4
 801068e:	4b0c      	ldr	r3, [pc, #48]	; (80106c0 <scalbn+0x108>)
 8010690:	2200      	movs	r2, #0
 8010692:	e7e8      	b.n	8010666 <scalbn+0xae>
 8010694:	f3af 8000 	nop.w
 8010698:	c2f8f359 	.word	0xc2f8f359
 801069c:	01a56e1f 	.word	0x01a56e1f
 80106a0:	8800759c 	.word	0x8800759c
 80106a4:	7e37e43c 	.word	0x7e37e43c
 80106a8:	8800759c 	.word	0x8800759c
 80106ac:	fe37e43c 	.word	0xfe37e43c
 80106b0:	c2f8f359 	.word	0xc2f8f359
 80106b4:	81a56e1f 	.word	0x81a56e1f
 80106b8:	43500000 	.word	0x43500000
 80106bc:	ffff3cb0 	.word	0xffff3cb0
 80106c0:	3c900000 	.word	0x3c900000

080106c4 <_init>:
 80106c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106c6:	bf00      	nop
 80106c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ca:	bc08      	pop	{r3}
 80106cc:	469e      	mov	lr, r3
 80106ce:	4770      	bx	lr

080106d0 <_fini>:
 80106d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106d2:	bf00      	nop
 80106d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106d6:	bc08      	pop	{r3}
 80106d8:	469e      	mov	lr, r3
 80106da:	4770      	bx	lr
